<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on jsmeta</title>
    <link>http://jiangshanmeta.github.io/categories/blog/</link>
    <description>Recent content in Blog on jsmeta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Jul 2016 23:45:02 +0800</lastBuildDate>
    <atom:link href="http://jiangshanmeta.github.io/categories/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>本地存储的一些比较</title>
      <link>http://jiangshanmeta.github.io/post/blog/storage/</link>
      <pubDate>Sat, 09 Jul 2016 23:45:02 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/blog/storage/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://jiangshanmeta.github.io/post/blog/ebussiness/&#34;&gt;最近的项目中使用了localStorage实现了本地购物车&lt;/a&gt;，借着这个机会总结一下各种本地存储。还有，发现以往过于关注API层面的东西了，反而对API是为了解决什么忽视了。&lt;/p&gt;

&lt;h2 id=&#34;cookie:5fe4e2fe3590b5bd8669d1961910a370&#34;&gt;cookie&lt;/h2&gt;

&lt;p&gt;cookie应该是最早的本地存储，本来今天不想谈API的东西，但是cookie的api设计的简直反人类。&lt;/p&gt;

&lt;p&gt;cookie的一个很重要的应用是用来判断用户是谁（登录功能）。因为http是无状态协议，无法根据之前的状态进行本次的请求处理。在登录成功后后端返回的报文中会设定包含用户登录信息的cookie，以后请求的时候会在请求头信息中包含cookie。&lt;/p&gt;

&lt;p&gt;cookie在每次http请求中都是默认自带的，这点有好处也有坏处。好处是不用手动把cookie信息写入报文，并且一般后端语言也会默认支持对cookie的读取，比如php的&lt;code&gt;$_COOKIE&lt;/code&gt;，坏处是不管用不用得到都会一股脑传过去，虽然对于现在的网络环境而言这并不是什么太大的问题。cookie还有一个缺点是大小限制为4k，复杂点的web应用应该就不够用了。&lt;/p&gt;

&lt;p&gt;最近在看http相关的东西，发现还有个&lt;code&gt;httponly&lt;/code&gt;属性，我觉得挺好的，以前是以一个纯前端的角度去看cookie，因为js无法控制&lt;code&gt;httponly&lt;/code&gt;的cookie，所以没见过有人提。这个属性很好的提升了cookie的安全性。&lt;/p&gt;

&lt;h2 id=&#34;localstorage:5fe4e2fe3590b5bd8669d1961910a370&#34;&gt;localStorage&lt;/h2&gt;

&lt;p&gt;最近的项目中是要做一个购物车，因而使用了localStorage，相比较于cookie，它的存储空间更大，并且没有过期时间的概念，也就是说除非手动删除它会一直保存。&lt;/p&gt;

&lt;p&gt;和cookie还有一点不同就是需要自己手动向后端提交localStorage的内容，服务器端无法直接访问localStorage。确实可以减少网络传输。。毕竟设计的最大存储比cookie大多了，要是和cookie似的自动写到报文里每次请求估计最大的内容就是localStorage了吧。&lt;/p&gt;

&lt;p&gt;对于我的购物车功能，我觉得写得最折腾的就是同步本地数据和线上数据，每一次增删查改之后都要拿一份线上数据处理后然后返回给前端，前端再更新页面和更新localStorage。&lt;/p&gt;

&lt;h2 id=&#34;sessionstorage:5fe4e2fe3590b5bd8669d1961910a370&#34;&gt;sessionStorage&lt;/h2&gt;

&lt;p&gt;这是为了会话控制而存在的，看起来和localStorage很像但是生命周期短得多，如果关了网页重开就没了，开一个新的tab也不会有当前的sessionStorage。&lt;/p&gt;

&lt;h2 id=&#34;indexeddb:5fe4e2fe3590b5bd8669d1961910a370&#34;&gt;indexedDB&lt;/h2&gt;

&lt;p&gt;？？这货出现是为了解决啥？没想明白，难道是出来自high的？？&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一个电商网站的基本实现</title>
      <link>http://jiangshanmeta.github.io/post/blog/ebussiness/</link>
      <pubDate>Tue, 05 Jul 2016 20:05:02 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/blog/ebussiness/</guid>
      <description>&lt;p&gt;最近在做的是一个简易的购物系统，因为并不是主营业务，所以并不像电商网站那样复杂，否则就我一个人做这件事情会崩溃的。虽然只是一个简易版的电商，但是各项功能还是有的。有商品的展示列表，商品的详情展示，购物车功能，订单功能，金流管理。其中支付功能和金流我要处理的并不多，只是在以往基础上添加几个参数写几个if else。其他的就要一个一个慢慢写。&lt;/p&gt;

&lt;p&gt;第一个要实现的是商品的本身。&lt;/p&gt;

&lt;p&gt;关于这些商品，一开始我们是线上部分只做纯展示使用，线下负责具体的业务，所以这个商品表的结构并不困难，一个名称，一段描述，一张图，一个价格范围，这些都是很简单的东西，比较复杂的是商品的分类，于是我们又建了一个商品分类表，商品表里保存着商品分类表里的一个id。这个商品分类表其实不复杂，一个名称，再加上一个enum的基础分类即可，其余字段都是小的辅助。有了商品做商品列表和商品详情页就没什么难的了，就是个纯展示的工作。因为种类本身就不多，连搜索都没加。第一阶段的工作就这样结束了，也没有后面这个小型电商网站什么事。&lt;/p&gt;

&lt;p&gt;后来，后来就开始做了呗。首先要做的是补充商品信息。原来只有一个简单的商品描述，但是型号、颜色之类的都没有去添加。针对这个问题，本来是想和淘宝似的做个正交的分类。然后老板直接说就做一级分类。这数据上的复杂度就直接下来了。一个商品对应多个型号，每个型号有自己的价格，与淘宝不同的是，我们线下有多家实体店，所以每个型号需要对应多个库存。一般来说这种多型号的应该建张商品型号表然后关联起来，然而本来为了偷懒我就建了个array然后多个型号都扔到这个这个array里。最终的后台编辑这个型号是用vue做的。深深感觉我在这里留了的坑。希望后人重构的时候能够淡定。其实还有个坑，是我在数据库的最终保存形式是json而不是一个array。我已经遇到一个坑了。自己挖的坑，含着泪也要踩下去。&lt;/p&gt;

&lt;p&gt;商品的必要信息有了，然后是购物车的实现。&lt;/p&gt;

&lt;p&gt;作为一个穷的只逛淘宝的人，其他的电商网站我还真的不熟悉。淘宝最近实在推app，对于购物车功能要求登录。然而传统的电商是不要求登陆的。于是我们需要本地存储。我们使用的本地存储方案是localStorage。之所以采用这个方案一个很重要的方案是因为同事也在用它做本地存储，当然，从纯技术角度来看localStorage比cookie好用，而且作为移动端项目也不用太过于担心兼容性问题。&lt;/p&gt;

&lt;p&gt;然后是购物车的数据结构。一开始有两个大的方向，一个是在用户本身建一个购物车字段存具体信息，因为我们使用的是mongoDB数据库，可以存一个array，另一个方案是拆一张表出来。于是我就问头其他电商的思路，头说考虑性能还是建张表吧。表的结构不复杂，用户的id，用户基本信息的快照，商品的id，商品型号，商品基本信息快照，商品数量，加入时间。最后一个我是见有的电商购物车保存多少天然后就删掉而预留的字段，目前并没有用到。用户每次想购物车加入商品，就会插入一条记录。&lt;/p&gt;

&lt;p&gt;数据结构约定好了就要实现同步了。其实我的做法是比较投机取巧的，如果是非登录态，添加商品的时候只会快照一些基本信息存到localStorage里，但是如果是在登录态，向购物里添加东西是需要ajax请求的，后端插入数据后返回的数据包含这个购物车记录的id，我就利用有没有这个id判断数据库是否已插入这条数据。遍历post过来的本地数据，如果没购物车id就直接插入一条新的记录，如果有这个id就update一下（可能会修改数量，本身我只支持修改数量，并不支持修改型号），一些安全校验就不说了。但是上面的实现有个问题，一开始我也没有想到，就是一条购物车记录线上有数据，但是用户在非登录态删除了，同步的时候上面的方法并无法识别。我的解决方案是 在处理post过来的数据之前先拿到此时线上购物车的ids 存成一个array（这个时间点很重要），然后处理post过来的数据，把post过来的数据库id也存成一个array，两者比较如果线上有post过来的没有，就说明本地删了数据，要把线上数据也删除。&lt;/p&gt;

&lt;p&gt;其他的就是些增删查改之类的工作了，没什么太大的难度，就是注意同步数据这个问题，顺便感谢vue。&lt;/p&gt;

&lt;p&gt;购物车实现完成之后就是从购物车到订单了。&lt;/p&gt;

&lt;p&gt;从购物车到订单这一步牵扯到的表比较多。购物车表、商品表、订单表，还有一个子订单表。购物车表就不用说了，商品表是因为要查一遍最新的商品信息，拿到最新的价格等信息，用户选中的购物车中的每一条记录都会转化成子订单中的一条记录，同时在订单表中更新。订单表除了子订单这一个字段外，还有一些用户的基本信息，状态、各种时间戳。&lt;/p&gt;

&lt;p&gt;从购物车生成订单后，还需要用户确认。因为业务的需要，有些商品虽然是线上卖，但是要到线下实体店处理（我不会告诉你处理这个写了不少代码），还有有的商品可以邮寄，就有了满多少钱包邮的问题。所以需要用户确认取货方式、去哪家店处理、最终支付金额。在这里用户可以选择删除部分子订单，或者把一些订单里的商品重新放回购物车，或者把订单彻底取消。前两个处理的时候需要考虑订单中商品价格的重新计算、顺带着还有是否达到包邮价格。&lt;/p&gt;

&lt;p&gt;后来同事吐槽我说你见过哪个电商有放回购物车这个功能的？于是我就念了两句诗。不要在乎这些细节，反正我实现了。&lt;/p&gt;

&lt;p&gt;用户确认订单后后进入支付环节。此时，用户依然可以取消订单。支付是用的同事封装好的代码，虽然我也改了几行，毕竟同事写的代码考虑的都是主营业务订单，我们这个小电商系统实际是自己写着玩的。在支付成功的回调函数中，我更新了订单的状态，写入了金流信息。&lt;/p&gt;

&lt;p&gt;现在用户已付款，剩下的就是门店获取订单信息，准备货，就是一些基本的增删查改。&lt;/p&gt;

&lt;p&gt;这个小电商基本上是实现了，但是我的主要工作是实现功能，也就是把js和php写完，换句话说就是样式完全没理，根本没法看。看看是让美术设计一套还是抄一套别的电商的样式。&lt;/p&gt;

&lt;p&gt;基本就这样。写了差不多一个星期，完活，撒花。&lt;/p&gt;

&lt;p&gt;然后就遇到坑了。在商品分类那里，原来是要考虑多家门店多个库存的，后来老板说这样维护起来压力过大，让我在商品分类那里存一个配件id，把这个当成一个配件，然后在库存表里查库存信息。其实写起来并没有什么问题，多查一次表而已。&lt;/p&gt;

&lt;p&gt;update 2016/08/02&lt;/p&gt;

&lt;p&gt;其实这个小电商功能一直没怎么用起来，今天又小修小补了，做了一个直接购买功能。其实是同事闲先加入购物车再购买是在太折腾，让我仿照其他电商网站做一个直接购买功能。仅仅从功能实现角度来看这个问题其实并不复杂，但是我发现我上面预言有坑的地方确实坑到了自己。每次的匹配规格做的太纠结了，当初真的该建一张新表。然而后悔也晚了，数据已经填进去了，现在改就太折腾了，所以还是想着法补救吧。其实现在想做的是把这个规格匹配封装到Model层中，至少不用每次复制粘贴规格匹配了。而且有了&lt;a href=&#34;http://jiangshanmeta.github.io/post/php/exit/&#34;&gt;封装差错检测&lt;/a&gt;的经验这个也做起来很容易，匹配成功就返回必要的数据，匹配不成功就直接报错退出程序。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>技术类文章工具汇总</title>
      <link>http://jiangshanmeta.github.io/post/blog/techblog/</link>
      <pubDate>Fri, 03 Jun 2016 19:55:29 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/blog/techblog/</guid>
      <description>

&lt;p&gt;收藏一些提高知识水平的技术类文章&lt;/p&gt;

&lt;h2 id=&#34;html:7c5004fa5e3547b8952a8bdb79e9c4fc&#34;&gt;html&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://web.jobbole.com/84926/&#34;&gt;前端科普文：为什么&amp;lt;!DOCTYPE&amp;gt;不可或缺&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;css相关:7c5004fa5e3547b8952a8bdb79e9c4fc&#34;&gt;CSS相关&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.zhangxinxu.com/wordpress/2015/03/background-object-position-value-percent/&#34;&gt;&lt;position&gt;值简介,相对底部右侧定位,理解百分比定位——张鑫旭&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/aaronjs/p/4642015.html&#34;&gt;深入理解CSS3 Animation 帧动画——艾伦 Aaron&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://web.jobbole.com/86079/&#34;&gt;利用伪元素美化加载失败的图片&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.zhangxinxu.com/wordpress/2015/03/css3-object-position-object-fit/&#34;&gt;半深入理解CSS3 object-position/object-fit属性&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.w3cplus.com/css/dirty-tricks-dark-corners-front-end-pt1.html&#34;&gt;前端开发中的一些黑魔法Pt1(各种CSS技巧)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.w3cplus.com/css/dirty-tricks-dark-corners-front-end-pt2.html&#34;&gt;前端开发中的一些黑魔法Pt2(各种CSS技巧)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.w3cplus.com/css3/introducing-css-clip-path-property.html&#34;&gt;clip-path介绍&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;移动端:7c5004fa5e3547b8952a8bdb79e9c4fc&#34;&gt;移动端&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jianshu.com/p/6e2b68a93c88&#34;&gt;移动端300ms点击延迟和点击穿透问题&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;javascript:7c5004fa5e3547b8952a8bdb79e9c4fc&#34;&gt;javascript&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://youmightnotneedjquery.com/&#34;&gt;you-might-not-need-jquery&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/oneuijs/You-Dont-Need-jQuery/blob/master/README.zh-CN.md&#34;&gt;You-Dont-Need-jQuery&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;计算机网络:7c5004fa5e3547b8952a8bdb79e9c4fc&#34;&gt;计算机网络&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html&#34;&gt;SSL/TLS协议运行机制的概述——阮一峰&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html&#34;&gt;图解SSL/TLS协议&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;前端:7c5004fa5e3547b8952a8bdb79e9c4fc&#34;&gt;前端&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.w3cplus.com/animation/high-performance-animation.html&#34;&gt;高性能的动画&lt;/a&gt;，题目虽然是叫高性能网络，但是可以从浏览器渲染角度来看，深入理解重排、重绘以及 CSS的奇技淫巧是如何提高性能的（影响各个阶段的CSS属性）。&lt;/p&gt;

&lt;h2 id=&#34;环境搭建:7c5004fa5e3547b8952a8bdb79e9c4fc&#34;&gt;环境搭建&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jianshu.com/p/2c53e201ba84&#34;&gt;wamp环境PHP安装mongodb扩展&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;工具-库:7c5004fa5e3547b8952a8bdb79e9c4fc&#34;&gt;工具/库&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://verou.me/css3patterns/&#34;&gt;能用渐变实现的图案&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cubic-bezier.com&#34;&gt;贝赛尔曲线在线展示&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://easings.net/zh-cn&#34;&gt;常见缓动函数&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/examples/ShapesOfCSS/&#34;&gt;shapes of css&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://daneden.github.io/animate.css/&#34;&gt;CSS3动画库——animate.css&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bennettfeely.com/clippy/&#34;&gt;clip-path生成器&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>最近在做什么</title>
      <link>http://jiangshanmeta.github.io/post/blog/blog1/</link>
      <pubDate>Thu, 26 May 2016 21:09:38 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/blog/blog1/</guid>
      <description>&lt;p&gt;最近在忙些什么呢？忙着抄别人的APP。基本需求是做一个导购类型的小东西。&lt;/p&gt;

&lt;p&gt;为什么要做这个东西呢？是为了统计顾客对什么感兴趣然后为店面采购提供依据同时引流，所以虽然是导购性质并不指望从拿到返点之类的。&lt;/p&gt;

&lt;p&gt;明确了想要干什么那就去分解问题逐步实现。&lt;/p&gt;

&lt;p&gt;我们想统计用户对什么商品感兴趣，需要用户看到一些商品然后标记为感兴趣。用户把某件商品标记为感兴趣其实从代码角度不难实现，我甚至觉得这里没什么可说的。那么问题就变成了用户需要看到商品。&lt;/p&gt;

&lt;p&gt;商品信息从哪里来？可以找编辑一个一个输入啊。同时我们也希望用户参与发布推荐商品这一环节，群众的力量是无穷的。对于自己的编辑我们可以让他各种敲键盘输入，然而对于用户呢？并且这个需求最初定位为在微信公众号里推广，在手机上输入大量文字，用户会陪你玩？&lt;/p&gt;

&lt;p&gt;所以我们需要找到让用户在手机上能轻松分享商品的方法。顺便说一句，这里的商品是来自淘宝之类的电商的。我们可以让用户输入url然后后台分析商品信息。后台分析url然后解析出商品的名称价格等信息其实不难实现，最终的实现是借助于&lt;a href=&#34;https://github.com/samacs/simple_html_dom&#34;&gt;一个第三方库&lt;/a&gt;，然而，你确定用户知道url是什么吗？你上大街上随便找100个人问问有几个知道url的。而且在手机上敲url，你真的不觉得这个想法有点疯狂吗？&lt;/p&gt;

&lt;p&gt;降低用户的发布门槛是很重要的，否则用户主动参与的少，编辑工作也很大。最好能提供一个按钮让用户能一点我们我们就获得url，然后处理数据，对用户来说门槛很低了。&lt;/p&gt;

&lt;p&gt;从技术角度上，我们想利用iframe进行跨域拿到某宝的页面，用户在某宝搜索找到想要的商品点个按钮我们获取url，交给后台分析，然后返回分析结果给前台。非常不幸的是由于浏览器安全限制我们是不可能拿到某宝某个具体商品的url的。&lt;/p&gt;

&lt;p&gt;问题分析了这么久，想降低用户门槛的尝试以失败告终，最终要劳驾我们的编辑同学了。不过，编辑同学也不用太累啊，在电脑上把url复制粘贴后台就处理的差不多了啊//大量重复行劳动除外。&lt;/p&gt;

&lt;p&gt;其实还有一个没有很好解决的问题，页面上有些东西是后来用js写上去的，相应的内容是很难分析的。&lt;/p&gt;

&lt;p&gt;还有一块内容想做的是评论系统。感觉是再做一个贴吧。&lt;/p&gt;

&lt;p&gt;好吧，我抄的APP是半糖，然后我已经忍不住买买买了。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>