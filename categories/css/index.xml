<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Css on jsmeta</title>
    <link>http://jiangshanmeta.github.io/categories/css/</link>
    <description>Recent content in Css on jsmeta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Jun 2016 19:23:09 +0800</lastBuildDate>
    <atom:link href="http://jiangshanmeta.github.io/categories/css/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>bootstrap源码解读——栅格系统</title>
      <link>http://jiangshanmeta.github.io/post/bootstrap/grid/</link>
      <pubDate>Sat, 25 Jun 2016 19:23:09 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/bootstrap/grid/</guid>
      <description>

&lt;p&gt;bootstrap的CSS部分中最出名的应该就是栅格系统了，它解决了网页中常见的多列布局问题。对应的实现其实并不是特别复杂，主要包括以下知识点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;盒模型&lt;/li&gt;
&lt;li&gt;浮动&lt;/li&gt;
&lt;li&gt;相对定位&lt;/li&gt;
&lt;li&gt;响应式布局&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;基本概念:53f7ea7618082d6b557ccddb7ec1053e&#34;&gt;基本概念&lt;/h2&gt;

&lt;p&gt;栅格系统的行（row）必须包裹在&lt;code&gt;.container&lt;/code&gt;或者&lt;code&gt;container-fluid&lt;/code&gt;中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.container {
  padding-right: 15px;
  padding-left: 15px;
  margin-right: auto;
  margin-left: auto;
}
@media (min-width: 768px) {
  .container {
    width: 750px;
  }
}
@media (min-width: 992px) {
  .container {
    width: 970px;
  }
}
@media (min-width: 1200px) {
  .container {
    width: 1170px;
  }
}
.container-fluid {
  padding-right: 15px;
  padding-left: 15px;
  margin-right: auto;
  margin-left: auto;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从代码中看出bootstrap中移动优先的理念，默认的都是小屏下的样式，再逐步通过媒体查询实现大屏下的样式。&lt;code&gt;container&lt;/code&gt;和&lt;code&gt;container-fluid&lt;/code&gt;在小屏下的行为是一致的，但是在pad屏或者更大的屏幕下，前者表现为有固定宽度居中显示，而后者一直保持宽度100%，虽然我很好奇后者为什么要添加上&lt;code&gt;margin-left:auto;margin-right:auto;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;而列的样式比较有趣&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.row {
  margin-right: -15px;
  margin-left: -15px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;row要包含在container中，container包含了15px的左右padding，row却用左右各-15px的margin撑了出去，抵消了container的padding，写这个框架的人在想什么？问题的答案在于列的样式以及列嵌套。在列的通用样式里，有这样的设置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;padding-right: 15px;
padding-left: 15px;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果我们想要实现列嵌套，例如如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
  &amp;lt;div class=&amp;quot;col-sm-9&amp;quot;&amp;gt;
    Level 1: .col-sm-9
    &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;col-xs-8 col-sm-6&amp;quot;&amp;gt;
        Level 2: .col-xs-8 .col-sm-6
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;col-xs-4 col-sm-6&amp;quot;&amp;gt;
        Level 2: .col-xs-4 .col-sm-6
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们需要内层的row抵消掉外层的col的padding。&lt;/p&gt;

&lt;h2 id=&#34;盒模型部分:53f7ea7618082d6b557ccddb7ec1053e&#34;&gt;盒模型部分&lt;/h2&gt;

&lt;p&gt;默认情况下box-sizing为content-box，bootstrap上来就重置了盒模型为border-box。为什么要这么做呢？因为栅格系统的每一列的宽度都是根据百分比计算得到的，如果使用默认的content-box，如果有的列加上border或者padding，布局直接会乱掉。基本上等分布局的实现离不开这一设置。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* {
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;浮动部分:53f7ea7618082d6b557ccddb7ec1053e&#34;&gt;浮动部分&lt;/h2&gt;

&lt;p&gt;如果让你实现多列布局，你想怎么办？最容易想到的就是浮动啊。bootstrap确实是使用浮动实现多列布局的。&lt;/p&gt;

&lt;p&gt;部分代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12 {
  float: left;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;既然使用了浮动，那么就免不了要处理浮动带来的盒子塌陷问题。具体实现如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.container:after,
.container-fluid:after,
.row:after{
  display: table;
  content: &amp;quot; &amp;quot;;
  clear: both;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有的时候我们需要对列进行偏移，bootstrap提供了&lt;code&gt;col-*-offset-*&lt;/code&gt;一系列类，实现原理是通过margin-left。&lt;/p&gt;

&lt;h2 id=&#34;相对定位部分:53f7ea7618082d6b557ccddb7ec1053e&#34;&gt;相对定位部分&lt;/h2&gt;

&lt;p&gt;一开始读bootstrap 源码的时候，发现列的公共样式里面有这么一条：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;position: relative;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一般来说相对定位是和绝对定位结合使用的，这里有没有绝对定位是干什么的呢？当我读到关于列顺序的代码的时候我就明白了。&lt;/p&gt;

&lt;p&gt;相对定位的元素，如果是使用top left right bottom ，其定位是相对于原来的位置进行定位。举个例子&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.col-xs-push-6 {
  left: 50%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;应用此类后col相对于原来的位置向右偏移了50%。看起来是在模拟flex布局的order。然而我真的没在生产环境里用过，真的没有。&lt;/p&gt;

&lt;h2 id=&#34;响应式布局:53f7ea7618082d6b557ccddb7ec1053e&#34;&gt;响应式布局&lt;/h2&gt;

&lt;p&gt;作为一个前端框架，bootstrap显然要处理不同屏幕下的显示问题，所以使用了响应式布局。处于移动优先这一概念的考虑，bootstrap默认设施都是在手机小屏下，然后通过媒体查询实现其他较大屏幕的样式设置。当浏览器宽度超过了分界点，如果没有设置此区间的新样式，按照更小屏幕的样式显示。&lt;/p&gt;

&lt;p&gt;其实对于手机端来说，bootstrap一方面可能太重了，另一方面响应式布局也不见得是万能的。这就是另一个话题了。&lt;/p&gt;

&lt;p&gt;对于bootstrap的css，目前觉得也就是它的栅格系统有必要说一下，其他的再说吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何将页脚固定在页面底部</title>
      <link>http://jiangshanmeta.github.io/post/stickyfooter/</link>
      <pubDate>Fri, 24 Jun 2016 20:05:51 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/stickyfooter/</guid>
      <description>

&lt;p&gt;在一个网页中通常会有页脚的设置。如果页面内容较少，看起来页脚就像是浮了起来，在浏览器的下面还有一块白色，显得非常难看。我不会告诉你我最近看到的新鲜的页面里还有这种问题，都是同行，给人个面子，不给链接了。那么如何解决这一问题呢？&lt;/p&gt;

&lt;h2 id=&#34;javascript方案:57c3c18f56fe86510d201aa293fed882&#34;&gt;javascript方案&lt;/h2&gt;

&lt;p&gt;不难，请自行百度。然而我总是想能用css解决的绝对不用js。先约定一下页面结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
	&amp;lt;header id=&amp;quot;header&amp;quot;&amp;gt;

	&amp;lt;/header &amp;gt;
	&amp;lt;main id=&amp;quot;header&amp;quot;&amp;gt;

	&amp;lt;/main&amp;gt;
	&amp;lt;footer id=&amp;quot;footer&amp;quot;&amp;gt;

	&amp;lt;/footer&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;公共的样式设置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*{
	margin:0;
	padding:0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;table方案:57c3c18f56fe86510d201aa293fed882&#34;&gt;table方案&lt;/h2&gt;

&lt;p&gt;这里所说的table并不是说html table，而是css table。在css的display属性中，有一堆关于table的值，比如&lt;code&gt;table&lt;/code&gt;,&lt;code&gt;table-row&lt;/code&gt;,&lt;code&gt;table-cell&lt;/code&gt;。这些值可以帮助我们像表格一样布局而不使用html table。这里用到的是&lt;code&gt;table&lt;/code&gt;和&lt;code&gt;table-row&lt;/code&gt;两个值。&lt;/p&gt;

&lt;p&gt;我们可以把整个body视为一个table，然后header、main、footer三部分视为table-row。并且让main占据100%高度。可能你觉得很奇怪如果main高度设为100%，那么header和footer的高度岂不是零了？但是table有许多神奇的特性，header和footer会正常显示。&lt;/p&gt;

&lt;p&gt;这样你会发现依然没有实现固定在底部。因为body的高度现在是由内容决定的，我们要设置body的最小高度设为视口高度。可以采用100vh这么一个方案，如果担心兼容性问题，可以把高度设为百分比。&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;body{
	display:table;
	width:100%;
	min-height:100vh;
}
#main{
	display:table-row;
	height:100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在线demo：&lt;a href=&#34;http://jiangshanmeta.github.io/blogdemo/stickyfooter/table.html&#34;&gt;固定在底部的页脚——table方案&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;flex方案:57c3c18f56fe86510d201aa293fed882&#34;&gt;flex方案&lt;/h2&gt;

&lt;p&gt;flex作为布局神器，基本上你想到的用flex都能做。这里所需要的是两个属性&lt;code&gt;flex-direction&lt;/code&gt;和&lt;code&gt;flex-grow&lt;/code&gt;。我们需要把body作为 flex盒子，并把flex盒子方向设为column，把我们的主体内容的扩展属性设为1，header和footer不扩展，这样就会让主体内容自动填充空余部分。&lt;/p&gt;

&lt;p&gt;代码如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;body{
	display:flex;
	flex-direction:column;
	min-height:100vh;
}
#main{
	flex-grow:1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在线demo：&lt;a href=&#34;http://jiangshanmeta.github.io/blogdemo/stickyfooter/flex.html&#34;&gt;固定在底部的页脚——flex方案&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;总结:57c3c18f56fe86510d201aa293fed882&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;关于如何实现固定在底部的页脚，其实也有许多方案，但是有各种各样的问题，比如footer的高度必须是固定的。我上面所说的两种纯CSS方案都不需要固定footer的高度，基本上可以直接拿到生产环境里用。另外，关于css table的使用自己还需要多多学习，希望近期能够写篇总结。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于CSS3 transition 的几个小tip</title>
      <link>http://jiangshanmeta.github.io/post/transitiontip/</link>
      <pubDate>Tue, 21 Jun 2016 20:19:53 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/transitiontip/</guid>
      <description>

&lt;p&gt;关于CSS3的transition一般写过一阵的基本玩法也都会了，这里收集一些transition的小细节&lt;/p&gt;

&lt;h2 id=&#34;关于伪元素的过渡:fe079bb6a643aa02f488f646a5d5f38e&#34;&gt;关于伪元素的过渡&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://jiangshanmeta.github.io/post/pseudo/&#34;&gt;之前总结过伪元素的一些应用&lt;/a&gt;，但是没有提及如何使用伪元素进行过渡。
直接修改伪元素的属性或者给伪元素添加类名都是很折腾的。常见的改变伪元素的方案是给其父元素添加类名或者利用父元素的伪类。提到伪类，那么能否直接对伪元素本身应用伪类？比如:hover，希望伪元素hover的时候状态改变。然而尝试的结果是否定的。目前对其父元素添加类名或者伪类是对伪元素应用过渡的最简单可行的方法。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jiangshanmeta.github.io/blogdemo/transitiontip/pseudo.html&#34;&gt;在线demo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;模拟input宽度的改变:fe079bb6a643aa02f488f646a5d5f38e&#34;&gt;模拟input宽度的改变&lt;/h2&gt;

&lt;p&gt;如果想利用硬件加速，避免重绘，我们一般要避免width、height、margin之类的属性过渡。然而，有的时候我们确实需要宽度变化的过渡，比如输入框在获取焦点的时候变长，失去焦点后宽度又恢复原状。&lt;a href=&#34;http://t.imooc.com/learn/42&#34;&gt;慕课网一个美化表单案例&lt;/a&gt;就提到了这么一种需求。想实现这一需求可以使用width、padding属性的过渡实现，但是免不了大量的重绘，从前端性能优化的角度来看实现地并不优雅。&lt;/p&gt;

&lt;p&gt;其实换一种思路，我们不见得让输入框真的变长，只要是输入框看起来变长了就行，毕竟我们的目的是加一个动画效果提升用户体验。于是就有了这么一个障眼法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;div class=&amp;quot;clipped&amp;quot; &amp;gt;
	&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;clip&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.clipped{
	position:relative;
	width:154px;
}
.clipped .clip{
	position:absolute;
	right:0;
	top:0;
	width:50px;
	height:25px;
	border:2px solid #ccc;
	border-left:0;
	border-radius:4px;
	/*pointer-events:none;*/
	z-index:-1;
	transition:0.4s linear;
}
.clipped input{
	width:150px;
	height:25px;
	border:2px solid #ccc;
	border-radius:4px;
	border-right:0px;
	
}
.clipped input:focus{
	outline:none;
	
}
.clipped input:focus ~.clip{
	transform:translate3d(40px,0,0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://jiangshanmeta.github.io/blogdemo/transitiontip/clipping.html&#34;&gt;在线demo&lt;/a&gt;
基本原理是一个绝对定位的div，定位到输入框的右边，模拟输入框右边的样子，input框获得焦点的时候把这个div transform。具体的看代码。如果可以的话想用伪元素实现这个div，然而input并不支持伪元素。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>深入理解贝塞尔曲线之如何实现匀加/减速动画</title>
      <link>http://jiangshanmeta.github.io/post/cubicbezier/</link>
      <pubDate>Tue, 14 Jun 2016 19:24:18 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/cubicbezier/</guid>
      <description>

&lt;p&gt;如果要实现web动画，通常有三个方式，第一是使用gif图，第二是使用CSS3中的transition和animation，第三是使用javascript。gif图一般交给美术去制作，不需要coding，js实现web动画是一个比较成熟的方案了，它的特点是兼容性好，能控制的动画效果多，适合制作复杂的动画效果。随着CSS3的浏览器支持程度越来越高，使用CSS3写web动画也成为一个流行的方式。&lt;/p&gt;

&lt;p&gt;为了控制动画进行过程，CSS3为我们提供了缓动函数，分别为transition-timing-function和animition-timing-function (以下统称timing-function),通常用的是几个关键字属性：linear、ease、ease-in、ease-out、ease-in-out。&lt;/p&gt;

&lt;p&gt;linear是线性动画；ease是默认的动画效果，特点是先快后慢，时间50%的时候已经完成80%的动画效果了；ease-in是动画进行过程中一直加速；ease-out是动画进行过程中一直减速；ease-in-out和ease很相似，都是先加速后减速，但是时间50%的时候完成动画的50%；一般来说，如果没太大的追求这些关键字就足够了。有这种想法的可以直接点击右上角的那个X了。&lt;/p&gt;

&lt;p&gt;稍微高级一点的玩法是使用cubic-bezier,通过指定贝塞尔曲线的两个控制点控制缓动函数。其实三次贝塞尔曲线有四个控制点，然而对于CSS来说第一个控制点是(0,0)，第四个控制点是(1,1)，所以留给我们操作的只有两个控制点了。而且这两个控制点也是有限制的，横坐标∈[0,1]，纵坐标可以大于1。上面几个关键字其实是预定义好的贝塞尔曲线。&lt;/p&gt;

&lt;p&gt;这个贝塞尔曲线就是我们今天的主角。原始需求是：实现匀加/减速动画。最一开始的想法是使用js控制，好像也没什么难度，会高中物理的就能解决。后来我就想能不能用CSS实现这一效果，毕竟我的一个原则是能用CSS实现的绝对不用js。&lt;/p&gt;

&lt;p&gt;先上图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/webanimation/beziercurve.jpg&#34; alt=&#34;贝塞尔曲线的物理含义&#34; /&gt;&lt;/p&gt;

&lt;p&gt;用这张图说明一下对应的物理含义。横轴是时间进度，纵轴是动画进度。有高中物理水平的就能看得出来这不就是 *路程-时间曲线*嘛。所以曲线一阶导数的物理含义就是速度，二阶导数的物理含义就是加速度。想要实现匀加/减速动画，只要使二阶导数是一个不为零的常数就好了。&lt;/p&gt;

&lt;h4 id=&#34;前方高能预警-大量数学出没-请做好战斗准备:eec53d87b272616feb247dfa262869de&#34;&gt;前方高能预警，大量数学出没，请做好战斗准备&lt;/h4&gt;

&lt;p&gt;三次贝塞尔曲线公式&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/webanimation/cubicbezier.jpg&#34; alt=&#34;三次贝塞尔曲线公式&#34; /&gt;&lt;/p&gt;

&lt;p&gt;由于CSS的限制 P0为(0,0)，P3为(1,1)将其带入方程并展开，可以得到对x,y方向的两个方程&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/webanimation/equation1.jpg&#34; alt=&#34;x,y方向的两个方程&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们得到的是两个参数方程。要想得到y对x的二阶导数，需要下面的公式&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/webanimation/derivative.jpg&#34; alt=&#34;参数方程二阶导数公式&#34; /&gt;&lt;/p&gt;

&lt;p&gt;看不懂过程就不要在乎这些细节了，公式推导里有一步我应该曾经明白但我现在不明白。直接看结论，我们需要两个参数方程对t的一阶导数和二阶导数&lt;/p&gt;

&lt;p&gt;于是便有了下面的几个式子&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/webanimation/equation2.jpg&#34; alt=&#34;一阶导数和二阶导数&#34; /&gt;&lt;/p&gt;

&lt;p&gt;带入不明觉厉的公式，我们可以观察到，分母最高次项是六次，而分子最高次项是三次，要使结果为一个常数，六次项的系数要为零&lt;/p&gt;

&lt;p&gt;于是我们得到了第一个公式&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/webanimation/equation3.jpg&#34; alt=&#34;第一个公式&#34; /&gt;&lt;/p&gt;

&lt;p&gt;将第一个公式带入二阶导数中，我们会发现分母最高次项为3，分子最高此项为2，和上面类似的思路，我们可以得到第二个公式&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/webanimation/equation4.jpg&#34; alt=&#34;第二个公式&#34; /&gt;&lt;/p&gt;

&lt;p&gt;两个方程联立我们可以解得&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/webanimation/equation5.jpg&#34; alt=&#34;第一个结论&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这样分母就是一个常数了，分子还有一个一次项，所以&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/webanimation/equation6.jpg&#34; alt=&#34;第二个结论&#34; /&gt;&lt;/p&gt;

&lt;p&gt;同时&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/webanimation/equation7.jpg&#34; alt=&#34;第三个结论&#34; /&gt;&lt;/p&gt;

&lt;p&gt;注意到&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/webanimation/conclusion.jpg&#34; alt=&#34;第四个结论&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>理解CSS3中width新的几个关键字成员</title>
      <link>http://jiangshanmeta.github.io/post/css3width/</link>
      <pubDate>Mon, 30 May 2016 21:39:46 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/css3width/</guid>
      <description>

&lt;p&gt;最近看了&lt;a href=&#34;http://www.zhangxinxu.com/wordpress/2016/05/css3-width-max-contnet-min-content-fit-content/&#34;&gt;张鑫旭大神的一片文章&lt;/a&gt;,介绍了&lt;code&gt;width&lt;/code&gt;属性的几个关键字成员：&lt;code&gt;fill-available&lt;/code&gt;、&lt;code&gt;max-content&lt;/code&gt;、&lt;code&gt;min-content&lt;/code&gt;、&lt;code&gt;fit-content&lt;/code&gt;。如果有不熟悉基本概念的链接都有了自己点过去看。他的那篇文章偏重于概念介绍，我想介绍一些细节以及应用&lt;/p&gt;

&lt;h2 id=&#34;fill-available:3de20cc74c1f43aee615802a184084e5&#34;&gt;fill-available&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.fill-available{
	width:fill-available;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个关键字使得盒子尽可能填充满剩余空间，听起来很像是&lt;code&gt;width:100%;&lt;/code&gt;。那么直接用&lt;code&gt;width:100%;&lt;/code&gt;行吗,至少没有兼容问题啊？&lt;/p&gt;

&lt;p&gt;其实是分情况的。如果对这个盒子设置了&lt;code&gt;box-sizing:border-box&lt;/code&gt;,那真的无所谓，用什么都行。但是默认的&lt;code&gt;box-sizing&lt;/code&gt;是*content-box*在这种情况下如果有margin padding border的，此时使用&lt;code&gt;width:100%&lt;/code&gt;就会面临超出父盒子的问题，但是&lt;code&gt;width:fill-available&lt;/code&gt;就没有这个问题。&lt;/p&gt;

&lt;p&gt;//像我们这种基于bootstrap改改用的，已经有了&lt;code&gt;*{box-sizing:border-box;}&lt;/code&gt;，所以好像没什么用。&lt;/p&gt;

&lt;h2 id=&#34;max-content:3de20cc74c1f43aee615802a184084e5&#34;&gt;max-content&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;max-content的行为表现可以这么理解，假设我们的容器有足够的宽度，足够的空间，此时，所占据的宽度是就是max-content所表示的尺寸。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;说实话至今我没想起来这个能用来干什么。如果内容很长，会出现横向滚动条，对于web横向滚动条并不是什么好的设计。如果内容并不多，它的表现和下面的fit-content是一致的。真·找不到应用场景。&lt;/p&gt;

&lt;h2 id=&#34;min-content:3de20cc74c1f43aee615802a184084e5&#34;&gt;min-content&lt;/h2&gt;

&lt;p&gt;这个就比较有意思了，我们可以用来自适应内部元素。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div style=&amp;quot;&amp;quot; class=&amp;quot;responsive-wrap&amp;quot;&amp;gt;
	&amp;lt;img src=&amp;quot;http://jiangshanmeta.github.io/demo/myWork/csssecrets/2.jpg&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以往常见的图片展示效果是规定外层div的大小，然后图片大小跟着外层div来。bootstrap里的一个实现是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;img-responsive{
	display: block;
	max-width: 100%;
	height: auto;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果我偏要父元素的宽度跟着子元素走，以往我可能会这么做：给外层div加个&lt;code&gt;display:table;&lt;/code&gt;利用其尺寸收缩的特性。有点hack的味道在这里。而且这么做健壮性不够，如果我想给图片下面加上几行描述，尤其是字数要长长长，这时候&lt;code&gt;display:table;&lt;/code&gt;的效果，&lt;a href=&#34;http://jiangshanmeta.github.io/blogdemo/css3width/table.html&#34;&gt;点开自己看&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;如果把div的width设为min-content,就能在长描述的存在下，依然做到父元素大小跟着图片大小走。结果请点击上面链接&lt;/p&gt;

&lt;h2 id=&#34;fit-content:3de20cc74c1f43aee615802a184084e5&#34;&gt;fit-content&lt;/h2&gt;

&lt;p&gt;这个属性的性质和上面说的&lt;code&gt;display:table;&lt;/code&gt;最终表现可以说一模一样。我没找到区别。&lt;/p&gt;

&lt;h2 id=&#34;结束语:3de20cc74c1f43aee615802a184084e5&#34;&gt;结束语&lt;/h2&gt;

&lt;p&gt;好像也就min-content用处多点，其他的我还在想能做什么特别而且能用到的事情&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>结构与样式相分离之CSS图形</title>
      <link>http://jiangshanmeta.github.io/post/cssshape/</link>
      <pubDate>Sun, 29 May 2016 18:19:27 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/cssshape/</guid>
      <description>&lt;p&gt;做前端的应该都听说过“结构与样式相分离”这一句话。最简单的理解是HTML负责结构，CSS负责样式。然而，自己在实际项目中并没有很好地应用这句话，经常为了实现某个特殊样式加上一堆div。&lt;/p&gt;

&lt;p&gt;比如说之前实现的一个效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/cssshape1.png&#34; alt=&#34;彩色的边框&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当时实现这个效果的基本思路是用border画出外面的环，由于角度问题，所以还要加上一个transform转45deg，这样边框就画出来了，但是内部的人物头像也随着父元素，所以也要加上一个transform抵消父元素转动的影响。&lt;/p&gt;

&lt;p&gt;这样虽然实现了，但是总感觉不够优雅，加的额外的HTML和CSS略多，而仅仅是为了实现一个环。&lt;/p&gt;

&lt;p&gt;再次安利一下我最近看的书&lt;strong&gt;CSS Secrets&lt;/strong&gt;，这本书还没看完，但是给我不少启发。之前写过一篇&lt;a href=&#34;http://jiangshanmeta.github.io/post/pseudo/&#34;&gt;小的总结&lt;/a&gt;，谈到了伪元素的一些应用。我想，用伪元素做一些装饰性的工作，可以减少冗余的div和CSS，增强重用性。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;div class=&amp;quot;img-outer-circle&amp;quot;&amp;gt;
	&amp;lt;img src=&amp;quot;&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.img-outer-circle{
	position:relative;
	width:135px;
	height:135px;
}
.img-outer-circle::before{
	content:&#39;&#39;;
	position:absolute;
	top:-10px;
	left:-10px;
	right:-10px;
	bottom:-10px;
	border-radius:50%;
	border-width:5px;
	border-style:solid;
	border-color:#3d8ceb #3d8ceb #f1cb2f #f1cb2f ;
	-webkit-transform:rotate(-45deg);
	transform:rotate(-45deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说实话，HTML还是以前的，因为像是&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;这样的自闭合标签没有伪元素这一说法，不能直接加在图片上。CSS上实现边框的思路还是和以前一样，但是因为不是对整个div进行transform，所以不用对图片再进行处理了。目前看不出来什么特别的优势。但是试想如果来了需求，说要给图片加个出场动画，如果用animation实现的话，免不了各种transform，transform各种影响，免不了出些奇奇怪怪的bug。//不要问我怎么知道的&lt;/p&gt;

&lt;p&gt;这里提一句，本来是想用&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;的伪元素写一个边框的，但是没能实现，上面的理由说的太简单了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/21296044&#34;&gt;知乎上有个相关问题&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-&amp;lt;img&amp;gt;```也不是完全不能应用伪元素，比如[利用伪元素美化加载失败的图片](http://web.jobbole.com/86079/)&#34;&gt;

伪元素能做的装饰性的东西其实很多，上面是伪元素结合border做了一个彩色的边框，其实还可以做一些三角形、菱形、梯形之类的。三角形和菱形就不说了，简单说一下梯形。

在**CSS Secrets**这本书中，作者采用的方法伪元素+transform3d，伪元素的方案我是赞同的，但是transform3d一方面有些兼容性问题，另一方面3d效果理解起来比较困难，尤其是结合transform-origin的3d效果。于是，我决定用border一条路走到黑。

因为border经常用来实现各种图形，我[结合Vue实现了一个查看border能做什么的demo](http://jiangshanmeta.github.io/demo/myWork/org/vue/v_box.html)，想象力再丰富也比不上直接拖拖拽拽看效果来的快。

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.tab{
    position:relative;
    display:inline-block;
    padding-right:8px;
    padding-left:8px;
    margin-right:25px;
    text-align:center;
}&lt;/p&gt;

&lt;p&gt;.tab::before{
    z-index:-1;
    content:&amp;ldquo;;
    position:absolute;
    top:0;
    left:-10px;
    right:-10px;
    bottom:0;
    width:100%;
    height:0;
    border-style:solid;
    border-width:0 10px 18px 10px;
    border-color:transparent transparent yellowgreen transparent;
}
```&lt;/p&gt;

&lt;p&gt;这样也可以实现梯形标签。其实如果浏览器支持嵌套伪元素这个问题就更好解决了。不知道那时候那群玩one div的会搞出什么来。&lt;/p&gt;

&lt;p&gt;先写到这里吧，以后在实践中如果有用到的再补充。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>居中的常见实现</title>
      <link>http://jiangshanmeta.github.io/post/center/</link>
      <pubDate>Mon, 16 May 2016 21:26:45 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/center/</guid>
      <description>

&lt;p&gt;约定HTML结构&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;div &amp;gt;
	&amp;lt;img src=&amp;quot;&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-水平居中:903435e3d66e261bf87738ad6f965a5c&#34;&gt;1.水平居中&lt;/h2&gt;

&lt;p&gt;实现水平居中其实并不难，而且有多个可靠地方案可以使用。&lt;/p&gt;

&lt;h4 id=&#34;margin方案:903435e3d66e261bf87738ad6f965a5c&#34;&gt;margin方案&lt;/h4&gt;

&lt;p&gt;用过bootstrap的人会很熟悉这么一个类名&lt;code&gt;.center-block&lt;/code&gt;，这是实现居中的一个类名，具体实现是这样的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.center-block{
	display:block;
	margin-left:auto;
	margin-right:auto;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这应该是学习页面布局最基本的水平居中方案了，也没什么额外操作&lt;/p&gt;

&lt;h4 id=&#34;绝对定位方案:903435e3d66e261bf87738ad6f965a5c&#34;&gt;绝对定位方案&lt;/h4&gt;

&lt;p&gt;基本实现是这样的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.center-x-ab{
	position:absolute;
	left:50%;
	transform:translateX(-50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;主要是应用了translate如果值为百分比，则参考于自身。如果为了水平居中而这么做就有点折腾了，然而这一方案可以扩展到垂直居中和水平垂直都居中。这样做的缺点是父元素需要处理子元素绝对定位带来的问题。在实践中，制作h5页面慎用这种方法居中，因为h5页面经常有动画，动画离不开transform,两者同时存在会看到很诡异的问题。&lt;/p&gt;

&lt;h4 id=&#34;文本居中方案:903435e3d66e261bf87738ad6f965a5c&#34;&gt;文本居中方案&lt;/h4&gt;

&lt;p&gt;需要将要居中元素的父元素设定&lt;code&gt;text-align:center;&lt;/code&gt;需要居中的元素的display要设定为&lt;code&gt;inline-block&lt;/code&gt;,需要处理文本居中带来的影响，这一方案感觉用的不多。&lt;/p&gt;

&lt;h4 id=&#34;flex方案:903435e3d66e261bf87738ad6f965a5c&#34;&gt;flex方案&lt;/h4&gt;

&lt;p&gt;1.你为什么不用margin方案的方案&lt;/p&gt;

&lt;p&gt;父元素div &lt;code&gt;display:flex&lt;/code&gt; 子元素img&lt;code&gt;margin-left:auto;margin-right:auto;&lt;/code&gt;我的评价见小标题&lt;/p&gt;

&lt;p&gt;2.感觉有点大材小用的方案&lt;/p&gt;

&lt;p&gt;父元素div &lt;code&gt;display:flex:justify-content:center;&lt;/code&gt;评价如小标题
&lt;a href=&#34;http://jiangshanmeta.github.io/demo/myWork/mobile/animation/animation_spin.html&#34;&gt;上个例子&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-垂直居中:903435e3d66e261bf87738ad6f965a5c&#34;&gt;2.垂直居中&lt;/h2&gt;

&lt;p&gt;相较于水平居中，垂直居中相比较而言就有点难度了&lt;/p&gt;

&lt;h4 id=&#34;单行文字垂直居中:903435e3d66e261bf87738ad6f965a5c&#34;&gt;单行文字垂直居中&lt;/h4&gt;

&lt;p&gt;在我刚开始学习写页面的时候，就听说过让&lt;strong&gt;line-height&lt;/strong&gt;和&lt;strong&gt;height&lt;/strong&gt;值相等即可使单行文字垂直居中，最开始只是从使用的角度看这个问题，没有深入思考过，后来&lt;a href=&#34;http://t.imooc.com/learn/403&#34;&gt;张鑫旭大神告诉我们&lt;/a&gt;，这只是伪垂直居中。从工程实践角度这已经够用了，不要在意这些细节&lt;/p&gt;

&lt;h4 id=&#34;绝对定位方案-1:903435e3d66e261bf87738ad6f965a5c&#34;&gt;绝对定位方案&lt;/h4&gt;

&lt;p&gt;在水平居中中提到可以使用绝对定位实现水平居中，同样也可以使用绝对定位实现垂直居中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.center-y-ab{
	position:absolute;
	left:50%;
	transform:translateY(-50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;虽然要处理绝对定位带来的后果，考虑到垂直居中方案并不多，这不失为一个好方案。&lt;/p&gt;

&lt;h4 id=&#34;table方案:903435e3d66e261bf87738ad6f965a5c&#34;&gt;table方案&lt;/h4&gt;

&lt;p&gt;请参阅&lt;a href=&#34;https://css-tricks.com/centering-in-the-unknown/&#34;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;flex方案-1:903435e3d66e261bf87738ad6f965a5c&#34;&gt;flex方案&lt;/h4&gt;

&lt;p&gt;父元素div &lt;code&gt;display:flex&lt;/code&gt; 子元素img&lt;code&gt;margin-top:auto;margin-right:bottom;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当然你也可以折腾flex的相关属性去，说的就是某些关于对其的属性。&lt;/p&gt;

&lt;h2 id=&#34;3-水平垂直都居中:903435e3d66e261bf87738ad6f965a5c&#34;&gt;3.水平垂直都居中&lt;/h2&gt;

&lt;h4 id=&#34;绝对定位方案-2:903435e3d66e261bf87738ad6f965a5c&#34;&gt;绝对定位方案&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;.center-xy-ab{
	position:absolute;
	top:50%;
	left:50%;
	transform:translate(-50%,-50%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有代码有真相，就是结合水平、垂直居中的绝对定位方案&lt;/p&gt;

&lt;h4 id=&#34;flex方案-2:903435e3d66e261bf87738ad6f965a5c&#34;&gt;flex方案&lt;/h4&gt;

&lt;p&gt;父元素&lt;code&gt;display:flex;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;子元素&lt;code&gt;margin:auto;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;也不用去折腾各种对齐的属性&lt;/p&gt;

&lt;h4 id=&#34;水平文本居中-垂直table-的大杂烩:903435e3d66e261bf87738ad6f965a5c&#34;&gt;水平文本居中 + 垂直table 的大杂烩&lt;/h4&gt;

&lt;p&gt;如果真考虑兼容性的话，这似乎是兼容性最好的方案了
然而，需要多写一层标签&lt;/p&gt;

&lt;p&gt;水平垂直居中算是水平居中和垂直居中的综合使用，上个&lt;a href=&#34;http://jiangshanmeta.github.io/demo/myWork/layout/center.html&#34;&gt;demo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-基于视口的居中:903435e3d66e261bf87738ad6f965a5c&#34;&gt;4.基于视口的居中&lt;/h2&gt;

&lt;p&gt;常见的各种模态框基本上是相较于视口水平垂直居中的，其实我最早知道模态框的实现的时候它的居中是通过js计算得到的。作为 &lt;em&gt;能用CSS实现的就绝对不用js实现&lt;/em&gt; 神教教徒，这个需求肯定要尝试使用CSS解决。&lt;/p&gt;

&lt;h4 id=&#34;transform方案:903435e3d66e261bf87738ad6f965a5c&#34;&gt;transform方案&lt;/h4&gt;

&lt;p&gt;基本上是上边的绝对定位方案的翻版&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;position:fixed;
top:50%;
left:50%;
transform:translate(-50%,-50%);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相关&lt;a href=&#34;http://jiangshanmeta.github.io/demo/myWork/layout/center/center.css&#34;&gt;CSS下载&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>伪元素的应用总结</title>
      <link>http://jiangshanmeta.github.io/post/pseudo/</link>
      <pubDate>Mon, 16 May 2016 20:00:31 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/pseudo/</guid>
      <description>

&lt;dl&gt;
&lt;dt&gt;CSS中的伪元素CSS中经常能玩出花样的东西，它包括::first-letter、::first-line、::before、::after、::selection,作为强迫症晚期患者我觉得还应该出现::last-letter和::last-line，然而并没有，我很伤心。&lt;/dt&gt;
&lt;/dl&gt;

&lt;p&gt;::first-letter、::first-line、::selection通常是用来对文字进行装饰，比如::first-letter实现首字母下沉效果,::selection实现萌娘百科的黑幕效果，目前我还没发现这三个能玩出太大的花样。这里主要总结::before和::after两个伪元素的花样。一直在纠结如何整理这些东西，最后还是决定按照表现分类，毕竟CSS关系的是样式。&lt;/p&gt;

&lt;h2 id=&#34;clearfix:dc5e44b284002f2c33b84936afab53a1&#34;&gt;clearfix&lt;/h2&gt;

&lt;p&gt;写过几个网页的人就会知道clearfix，毕竟是布局相关的东西，实现起来有不少，经典的是&lt;code&gt;.clearfix::after{content:&#39;&#39;;display:table;clear:both;}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;字体图标:dc5e44b284002f2c33b84936afab53a1&#34;&gt;字体图标&lt;/h2&gt;

&lt;p&gt;网页上的小图标是很常见的设计，通常的实现方案有图片和字体图标两种，作为并不喜欢切图的我显然更倾向于使用字体图标这种方式。目前用过的字体图标有&lt;a href=&#34;http://v3.bootcss.com/components/#glyphicons-glyphs&#34;&gt;bootstrap&lt;/a&gt;里面自带的，还有&lt;a href=&#34;http://fontawesome.dashgame.com/&#34;&gt;font-awesome&lt;/a&gt;两个，基本能满足需求，如果不能满足请说服美术。&lt;/p&gt;

&lt;h2 id=&#34;一条线:dc5e44b284002f2c33b84936afab53a1&#34;&gt;一条线&lt;/h2&gt;

&lt;p&gt;为了一条线写一个标签通常来说是很不划算的，除非你很爱敲键盘。
&lt;a href=&#34;http://jiangshanmeta.github.io/demo/myWork/mobile/cateList/cateList.html&#34;&gt;我之前写的一个分类列表&lt;/a&gt;这里结合使用了:checked伪类和::after伪元素，实现了无JS的tab切换效果。&lt;/p&gt;

&lt;p&gt;之前也见过在tab切换中，使用::after伪元素画一条线表示当前tab的。&lt;/p&gt;

&lt;p&gt;在bootstrap里的面包屑导航里，也采用了::before伪元素做一条分割线。&lt;/p&gt;

&lt;p&gt;还有见过走马灯效果里，用::after做分割的。然而最近没怎么见过走马灯效果了，这个设计目测已经过气了。&lt;/p&gt;

&lt;h2 id=&#34;背景图形:dc5e44b284002f2c33b84936afab53a1&#34;&gt;背景图形&lt;/h2&gt;

&lt;h4 id=&#34;模拟多背景-实现多重边框:dc5e44b284002f2c33b84936afab53a1&#34;&gt;模拟多背景、实现多重边框&lt;/h4&gt;

&lt;p&gt;在多背景支持性还不够好的时候，就有人试图用&lt;a href=&#34;http://nicolasgallagher.com/multiple-backgrounds-and-borders-with-css2/&#34;&gt;::before和::after来实现多背景&lt;/a&gt;。这项技术其实已经有点老了，然而其中提到的&lt;strong&gt;用伪元素实现多边框&lt;/strong&gt;依然具有实战意义。&lt;/p&gt;

&lt;h4 id=&#34;阴影效果:dc5e44b284002f2c33b84936afab53a1&#34;&gt;阴影效果&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://t.imooc.com/learn/240&#34;&gt;CSS3实现“图片阴影”效果&lt;/a&gt;,给慕课网打个广告吧。如果对阴影效果扩展一下，就可以模拟弹出层的背景。&lt;/p&gt;

&lt;h4 id=&#34;边框内圆角:dc5e44b284002f2c33b84936afab53a1&#34;&gt;边框内圆角&lt;/h4&gt;

&lt;p&gt;这一效果是在*CSS Secrets*一书中看到的，基本原理是border-radius+定位+z-index。&lt;/p&gt;

&lt;h4 id=&#34;各种图形:dc5e44b284002f2c33b84936afab53a1&#34;&gt;各种图形&lt;/h4&gt;

&lt;p&gt;之前的日志中，我利用::before实现了&lt;a href=&#34;http://jiangshanmeta.github.io/post/autosquare/&#34;&gt;自适应的正方形&lt;/a&gt;,同时这一原理也可以用来实现长宽比一定的矩形。&lt;/p&gt;

&lt;p&gt;伪元素实现三角形早就成为前端的必备技能了，不细说了。&lt;/p&gt;

&lt;p&gt;在三角形的基础上也能实现其他的图形，&lt;em&gt;CSS Secrets&lt;/em&gt; 一书中提到了如何使用伪元素实现平行四边形和菱形，主要利用了transform+绝对定位。&lt;/p&gt;

&lt;p&gt;更多的图形可以参见 &lt;a href=&#34;https://css-tricks.com/examples/ShapesOfCSS/&#34;&gt;css tricks&lt;/a&gt;,然而我觉得很多只是做着玩而不能在生产环境下使用。&lt;/p&gt;

&lt;h4 id=&#34;结合filter实现毛玻璃效果:dc5e44b284002f2c33b84936afab53a1&#34;&gt;结合filter实现毛玻璃效果&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://dabblet.com/gist/d9f243ddd7dbffa341a4&#34;&gt;局部毛玻璃模糊效果的实现&lt;/a&gt;，从&lt;strong&gt;CSS Secrets&lt;/strong&gt;中看到的&lt;/p&gt;

&lt;h2 id=&#34;扩大响应区域:dc5e44b284002f2c33b84936afab53a1&#34;&gt;扩大响应区域&lt;/h2&gt;

&lt;p&gt;其实这也不算是样式了，已经是交互部分了。伪元素结合定位就可以扩展原来元素的相应区域，结合:hover伪类应该能做出一些东西，目前没见过眼前一亮的例子&lt;/p&gt;

&lt;h2 id=&#34;模拟float-center:dc5e44b284002f2c33b84936afab53a1&#34;&gt;模拟float:center&lt;/h2&gt;

&lt;p&gt;浮动其实是没有center这一值的，但是一个居中的文字环绕效果确实挺漂亮。别人的&lt;a href=&#34;https://css-tricks.com/float-center/&#34;&gt;demo&lt;/a&gt;,使用具有一定宽度和高度的伪元素浮动占据位置，再用绝对定位把图片定位到伪元素占据的地方。这个效果我觉得很有创意。&lt;/p&gt;

&lt;p&gt;伪元素能做的东西很多，然而自己接触的还比较少，上面所说的就是我目前所见到的。其实结合:hover伪类，:checked伪类，以及transition和animation，是可以做一些小东西出来的，至少可以取代一些用js才能写出来的效果。以后看到效果试着能否只是用CSS实现。&lt;/p&gt;

&lt;p&gt;update 2016/05/19
&lt;a href=&#34;http://jiangshanmeta.github.io/demo/myWork/dopant/cssclock/cssclock.html&#34;&gt;使用伪元素结合CSS3动画做的时钟&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;update 2016/05/29
&lt;a href=&#34;http://jiangshanmeta.github.io/post/cssshape/&#34;&gt;使用伪元素结合border实现彩色环和梯形&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>你真的会用CSS画写正方形吗？</title>
      <link>http://jiangshanmeta.github.io/post/autosquare/</link>
      <pubDate>Sat, 14 May 2016 11:26:46 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/autosquare/</guid>
      <description>

&lt;p&gt;用CSS写一个正方形，对于前端工作者来说是一个再常见不过的需求了，通常情况下，你可能会写出这样的代码：&lt;code&gt;width:200px;height:200px;&lt;/code&gt; 这是最简单的实现了，然而，如果我想要一个300px的正方形呢？或许你会写出如下代码：&lt;code&gt;width:300px;height:300px;&lt;/code&gt; 。那么，如果我想要一个400px的正方形呢？你可能会写出以下代码：&lt;code&gt;width:400px;height:400px;&lt;/code&gt; 同时开始准备和产品以及美术来一场大战。&lt;/p&gt;

&lt;p&gt;显然，一个爱敲键盘的程序员不是好程序员，想偷懒就要对上面的需求进行抽象，然后脑洞大开。上面的需求可以抽象为如何写一个自适应的正方形，这一点其实没什么问题。&lt;/p&gt;

&lt;h2 id=&#34;脑洞大开时间:e010fd746b92c0785d41a89ff0373934&#34;&gt;脑洞大开时间&lt;/h2&gt;

&lt;p&gt;CSS经常被一些大神认为不是一种编程语言，然而，我们可以假装CSS是一门编程语言，就像我可以假装自己有女朋友一样。好了，现在CSS是一门编程语言了，那它会有什么？ &lt;strong&gt;this&lt;/strong&gt;，&lt;strong&gt;this&lt;/strong&gt;，&lt;strong&gt;this&lt;/strong&gt;，一门编程语言没有this你还怎么面向对象编程。如果CSS有this的话，这里就可以这么写了&lt;code&gt;height:this.width&lt;/code&gt;,感觉上挺自然的，以后写CSS会不会要求OOP风格？&lt;/p&gt;

&lt;p&gt;然而，CSS并不支持this，所以脑洞时间结束了，回归现实世界吧&lt;/p&gt;

&lt;h2 id=&#34;回归正常前的瞎折腾阶段:e010fd746b92c0785d41a89ff0373934&#34;&gt;回归正常前的瞎折腾阶段&lt;/h2&gt;

&lt;p&gt;在CSS中，有一些相对单位，比如em，rem，vw，vh之类的，能否用这些做点尝试。&lt;/p&gt;

&lt;p&gt;比如，一个div，宽度是50vw，那么高度也是50vw就好了，算是一种自适应的正方形的实现方案吧。然而，宽高都要基于视口，稍微复杂点的场景就解决不了了，比如，这个div的宽度根本就不是根据视口来的你想怎么办。vw和vh的解决方案由于不够健壮而排出，em 、rem的实现也类似，宽度和高度都要写死 是多少rem/em，大家都有同样的问题，所以也排除了。&lt;/p&gt;

&lt;h2 id=&#34;咦-为什么一定要纠结于设定高度呢:e010fd746b92c0785d41a89ff0373934&#34;&gt;咦，为什么一定要纠结于设定高度呢？&lt;/h2&gt;

&lt;p&gt;对啊，需求是写一个自适应的正方形，谁说一定要在height上折腾，比如，可以用padding撑开这个盒子啊。这一要说一点知识性的东西了，padding值如果取值为百分比，则该百分比是相对于父元素的宽度进行计算的，比那个height的百分比不知道高到哪里去了（height的百分比是相较于父元素的高度的），所以以下代码就可以实现一个响应式的正方形&lt;code&gt;width:25%;padding-bottom:25%;&lt;/code&gt;然而还不够优雅，还是要针对不同的场景写不同的padding-bottom。&lt;/p&gt;

&lt;p&gt;给大家安利一本我最近在看的书 &lt;strong&gt;CSS Secrets&lt;/strong&gt;，其中讲到伪元素能做很多事情。那这里伪元素能做什么呢？伪元素如果是块级元素，其宽度就是父元素宽度（不考虑padding和border），那么伪元素的padding如果为百分比，就是参考于我们正在处理的这个盒子，所以我们有了阶段性的成果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.auto-square::before{
	content:&#39;&#39;;
	display:block;
	padding-bottom:100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;于是一个自适应的正方形就这么写出来了&lt;/p&gt;

&lt;p&gt;于是，又有新的需求的，还要填内容啊！！&lt;/p&gt;

&lt;h2 id=&#34;在自适应的正方形里如何填内容呢:e010fd746b92c0785d41a89ff0373934&#34;&gt;在自适应的正方形里如何填内容呢？&lt;/h2&gt;

&lt;p&gt;如果按照正常的流填什么内容都会破坏正方形的结构，所以我的解决方案是对内容进行绝对定位定位到正方形里。相应的，CSS代码也要加点东西&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.auto-square{
	position:relative;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;实战:e010fd746b92c0785d41a89ff0373934&#34;&gt;实战&lt;/h2&gt;

&lt;p&gt;朋友圈里经常有人发个九连拍，每张图所在的盒子就是一个正方形。然而，朋友圈的图片是正方形缩略图，在自己的项目中还要拜托后端处理出一张缩略图来。想想自己也要写后端就觉得干脆用原图然后居中显示得了。&lt;/p&gt;

&lt;p&gt;下面是核心代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.auto-square{
	position:relative;
}
.auto-square::before{
	content:&#39;&#39;;
	display:block;
	padding-bottom:100%;
}
.center-ab{
	position:absolute;
	top:50%;
	left:50%;
	-webkit-transform:translate(-50%,-50%);
	-moz-transform:translate(-50%,-50%);
	-ms-transform:translate(-50%,-50%);
	-o-transform:translate(-50%,-50%);
	transform:translate(-50%,-50%);
}
.img-responsive{
	display:block;
	max-width:100%;
	max-height:100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以及一个&lt;a href=&#34;http://jiangshanmeta.github.io/demo/myWork/layout/auto-square.html&#34;&gt;简单地实例&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;update 2016/5/16
想起来这一方法不仅仅能够实现正方形，也能实现长宽比一定的矩形&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>两列布局常见方法</title>
      <link>http://jiangshanmeta.github.io/post/twocolumn/</link>
      <pubDate>Thu, 12 May 2016 20:10:08 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/twocolumn/</guid>
      <description>

&lt;p&gt;画页面最开始要想好的就是如何进行布局。两列布局既是一种常见的布局方式，又是多列布局的基础。本文就我所熟悉的两列布局方式进行总结和比较。&lt;/p&gt;

&lt;h2 id=&#34;浮动布局:5a257f88feea4060d9c6a1cf42573807&#34;&gt;浮动布局&lt;/h2&gt;

&lt;p&gt;浮动最初是为文字环绕功能而设计的，然而现在成了基本的布局方式。&lt;/p&gt;

&lt;p&gt;熟悉bootstrap的人都知道，其经典的12列网格设计就是基于浮动所实现的。bootstrap的网格主要的知识点就是浮动+ &lt;code&gt;box-sizing:border-box&lt;/code&gt; + 媒体查询&lt;/p&gt;

&lt;p&gt;浮动所带来的问题是盒子的塌陷，bootstrap的网格布局解决方案是采取百分比进行限制。这样实现的是两列自适应布局，然而，要实现一列定宽一列自适应就比较困难了，所幸CSS支持计算，可以利用&lt;code&gt;calc&lt;/code&gt; 实现两列一列定宽一列自适应的两列布局&lt;/p&gt;

&lt;p&gt;bootstrap采用的是两列均左浮动实现两列布局，那么一列左浮动可不可以？当然可以。只要给右侧足够的&lt;code&gt;margin-left&lt;/code&gt;就行了。知乎首页人和问题的两列布局就是采用的这种布局方式。这种布局方式有什么问题呢？一是&lt;code&gt;margin-left&lt;/code&gt;值是要写死在代码里的，这一点其实还好，因为基本上大的布局不会变，所以基本上不会改。二是如果右侧有清除浮动的元素，会影响布局。当然对于知乎来说不存在这个问题，毕竟只是文字和图片。&lt;/p&gt;

&lt;p&gt;有什么方法解决上面说的第二个问题呢？对第二个列加上一行&lt;code&gt;overflow:hidden;&lt;/code&gt;就好了。原理是形成BFC然后自己就玩自己的去了。&lt;/p&gt;

&lt;h2 id=&#34;column:5a257f88feea4060d9c6a1cf42573807&#34;&gt;column&lt;/h2&gt;

&lt;p&gt;coolumn的出现是为了模仿报纸的排版的，如果想要实现文字的两列或者多列布局，应用column布局很轻松，然而，不幸的是，如果想要使用column布局的话，我建议还是放弃这个想法吧，一方面各大浏览器对其支持还不够，需要加私有前缀，另一方面其显示有些问题，具体可见&lt;a href=&#34;http://jiangshanmeta.github.io/demo/myWork/pic/waterfall/waterfall_CSS.html&#34;&gt;column实现的瀑布流效果&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;table:5a257f88feea4060d9c6a1cf42573807&#34;&gt;table&lt;/h2&gt;

&lt;p&gt;这里的table指的可不是HTML中的table，而是&lt;code&gt;display:table;&lt;/code&gt;利用table布局很容易实现两列布局，而且还能顺便实现等高布局。关于table的各种坑，我以后后做一个总结&lt;/p&gt;

&lt;h2 id=&#34;flex:5a257f88feea4060d9c6a1cf42573807&#34;&gt;flex&lt;/h2&gt;

&lt;p&gt;flex确实是布局神器，然而在生产环境下还是注意一下的好，移动端的情况稍微好点，然而在pc端IE10才支持，至少在pc端有替代方案的就用替代方案吧&lt;/p&gt;

&lt;h2 id=&#34;inline-block:5a257f88feea4060d9c6a1cf42573807&#34;&gt;inline-block&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;display:inline-block;&lt;/code&gt;确实是可以实现两列布局，如果两列宽度加起来不够父元素的宽度，那还好说，如果你想两个元素宽度均为50%,你很有可能会发现并没有实现。原因是两列之间有空格，两个50%加上一个空格显然超过100%。解决方案可以是通过那双灵巧的手，写HTML的时候注意空格，然而对于这种缩进会被不经意间手抖改掉，所以你还要写三遍注释告诉别人和自己不要手抖。这么干的人实在是太无聊了。靠谱点的解决方案是设定父元素&lt;code&gt;font-size:0;&lt;/code&gt;，然后两列字体大小该多少是多少，是个靠谱的解决方案。&lt;/p&gt;

&lt;p&gt;总结起来我个人倾向于各种基于浮动的方案。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>