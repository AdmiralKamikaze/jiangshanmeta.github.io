<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Html5 on jsmeta</title>
    <link>http://jiangshanmeta.github.io/categories/html5/</link>
    <description>Recent content in Html5 on jsmeta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Jul 2016 23:45:02 +0800</lastBuildDate>
    <atom:link href="http://jiangshanmeta.github.io/categories/html5/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>本地存储的一些比较</title>
      <link>http://jiangshanmeta.github.io/post/blog/storage/</link>
      <pubDate>Sat, 09 Jul 2016 23:45:02 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/blog/storage/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://jiangshanmeta.github.io/post/blog/ebussiness/&#34;&gt;最近的项目中使用了localStorage实现了本地购物车&lt;/a&gt;，借着这个机会总结一下各种本地存储。还有，发现以往过于关注API层面的东西了，反而对API是为了解决什么忽视了。&lt;/p&gt;

&lt;h2 id=&#34;cookie:5fe4e2fe3590b5bd8669d1961910a370&#34;&gt;cookie&lt;/h2&gt;

&lt;p&gt;cookie应该是最早的本地存储，本来今天不想谈API的东西，但是cookie的api设计的简直反人类。&lt;/p&gt;

&lt;p&gt;cookie的一个很重要的应用是用来判断用户是谁（登录功能）。因为http是无状态协议，无法根据之前的状态进行本次的请求处理。在登录成功后后端返回的报文中会设定包含用户登录信息的cookie，以后请求的时候会在请求头信息中包含cookie。&lt;/p&gt;

&lt;p&gt;cookie在每次http请求中都是默认自带的，这点有好处也有坏处。好处是不用手动把cookie信息写入报文，并且一般后端语言也会默认支持对cookie的读取，比如php的&lt;code&gt;$_COOKIE&lt;/code&gt;，坏处是不管用不用得到都会一股脑传过去，虽然对于现在的网络环境而言这并不是什么太大的问题。cookie还有一个缺点是大小限制为4k，复杂点的web应用应该就不够用了。&lt;/p&gt;

&lt;p&gt;最近在看http相关的东西，发现还有个&lt;code&gt;httponly&lt;/code&gt;属性，我觉得挺好的，以前是以一个纯前端的角度去看cookie，因为js无法控制&lt;code&gt;httponly&lt;/code&gt;的cookie，所以没见过有人提。这个属性很好的提升了cookie的安全性。&lt;/p&gt;

&lt;h2 id=&#34;localstorage:5fe4e2fe3590b5bd8669d1961910a370&#34;&gt;localStorage&lt;/h2&gt;

&lt;p&gt;最近的项目中是要做一个购物车，因而使用了localStorage，相比较于cookie，它的存储空间更大，并且没有过期时间的概念，也就是说除非手动删除它会一直保存。&lt;/p&gt;

&lt;p&gt;和cookie还有一点不同就是需要自己手动向后端提交localStorage的内容，服务器端无法直接访问localStorage。确实可以减少网络传输。。毕竟设计的最大存储比cookie大多了，要是和cookie似的自动写到报文里每次请求估计最大的内容就是localStorage了吧。&lt;/p&gt;

&lt;p&gt;对于我的购物车功能，我觉得写得最折腾的就是同步本地数据和线上数据，每一次增删查改之后都要拿一份线上数据处理后然后返回给前端，前端再更新页面和更新localStorage。&lt;/p&gt;

&lt;h2 id=&#34;sessionstorage:5fe4e2fe3590b5bd8669d1961910a370&#34;&gt;sessionStorage&lt;/h2&gt;

&lt;p&gt;这是为了会话控制而存在的，看起来和localStorage很像但是生命周期短得多，如果关了网页重开就没了，开一个新的tab也不会有当前的sessionStorage。&lt;/p&gt;

&lt;h2 id=&#34;indexeddb:5fe4e2fe3590b5bd8669d1961910a370&#34;&gt;indexedDB&lt;/h2&gt;

&lt;p&gt;？？这货出现是为了解决啥？没想明白，难道是出来自high的？？&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>