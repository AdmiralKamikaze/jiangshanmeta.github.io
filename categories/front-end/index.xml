<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Front End on jsmeta</title>
    <link>http://jiangshanmeta.github.io/categories/front-end/</link>
    <description>Recent content in Front End on jsmeta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 May 2016 21:49:52 +0800</lastBuildDate>
    <atom:link href="http://jiangshanmeta.github.io/categories/front-end/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>前端需要知道的WEB知识（1）</title>
      <link>http://jiangshanmeta.github.io/post/browser1/</link>
      <pubDate>Mon, 23 May 2016 21:49:52 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/browser1/</guid>
      <description>&lt;p&gt;之前无意间触发了一个bug，让我开始接触浏览器相关的知识。搞web开发的如果不了解浏览器的基本知识，不了解一个网页是如何形成的，以及如何展示的，基本上也就到天花板了。&lt;/p&gt;

&lt;p&gt;今天并不想从发起一个http请求开始讲起，战线会拉的太长。就从web服务器返回页面开始讲起吧。&lt;/p&gt;

&lt;p&gt;浏览器接收到服务器返回的HTML，开始按顺序进行解析，先是head部分，再是body部分。&lt;/p&gt;

&lt;p&gt;在head部分，可能会遇到&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 或者 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;,会发起相应的http请求对应的文件，在相应的文件下载之后，渲染才会继续进行，在这一段期间浏览器的状态是一片白。一些常见的web优化就是根据这个原因进行的。比如对CSS文件和JS文件进行压缩，这样可以减少请求文件的体积，从而减少传输时间。又比如CSS文件或者JS文件该合并的进行合并，这样可以减少http请求，而http请求会带来额外的开销。还有是一些js文件从head中移除，放到body中，这样可以先让用户看点东西，不至于一片白然后一怒之下关网页。&lt;/p&gt;

&lt;p&gt;然后就是解析body进行渲染了。这里我想借助一幅图说明&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/browser.png&#34; alt=&#34;浏览器渲染原理&#34; /&gt;&lt;/p&gt;

&lt;p&gt;简单来说就是HTML解析器生成DOM，CSS解析器生成CSSOM，然后层叠，布局绘制，最终展示成为我们所看到的页面。&lt;/p&gt;

&lt;p&gt;再上张图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/browser2.png&#34; alt=&#34;浏览器渲染原理&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其中大部分的工作对于web开发者来说都是不可控的，只有控制DOM和并不好用的样式操作对web开发者是可控的，其余的都是只能按照规则来。然而&lt;a href=&#34;https://zhuanlan.zhihu.com/p/20939640&#34;&gt;知乎上有篇文章指出这一现状可能会被改善&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;虽然绘制的过程目前是无法控制只能看浏览器心情，有些基本概念还是要了解的。&lt;/p&gt;

&lt;p&gt;当DOM的变化影响了元素的几何属性，浏览器需要重新计算元素的几何属性，同样其他元素的几何属性和位置也会受到影响。浏览器会使渲染树的受到影响的部分失效，并重新构造渲染树。这个过程称为&lt;strong&gt;重排(reflow)&lt;/strong&gt;。完成重排后，浏览器会重新绘制受到影响的部分到屏幕中，这个过程称为&lt;strong&gt;重绘(repaint)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;显然，重排一定会导致重绘，重绘却不一定意味着重排。从前端性能优化的角度来看，我们需要尽可能减少重绘重排这样昂贵的操作。从CSS的角度上来讲，似乎能做的不多，我能想到的是利用&lt;code&gt;outline&lt;/code&gt;或者&lt;code&gt;box-shadow&lt;/code&gt;这样不影响元素几何属性的属性模拟一些几何属性，比如边框，不能减少重绘但是能减少重排。可能说的不太明白，还是上代码吧。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.box{
	width:300px;
	margin-left:20px;
}
.box:hover{
	border:1px solid #ccc;
	margin-left:19px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以将CSS优化成&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.box{
	width:300px;
	margin-left:20px;
}
.box:hover{
	outline:1px solid #ccc;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在js部分减少重绘重排能做的就比较多了。&lt;/p&gt;

&lt;p&gt;1.缓存布局信息，减少对布局信息的请求。可能会有人问了，难道对布局信息请求会强制重绘？我想引用*高性能JavaScript*中的一段话回答&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;由于每次重排都会产生计算消耗，大多数浏览器通过队列化修改并批量执行来优化重排过程。然而，你可能会（经常不知不觉）强制刷新队列并要求计划任务立即执行。获取布局信息的操作会导致队列刷新。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2.批量处理样式操作。利用cssText属性可以合并一些操作。如果可以通过添加类名改变样式的话尽可能控制类名而不是具体的style。&lt;/p&gt;

&lt;p&gt;3.利用documentFragment优化。这个我现在用的不多。&lt;/p&gt;

&lt;p&gt;4.还有搞前端最喜欢玩的，能用CSS实现的就不要用JS。不细说，自己体会。&lt;/p&gt;

&lt;p&gt;从浏览器的重绘重排扯到了前端性能优化，我觉得还是扯回来吧&lt;/p&gt;

&lt;p&gt;在&lt;a href=&#34;http://jiangshanmeta.github.io/post/browser/&#34;&gt;上篇文章&lt;/a&gt;中，我提到了线程问题。当时找的资料有点杂，我觉得还是引用一些书籍上的话加深理解吧&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;大多数浏览器让一个单线程共用于执行javascript和更新用户界面。每个时刻只能执行其中一种操作，这意味着当javascript代码正在执行时用户界面无法相应输入，反之亦然。当javascri代码执行时，用户界面处于“锁定”状态。&lt;/p&gt;

&lt;p&gt;用于执行javascript和更新用户界面的进程通常被称为“浏览器UI线程”。UI线程的工作基于一个简单的队列系统，任务会被保存到队列中直到进程空闲。一旦空闲，队列中的下一个任务就被重新提出来并运行。这些任务要么是运行javascript代码，要么是执行UI更新，包括重绘和重排。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>一个bug引发的血案—浏览器基本渲染</title>
      <link>http://jiangshanmeta.github.io/post/browser/</link>
      <pubDate>Sun, 22 May 2016 17:05:41 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/browser/</guid>
      <description>&lt;p&gt;作为全知乎写bug水平第0的人，最近我又写了一个bug。&lt;/p&gt;

&lt;p&gt;当时的需求是这样的：用js和CSS3画一个时钟，能动的那种。很早很早之前，我用&lt;a href=&#34;http://jiangshanmeta.github.io/demo/myWork/canvas/canvasWatch.html&#34;&gt;canvas实现过这个需求&lt;/a&gt;,然而canvas毕竟需要各种写js，而且实现上也需要大量的计算，于是我就想能不能用尽可能少的js结合CSS实现。&lt;/p&gt;

&lt;p&gt;于是开始分解问题，我想实现的时钟和本地时间相对应，无论如何都要把Date对象拿出来然后求出当前的时分秒，然后进行初始偏转，再利用web动画进行转动即可，三个指针虽然在实际生活上有联系，但是把这三个割裂开会降低复杂度。只要求出当时的秒数，然后画出秒针的动画，99%的工作就完成了，时针和分针的效果只需要复制粘贴就能解决。&lt;/p&gt;

&lt;p&gt;HTML是这样的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;div class=&amp;quot;clock-wrap&amp;quot; id=&amp;quot;clock-wrap&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;second&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSS&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.clock-wrap{
	width:300px;
	height:300px;
	border-radius:50%;
	background-color:#f1f1f1;
	position:relative;
}
.second{
	position:absolute;
	width:4px;
	height:40%;
	top:10%;
	left:calc(50% - 2px);
	transform-origin:bottom center;
	transition:all 60s linear;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在就出现了基本的时钟的样子了，剩下的就是写js了。然而，当时着急去洗澡，于是写下了bug。我试着回忆当时的思路，然而我觉得当时自己脑子里已经进了水。当时想的是根据当前时间算出初始偏离角度，写一条样式，然后根据初始偏移角度算出最终角度，写一条过渡后的样式，然后添加类名，利用类名触发过渡。代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function cssclock(wrapId){
	var time = new Date();
	var s = time.getSeconds();

	var sDOM = document.getElementById(&amp;quot;second&amp;quot;);
	var wrap = document.getElementById(wrapId);
	var style = document.createElement(&amp;quot;style&amp;quot;);
	var str = &amp;quot;&amp;quot;;
	str += &amp;quot;.second{transform:rotate(&amp;quot;+  6*s +&amp;quot;deg)}&amp;quot;;
	str += &amp;quot;.go .second{ transform:rotate(&amp;quot; + (6*s+360) + &amp;quot;deg)}&amp;quot;;
	style.innerHTML = str;
	document.head.appendChild(style);
	wrap.classList.add(&amp;quot;go&amp;quot;);
}
cssclock(&amp;quot;clockwrap&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显然是有bug的，按照这个思路实现根本不会有过渡效果，就算有也只是转一圈。转一圈很好理解，这是我脑子里进水了整个思路错了，然而为什么根本没有过渡呢？&lt;/p&gt;

&lt;p&gt;看控制台那里秒针样式秒针的转动的值直接是最终值，于是我便百思不得其解了。后来尝试着把最后一行给表的盒子加上类名去掉，然后在控制台手动给这个盒子加上类名，发现可以触发过渡。&lt;/p&gt;

&lt;p&gt;于是我就脑洞大开了，难道是要在添加样式表完成的回调里执行给盒子添加类名的操作，然而appendChild没有回调啊，那干脆加个定时器过一会再加类名好了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;setTimeout(function(){
 	document.getElementById(wrapId).classList.add(&amp;quot;go&amp;quot;);
},0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实践证明确实是可行的，然而诡异的事情又来了：当我把定时器的时间设为 &lt;strong&gt;0&lt;/strong&gt; 依然可以触发过渡，于是我就不明觉厉了。&lt;/p&gt;

&lt;p&gt;然后我想起来之前看到的&lt;a href=&#34;https://github.com/gomeplusFED/blog/blob/master/2016-04/do-you-really-understand-how-to-write-a-countdown-by-javascript.md&#34;&gt;关于定时器的文章&lt;/a&gt;,里面谈到了js的线程问题，于是我便顺着这条线索开始找。&lt;/p&gt;

&lt;p&gt;中间的曲折没什么意思，还是说结论吧。&lt;/p&gt;

&lt;p&gt;因为浏览器内部有多个线程，比如负责画页面的线程，比如处理js的线程。画页面的线程 GUI渲染线程大体上是以每秒60次的速度工作的，这就是定时器常见的 16.7ms （1000/60）的由来,然而，渲染线程和js引擎线程是互斥的，这是为什么呢？因为js很有可能对DOM操作，这期间免不了获取一些渲染上的属性，比如width之类的，如果两个一起工作，js获取的就可能不准，所以两者是互斥的。&lt;/p&gt;

&lt;p&gt;我上面的js代码里，将新的样式添加进去，我本来是期望秒针按照&lt;code&gt;.second&lt;/code&gt;类的样式进行渲染，然后给盒子加上&lt;code&gt;.go&lt;/code&gt;这一个类，触发过渡。但是按照上面的分析，直到js结束都没有进行页面的渲染，js结束后整个盒子已经加上了&lt;code&gt;.go&lt;/code&gt;类，渲染开始，因为已经存在&lt;code&gt;.go&lt;/code&gt;类了，渲染按照过渡结束的进行。&lt;/p&gt;

&lt;p&gt;那么我用的定时器是起到什么作用？定时器设定时间为0，并不是立即去做，而是在0ms之后加入到js的todo队列中，也就是说添加完样式表后，js暂时休息，之前本应该干活但因为js干活而休息的GUI渲染开始工作，进行初始偏移，js的队列里出现定时器中要运行的代码，进行添加类名操作，触发过渡。&lt;/p&gt;

&lt;p&gt;那有没什么办法在js里强制渲染一次再进行后续操作呢？有啊，比如说取一个宽度就能强制渲染一次，这是定时器方案的一个替代方案。这也是为什么用js做动画要缓存一些变量的原因，为了减少不必要的重绘重排。以前too young，too simple啊，还需要提高知识水平。&lt;/p&gt;

&lt;p&gt;语文不太好，引用别人的话总结一下&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一个浏览器至少实现三个常驻线程：JavaScript引擎线程，GUI渲染线程，浏览器事件触发线程。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;javascript引擎是基于事件驱动单线程执行的，JS引擎一直等待着任务队列中任务的到来，然后加以处理，浏览器无论什么时候都只有一个JS线程在运行JS程序。&lt;/li&gt;
&lt;li&gt;GUI渲染线程负责渲染浏览器界面，当界面需要重绘（repaint）或由于某种操作引发回流(reflow)时,该线程就会执行。但需要注意 GUI渲染线程与JS引擎是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。&lt;/li&gt;
&lt;li&gt;事件触发线程，当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。这些事件可来自JavaScript引擎当前执行的代码块如setTimeOut、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;扯了这么多也没有写到最开始的需求该如何实现，反正实现了，用了些最近学到的技巧，然而这个bug让我学到的更多，毕竟前端不仅仅是写写页面写写js，浏览器的工作原理也要理解一些的。&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>