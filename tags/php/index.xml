<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on jsmeta</title>
    <link>http://jiangshanmeta.github.io/tags/php/</link>
    <description>Recent content in Php on jsmeta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Dec 2016 20:54:19 +0800</lastBuildDate>
    <atom:link href="http://jiangshanmeta.github.io/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>浅谈我对静态使用场景的理解</title>
      <link>http://jiangshanmeta.github.io/post/php/static/</link>
      <pubDate>Tue, 27 Dec 2016 20:54:19 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/php/static/</guid>
      <description>

&lt;p&gt;静态属性和静态方法这两个概念大家都不陌生，然而在日常的开发中用的却比较少，结合最近的开发工作我想谈一谈我对这两个使用场景的理解。&lt;/p&gt;

&lt;h2 id=&#34;静态方法的使用场景:d0787c13b8a4561bb718106ef30e7fec&#34;&gt;静态方法的使用场景&lt;/h2&gt;

&lt;p&gt;首先是项目中的一个工具类。这个类收集了一些常用的工具函数，比如一些字符串处理函数、数组处理函数，本身各个方法之间没有什么逻辑关系，这个类更像是一个命名空间。其实这些方法我更倾向于按照面向过程的写法，写成一堆注册到全局的小函数。从逻辑上讲这里的每一个方法都不会影响实例的状态，所以均应该是静态方法，不过写成实例方法也没什么问题。&lt;/p&gt;

&lt;p&gt;然后是model层的一个方法，这个方法是我封装来处理mongoId的，它本身也只是一个工具函数，不影响实例状态，而且最开始我还把这个方法直接final掉了，我不认为子类需要重载这个方法，这个方法最终声明成了静态方法。&lt;/p&gt;

&lt;p&gt;对于静态方法和实例方法，我找到的资料一般认为性能上有些许差异，静态方法性能上更好一点点，其实可以认为没有差异。一般而言静态方法能做的实例方法都能做，然而实例方法能做的事情静态方法不一定能做(因为静态方法无法访问&lt;code&gt;$this&lt;/code&gt;，无法改变实例状态)。我一直在提及的一个词是&lt;strong&gt;改变实例状态&lt;/strong&gt;，这是我认为方法是否要加&lt;code&gt;static&lt;/code&gt;修饰词的一个分界线，如果这个方法可能会改变实例状态，那么一定是实例方法，否则可当做静态方法。静态方法的一个特征是不允许子类重载，一定程度上相当于加上了&lt;code&gt;final&lt;/code&gt;关键词(还是有不少差异的)，我举的第二个例子就是把一个final的工具方法改成了静态方法。&lt;/p&gt;

&lt;p&gt;静态方法和实例方法的应用场景上面已经总结了，下面介绍静态属性的应用场景。&lt;/p&gt;

&lt;h2 id=&#34;静态属性的应用场景:d0787c13b8a4561bb718106ef30e7fec&#34;&gt;静态属性的应用场景&lt;/h2&gt;

&lt;p&gt;首先是CI框架的conroller基类的一段代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class CI_Controller {
	private static $instance;
	public function __construct(){
		self::$instance =&amp;amp; $this;
	}
	public static function &amp;amp;get_instance(){
		return self::$instance;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;利用静态私有变量&lt;code&gt;$instance&lt;/code&gt;存储对象实例，然后通过静态方法&lt;code&gt;get_instance&lt;/code&gt;获取实例，用过CI的应该对这段代码比较熟悉。&lt;/p&gt;

&lt;p&gt;在这里静态变量存储了一个对象，基于类似的思路，我们可以&lt;a href=&#34;http://jiangshanmeta.github.io/post/php/single/&#34;&gt;实现单例模式&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;进一步扩展，静态变量不仅可以存储一个对象实例，也可以存储一组对象，下面就要自夸一段我自己写的代码了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class H_Model extends CI_Model{
	static private $_cache_models;
	public function __construct(){
		parent::__construct();
	}
	final protected function get_model($model){
		$_cache_name = strtolower($model);
		if(!isset(self::$_cache_models[$_cache_name]) || !(self::$_cache_models[$_cache_name] instanceof $model) ){
			self::$_cache_models[$_cache_name] = new $model;
		}
		return self::$_cache_models[$_cache_name];
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;静态变量&lt;code&gt;$_cache_models&lt;/code&gt;是配合方法&lt;code&gt;get_model&lt;/code&gt;使用的，这段代码之所以出现是因为将代码从controller封装到model层的过程中，不免会在model层内部实例化其他model，这里将实例化的model保存在静态变量中避免不必要的实例化。&lt;/p&gt;

&lt;p&gt;最后一段代码是用静态变量保存一组数组的，原理和上边保存一组对象差不多就不展示代码。最初是每个实例上都挂这么一个数组，当实例一多所占的内存就大了，后来我们改成用了一个global的变量存储这一组数组，然后每个对象对数组进行引用。但是从逻辑上不应该用global的元素保存，这些数组从属于类而不是全局，所以我改成了用静态存储。&lt;/p&gt;

&lt;p&gt;可以看到，静态属性在存储对象/数组上有着特别的优势，用得好可以实现性能的优化、实现一些特殊的功能。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>21天并不能精通CI</title>
      <link>http://jiangshanmeta.github.io/post/php/ci/</link>
      <pubDate>Sat, 05 Nov 2016 19:39:38 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/php/ci/</guid>
      <description>

&lt;p&gt;CI是一个MVC的php框架，平时使用的多了所以开始阅读其源码，在这里做个记录。&lt;/p&gt;

&lt;h2 id=&#34;整体流程:4148907b28e52bc7301c1249655cea8c&#34;&gt;整体流程&lt;/h2&gt;

&lt;p&gt;要了解一个框架，首先要做的就了解程序的流程。&lt;/p&gt;

&lt;p&gt;一般而言，我们请求的是index.php文件，在这个文件中主要定义了三个文件目录：CI系统文件目录、应用程序文件目录、界面层文件目录，然后加载了CodeIgniter.php这一文件，该文件规定了程序的主要逻辑。&lt;/p&gt;

&lt;p&gt;在CodeIgniter.php中，首先加载了一些定义好的工具全局函数和变量，然后是基准测试类、钩子类、Config类，到这里都是一些辅助性的东西，接下来的加载URI类和路由类，前者对请求的url进行各种处理得到各段参数，后者对URI类的处理结果根据路由规则进行处理，到这里我们拿到了controller名、method名以及参数。根据路由类的处理结果，我们拿到controller实例，并调用相应的方法（大部分工作就是实现controller里的各种方法），如果需要输出页面的话一般是通过Output类进行。&lt;/p&gt;

&lt;p&gt;基本流程就是这样，下面具体展开来看。&lt;/p&gt;

&lt;h2 id=&#34;index-php:4148907b28e52bc7301c1249655cea8c&#34;&gt;index.php&lt;/h2&gt;

&lt;p&gt;这个文件是入口文件，虽然看起来有一堆代码，但是真正做的事情并不多。首先是定义当前环境，并且根据环境决定报错等级，然后定义了三个文件目录，分别是系统文件目录(&lt;code&gt;basepath&lt;/code&gt;)、应用代码文件目录(&lt;code&gt;APPPATH&lt;/code&gt;)和view层目录(&lt;code&gt;VIEWPATH&lt;/code&gt;)，大量操作都是用来校验目录合法性的，最后就是加载CodeIgniter.php这一文件。&lt;/p&gt;

&lt;h2 id=&#34;common-php:4148907b28e52bc7301c1249655cea8c&#34;&gt;Common.php&lt;/h2&gt;

&lt;p&gt;这个文件包含一些CI封装好的全局函数，先说一部分吧。&lt;/p&gt;

&lt;p&gt;1.&lt;code&gt;is_php&lt;/code&gt;是用来判断当前php版本的，其实就是对&lt;code&gt;version_compare&lt;/code&gt;这一系统函数的封装，不过在函数内部有一个静态局部变量&lt;code&gt;_is_php&lt;/code&gt;用来缓存判断的结果(js就只能默默地靠闭包实现这一功能)。&lt;/p&gt;

&lt;p&gt;2.&lt;code&gt;get_config&lt;/code&gt;主要是用来获取应用项目中的config文件并保存在静态局部变量&lt;code&gt;config&lt;/code&gt;中，还可以根据传入的值对&lt;code&gt;$config&lt;/code&gt;进行补充。&lt;/p&gt;

&lt;p&gt;3.&lt;code&gt;config_item&lt;/code&gt;是用来获取某个具体的配置的，在实现上首先有一个局部静态变量&lt;code&gt;_config&lt;/code&gt;，然后&lt;code&gt;$_config[0] =&amp;amp; get_config();&lt;/code&gt;，这样局部静态变量&lt;code&gt;_config&lt;/code&gt;保存了对config的引用，这里之所以用一个数组注释里说的很清楚：静态变量无法保存引用，所以用了数组。&lt;/p&gt;

&lt;p&gt;4.&lt;code&gt;load_class&lt;/code&gt;这个很重要，用来加载并且实例化一些系统类，由于CI扩展性强的特点，这里会判断有没有我们自行扩展的子类然后再实例化，实例化的类会缓存在一个静态局部变量中，用来实现单例。&lt;/p&gt;

&lt;p&gt;5.&lt;code&gt;is_loaded&lt;/code&gt;是和上面的&lt;code&gt;load_class&lt;/code&gt;函数配合使用的，用来追踪那些实例化的系统类的，这个函数一个是在&lt;code&gt;load_class&lt;/code&gt;中用到，还有是在controller的基类的构造函数使用，用来把实例化的系统类挂到controller上。&lt;/p&gt;

&lt;h2 id=&#34;benchmark-php:4148907b28e52bc7301c1249655cea8c&#34;&gt;Benchmark.php&lt;/h2&gt;

&lt;p&gt;Benchmark类是用来测试执行时间和使用内存的。&lt;/p&gt;

&lt;p&gt;对于内存的使用的测试Benckmark类仅仅是返回了一个特殊的字符串，然后在Output类中这个字符串被替换为真正的内存消耗。&lt;/p&gt;

&lt;p&gt;对于执行时间的测试原理其实很简单就是打时间戳。在CodeIgniter.php有几个默认的打时间戳的位置，比如Benchmark实例化成功后、controller的方法被调用后，对应打时间戳的方法是&lt;code&gt;mark&lt;/code&gt;，还有一个和测试时间有关的方法是&lt;code&gt;elapsed_time&lt;/code&gt;，它的作用是返回两点间的时间。既然是两个点，如果终点不传就返回起点到当前的时间，如果起点不传返回特殊字符串，经Output类处理最终是从开始运行CI到输出到浏览器的总时间。&lt;/p&gt;

&lt;h2 id=&#34;hooks-php:4148907b28e52bc7301c1249655cea8c&#34;&gt;Hooks.php&lt;/h2&gt;

&lt;p&gt;钩子为我们提供了在不改变核心代码的同时扩展核心代码的可能。对于Hooks类CI默认是禁用的，我们可以修改配置文件启用Hooks类。当启用时，会加载应用代码中的钩子函数。调用钩子函数时是这样的:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$EXT-&amp;gt;call_hook(&#39;pre_system&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们还是看一下源代码吧：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function call_hook($which = &#39;&#39;)
{
  if ( ! $this-&amp;gt;enabled OR ! isset($this-&amp;gt;hooks[$which])){
	return FALSE;
  }

  if (is_array($this-&amp;gt;hooks[$which]) &amp;amp;&amp;amp; ! isset($this-&amp;gt;hooks[$which][&#39;function&#39;])){
	foreach ($this-&amp;gt;hooks[$which] as $val){
		$this-&amp;gt;_run_hook($val);
	}
  }else{
		$this-&amp;gt;_run_hook($this-&amp;gt;hooks[$which]);
  }

  return TRUE;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先是判断有没有启用钩子、有没有在调用钩子函数的地方挂钩子，该退出的就退出。然后判断这个挂钩子的地方是挂了一个脚本还是多个脚本（一维数组还是二维数组），最终执行每一个脚本的是受保护的&lt;code&gt;_run_hook&lt;/code&gt;方法。&lt;/p&gt;

&lt;p&gt;这个&lt;code&gt;_run_hook&lt;/code&gt;方法支持的还是挺多的，支持匿名函数、支持调用已有实例的方法、支持面向过程的函数、也支持自行实例化一个类然后调用相应的方法（还实现了对这个实例的缓存）。&lt;/p&gt;

&lt;h2 id=&#34;config-php:4148907b28e52bc7301c1249655cea8c&#34;&gt;Config.php&lt;/h2&gt;

&lt;p&gt;config类是用来处理各种config文件的，在构造函数中有如下代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$this-&amp;gt;config =&amp;amp; get_config();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可能会问，为啥还要单独实现一个全局函数来获取config呢，为啥不在这个类里实现呢？原因是当我们需要实例化config类的时候(load_class函数)，我们需要判断有没有用户自行扩展的config子类，这时候已经需要加载config了，就这样。&lt;/p&gt;

&lt;p&gt;一些公共方法比如&lt;code&gt;set_item&lt;/code&gt;、&lt;code&gt;item&lt;/code&gt;、&lt;code&gt;slash_item&lt;/code&gt;都是对具体的config项目进行处理。而&lt;code&gt;load&lt;/code&gt;方法是用来加载一个配置文件的，在Loader类的自动加载调用过这个函数。&lt;/p&gt;

&lt;h2 id=&#34;controller-php:4148907b28e52bc7301c1249655cea8c&#34;&gt;Controller.php&lt;/h2&gt;

&lt;p&gt;虽然想按照执行顺序写但是还是先写Controller吧，毕竟controller是日常写的比较多的部分。controller的基类并不复杂：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class CI_Controller {
	private static $instance;
	public function __construct()
	{
		self::$instance =&amp;amp; $this;
		foreach (is_loaded() as $var =&amp;gt; $class)
		{
			$this-&amp;gt;$var =&amp;amp; load_class($class);
		}

		$this-&amp;gt;load =&amp;amp; load_class(&#39;Loader&#39;, &#39;core&#39;);
		$this-&amp;gt;load-&amp;gt;initialize();
		log_message(&#39;info&#39;, &#39;Controller Class Initialized&#39;);
	}

	public static function &amp;amp;get_instance()
	{
		return self::$instance;
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有一个静态私有变量&lt;code&gt;$instance&lt;/code&gt;用来存放实例化的controller，静态方法&lt;code&gt;get_instance&lt;/code&gt;是用来获取这个实例化的controller，在构造函数中，首先&lt;code&gt;self::$instance =&amp;amp; $this;&lt;/code&gt;把形成的实例存储在静态私有变量&lt;code&gt;$instance&lt;/code&gt;中，然后把通过&lt;code&gt;load_class&lt;/code&gt;这一函数实例化的类挂到controller上面，这样我们就可以在controller内通过&lt;code&gt;$this&lt;/code&gt;访问这些类了。&lt;/p&gt;

&lt;p&gt;在CodeIgniter.php文件中一个有关的函数是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function &amp;amp;get_instance()
{
	return CI_Controller::get_instance();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;model-php:4148907b28e52bc7301c1249655cea8c&#34;&gt;Model.php&lt;/h2&gt;

&lt;p&gt;Model也是业务逻辑经常要实现的，我们看一下model的基类：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class CI_Model {

	public function __construct()
	{
		log_message(&#39;info&#39;, &#39;Model Class Initialized&#39;);
	}

	public function __get($key)
	{
		return get_instance()-&amp;gt;$key;
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CI_Model就这么简短，比较有意思的是对于魔术方法&lt;code&gt;__get&lt;/code&gt;的使用，这里利用了get_instance这一函数，当model层没有所查询的变量时就从超级对象CI那里获取。&lt;/p&gt;

&lt;h2 id=&#34;uri-php-router-php:4148907b28e52bc7301c1249655cea8c&#34;&gt;URI.php Router.php&lt;/h2&gt;

&lt;p&gt;这两个文件综合决定了请求的controller和method以及参数。&lt;/p&gt;

&lt;p&gt;URI类主要是处理请求的URL，对超全局变量&lt;code&gt;$_SERVER&lt;/code&gt;里的数据进行各种处理，并且处理一些服务器的兼容问题，具体的代码注释可以参照&lt;a href=&#34;http://blog.csdn.net/Zhihua_W/article/details/52872407&#34;&gt;CI框架源码解析八之地址解析类文件URI.php&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Router类处理的是路由规则，如果使用默认的路由规则的话这个类基本上不做什么(除了赋默认值)，最终的controller和method名会挂在这个类上，以供CodeIgniter.php这个文件调用，并且对URI实例进行丰富，获得URI的&lt;code&gt;rsegment&lt;/code&gt;属性就是在这里填入数据的。关于代码解读可以参考&lt;a href=&#34;http://blog.csdn.net/Zhihua_W/article/details/52918664&#34;&gt;CI框架源码解析九之路由类文件Router.php&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;loader-php:4148907b28e52bc7301c1249655cea8c&#34;&gt;Loader.php&lt;/h2&gt;

&lt;p&gt;加载器类是一个功能丰富的类，它负责加载MVC中的Model和View，并且还加载library和helper。&lt;/p&gt;

&lt;h4 id=&#34;加载model:4148907b28e52bc7301c1249655cea8c&#34;&gt;加载model&lt;/h4&gt;

&lt;p&gt;加载model对应的是&lt;code&gt;model&lt;/code&gt;方法，这个方法有三个参数，有意思的是第一个参数，我们看下文档对第一个参数的说明：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$model (mixed) &amp;ndash; Model name or an array containing multiple models&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;第一个参数可以是一个model名，也可以是一个索引数组其中每一项是model名，还可以是关联数组，其中键为model名、值位挂在controller上的显示名。我们看下是如何实现的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (empty($model))
{
	return $this;
}
elseif (is_array($model))
{
	foreach ($model as $key =&amp;gt; $value)
	{
		is_int($key) ? $this-&amp;gt;model($value, &#39;&#39;, $db_conn) : $this-&amp;gt;model($key, $value, $db_conn);
	}

	return $this;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，加载多个model最终转换为一个一个model的加载。&lt;/p&gt;

&lt;p&gt;然后所做的是根据传入的参数获得路径和model名，保证CI_model这个基类被加载，如果有扩展的子类还要保证扩展的子类被加载，最终拿到model的实例并挂到controller上。&lt;/p&gt;

&lt;h4 id=&#34;加载helper:4148907b28e52bc7301c1249655cea8c&#34;&gt;加载helper&lt;/h4&gt;

&lt;p&gt;加载helper其实要比加载model更简单，因为helper都是面向过程的写法，只要保证文件被include进来就行，无所谓什么基类子类之类的，不过CI在这里把subclass的概念强加在了文件名称规范上了，虽说如此CI也做了兼容处理允许在应用代码的help文件不包含subclass前缀。具体的看代码吧。&lt;/p&gt;

&lt;h4 id=&#34;加载library:4148907b28e52bc7301c1249655cea8c&#34;&gt;加载library&lt;/h4&gt;

&lt;p&gt;加载library的核心逻辑和加载一个model的差不多，都是加载文件实例化一个类最后挂在CI上面，只是多了一些if else。这是因为model的话必须是&lt;code&gt;CI_Model&lt;/code&gt;的子类，而library可不一定，library可以是对CI的library的拓展(即子类)，我们还何以在应用代码里来个和系统library同名文件直接取代掉系统的library，我们还可以在应用代码里自行写一个新的类，而且实例化model的时候没有参数，但是library的有。&lt;/p&gt;

&lt;h4 id=&#34;加载view:4148907b28e52bc7301c1249655cea8c&#34;&gt;加载view&lt;/h4&gt;

&lt;p&gt;加载view有三个参数，第一个是view层文件的地址，既然已经到这里了加载一个文件已经是见的多了，不多说了，然后第二个参数是一个关联数组，用于存放我们要从controller层传递给view层的数据，在view层我们使用传递过来的数据的时候这个关联数组就像被打散了一样，我一直没想清楚ci是如何实现的，知道我看了源码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extract($this-&amp;gt;_ci_cached_vars);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在对传进来的数据进行一定的清洗合并之后，使用&lt;code&gt;extract&lt;/code&gt;这个函数实现打散一个关联数组。这里还一个问题，在我们的项目中一般是把数据挂在controller上，然后在view层通过&lt;code&gt;$this&lt;/code&gt;来访问，那就有问题了，加载view层的时候，&lt;code&gt;$this&lt;/code&gt;指向的是加载器而不是controller，那我们是如何获得controller上的变量的？其实类似的问题我们在model层也遇到过，model层是通过魔术方法&lt;code&gt;__get&lt;/code&gt;获得挂在controller上的变量的，然而加载器这里处理的太暴力的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; foreach (get_object_vars($_ci_CI) as $_ci_key =&amp;gt; $_ci_var)
{
	if ( ! isset($this-&amp;gt;$_ci_key))
	{
		$this-&amp;gt;$_ci_key =&amp;amp; $_ci_CI-&amp;gt;$_ci_key;
 	}
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有代码有真相，这里是把controller上的变量直接全挂到了加载器上，不得不佩服作者的脑洞，其实我一直很好奇作者为啥不和model用同样的代码。&lt;/p&gt;

&lt;p&gt;最后一个参数是控制直接返回一个字符串还是把它交给output类处理，在默认条件下是交给output类。在这里作者为了性能上的考虑使用了输出缓存。&lt;/p&gt;

&lt;p&gt;++++++++++++++++分割线++++++++++++++++++++&lt;/p&gt;

&lt;p&gt;&lt;em&gt;到这里CI最主要的基本上完了，这里没提的几个类包括Lang、UTF8、Input、Security，前两个我认为对于常规的开发没有去看的必要，后两个虽然常用，但是有大量的正则表达式我实在是不想看，先告一段落吧。下面的主要任务是看CI封装的一些library和helper。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;++++++++++++++++分割线++++++++++++++++++++&lt;/p&gt;

&lt;p&gt;CI的helper大体看了几个自己感兴趣的，最大的收获是给CI发现了一个bug然后让作者修掉了。其实php提供的系统函数已经够多了，足以支持一般开发。&lt;/p&gt;

&lt;p&gt;library看了ua类，从代码的角度没有什么难以理解的，其中有一段值得学习一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foreach (array(&#39;_set_robot&#39;, &#39;_set_browser&#39;, &#39;_set_mobile&#39;) as $function)
{
    if ($this-&amp;gt;$function() === TRUE)
    {
        break;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>http://jiangshanmeta.github.io/post/php/single/</link>
      <pubDate>Sun, 18 Sep 2016 15:42:17 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/php/single/</guid>
      <description>&lt;p&gt;重新学习最好的编程语言的时候看到了&lt;code&gt;static&lt;/code&gt;关键字，于是就想到了可以用这个做单例模式。单例模式的作用是保证一个类最多只有一个实例对象。这里不仅讲php中如何实现单例模式，还顺便说一下在js中如何实现单例模式。&lt;/p&gt;

&lt;p&gt;首先讲一下在php中如何实现单例模式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Person{
	private static $instance = null;
	private function __construct($name){
		$this-&amp;gt;name = $name;
	}

	public function gen_name(){
		var_dump($this-&amp;gt;name);
	}

	public static function get_instance($name){
		if(!(self::$instance instanceof self)){
			self::$instance = new self($name);
		}
		return self::$instance;
	}

}

$a = Person::get_instance(&#39;a&#39;);
$b = Person::get_instance(&#39;b&#39;);
$a-&amp;gt;gen_name();  // a
$b-&amp;gt;gen_name();	 // a

var_dump($a===$b); // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先我们把构造函数&lt;code&gt;__construct()&lt;/code&gt;加上修饰词&lt;code&gt;private&lt;/code&gt;，这样在外部使用&lt;code&gt;new&lt;/code&gt;关键字实例化一个对象就会报错。然后我们添加一个私有的静态变量&lt;code&gt;$instance&lt;/code&gt;，用来缓存实例化的对象。静态方法&lt;code&gt;get_instance&lt;/code&gt;用来提供单例实例对象。首先判断&lt;code&gt;$instance&lt;/code&gt;有没有缓存的实例，如果有就返回这个缓存的实例对象，如果没有就手动new一个实例对象然后缓存返回该对象。单例模式在php中的实现并不复杂。&lt;/p&gt;

&lt;p&gt;对于js实现上稍微有点复杂，因为js没有&lt;code&gt;static&lt;/code&gt;关键词，但是我们可以模拟它。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Person = (function(){
	var instance = null;

	return function(name){
		// 安全模式，保证是使用new关键字
		if(! (this instanceof Person)){
			return new Person(name);
		}

		// 还没有创建实例对象，需要创建并缓存
		if(!(instance instanceof Person)){
			this.name = name;

			instance = this;
		}
		return instance
	}
})();

var a = Person(&#39;a&#39;);
var b = new Person(&#39;b&#39;);
console.log(a.name); // a
console.log(b.name); // b
console.log(a===b);  // true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在js中实现单例模式的原理类似，只是使用闭包存了一个变量&lt;code&gt;instance&lt;/code&gt;用来缓存实例对象。顺便说一句在这里被js的操作符优先级给坑了一下，默默加括号。&lt;/p&gt;

&lt;p&gt;其实单例模式的核心是保证最多只有一个实例对象，对于灵活的js其实还有一种更简单粗暴的方法，就是直接暴露一个对象，根本不给你new的机会。&lt;/p&gt;

&lt;p&gt;比如在我们的项目中有这样的一段代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var AlertPlug = {
	alert:function(){},
	close:function(){},
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就是使用单例模式的一个例子。&lt;/p&gt;

&lt;p&gt;update 2016/09/21&lt;/p&gt;

&lt;p&gt;上面的js虽然实现了但是模式，但是有一个很严重的问题，就是如果我们想在Person原型上添加一些方法，这些方法由于作用域的原因是无法获取到闭包内的静态私有变量，对于以后的扩展是很不利的。我们可以这样修改：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(function(window){
	var instance = null;
	var otherStaticPrivateVar = null;

	function Person(name){
		// 安全模式，保证是使用new关键字
		if(! (this instanceof Person)){
			return new Person(name);
		}

		// 还没有创建实例对象，需要创建并缓存
		if(!(instance instanceof Person)){
			this.name = name;

			instance = this;
		}
		return instance
	}

	Person.prototype.logOtherStaticPrivateVar=function(){
		console.log(otherStaticPrivateVar);
	}
	window.Person = Person;
})(window);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最终的结果依然是向全局暴露一个构造函数。&lt;/p&gt;

&lt;p&gt;update 2016/09/21&lt;/p&gt;

&lt;p&gt;后来想了想，prototype是为了不同实例之间共享一些属性和方法才存在的，既然我要做的是单例，那又何必把方法加在prototype上。&lt;/p&gt;

&lt;p&gt;不过，上面的补充其实可以作为在js中模拟静态私有变量的通用写法。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>重新学习最好的编程语言</title>
      <link>http://jiangshanmeta.github.io/post/php/relearnphp/</link>
      <pubDate>Thu, 25 Aug 2016 21:07:38 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/php/relearnphp/</guid>
      <description>

&lt;p&gt;从前端入的行，现在前端和后端php一起写，虽然日常的业务逻辑对我来说很轻松，但是感觉自己被框架宠坏了。业务中用的框架是封装过的CI，想着从一个空的CI（3.1.0）开始做起，至少要脱离现在高度封装过的框架。跟着教程看起，发现了自己对于php很多地方理解不足，这里一条条记录下来。&lt;/p&gt;

&lt;h2 id=&#34;构造函数:960e085aadb29182f9448019a6b3c8f1&#34;&gt;构造函数&lt;/h2&gt;

&lt;p&gt;CI框架默认的&lt;code&gt;controller&lt;/code&gt;是welcome，不过业界习惯还是index，我就照着welcome这个&lt;code&gt;controller&lt;/code&gt;写了一个index的&lt;code&gt;controller&lt;/code&gt;,然后就报错了。我说我这种动不动就建个&lt;code&gt;controller&lt;/code&gt;写个几百行的咋建个&lt;code&gt;controller&lt;/code&gt;就报错啊。然后百度了一下有人在博客里说是因为这是CI的保留名称所以会报错，可是项目中明明就有controller名为index的啊。后来我发现根本不是这么回事。&lt;/p&gt;

&lt;p&gt;问题出在&lt;strong&gt;构造函数&lt;/strong&gt;上。在php4的时代，构造函数是和类名同名的函数，但是在php5引入了&lt;code&gt;__construct&lt;/code&gt;的概念作为构造函数，同时为了保证向下兼容所以如果没有找到&lt;code&gt;__construct&lt;/code&gt;就把同名函数作为构造函数。在这里，我的controller名称是index，方法名称也是index，并且没有&lt;code&gt;__construct&lt;/code&gt;所以会把index方法当成构造函数。解决方案也就很明了了：写上构造函数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function __construct(){
	parent::__construct();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为继承的基类&lt;code&gt;CI_Controller&lt;/code&gt;里有构造函数，显然不作死的方案是调用基类的构造函数。看了一眼项目里的代码，我们是一个类继承了&lt;code&gt;CI_Controller&lt;/code&gt;，调用了&lt;code&gt;CI_Controller&lt;/code&gt;的构造函数，然后做了一些其他的操作。&lt;/p&gt;

&lt;h2 id=&#34;view-template:960e085aadb29182f9448019a6b3c8f1&#34;&gt;view &amp;amp;&amp;amp; template&lt;/h2&gt;

&lt;p&gt;CI是一个MVC框架，最开始我只会画画页面写写js，所以最一开始做的是view层。关于CI的view层&lt;a href=&#34;http://codeigniter.org.cn/user_guide/general/views.html&#34;&gt;官方文档里已经给出了很好的说明&lt;/a&gt;，仅仅从用的角度来说已经足够了。然而如果不对其进行封装很容易做一些重复性的操作，比如说声明对header的加载，声明对footer的加载，而真正业务逻辑对应的页面加载只需要一行，对此我们引入了一个新的类&lt;code&gt;template&lt;/code&gt;，把那些header、footer之类的全都放在模板里，在模板里输出真的业务逻辑界面。&lt;/p&gt;

&lt;p&gt;下面代码是从项目代码里按照自己的书写习惯稍微改造的，如果不明白其中一些CI的东西可以看上面链接。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Template{
	public function __construct(){
		$this-&amp;gt;templateData = [];
		$this-&amp;gt;CI = &amp;amp;get_instance();
	}

	public function set($name,$value){
		$this-&amp;gt;templateData[$name] = $value;
	}

	public function load($template,$view,$view_data = array(),$return = FALSE){
		$this-&amp;gt;set(&#39;contents&#39;,$this-&amp;gt;CI-&amp;gt;load-&amp;gt;view($view,$view_data,TRUE));
		return $this-&amp;gt;CI-&amp;gt;load-&amp;gt;view($template,$this-&amp;gt;templateData,$return);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们把这个类放在&lt;code&gt;application/libraries&lt;/code&gt;目录下&lt;code&gt;template.php&lt;/code&gt;文件中，并在autoload中的libraries数组中添加&lt;code&gt;template&lt;/code&gt;,这样我们就可以愉快的使用&lt;code&gt;template&lt;/code&gt;类了，例如以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$this-&amp;gt;template-&amp;gt;load(&amp;quot;default_page&amp;quot;,&amp;quot;index/index&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;my-controller:960e085aadb29182f9448019a6b3c8f1&#34;&gt;MY_Controller&lt;/h2&gt;

&lt;p&gt;面向对象一大特征是继承，对于controller里的类也适用。CI官方文档里所讲的controller所继承的都是&lt;code&gt;CI_Controller&lt;/code&gt;，如果需求简单确实足够了，想要封装一层的话可以让这个子类继承自&lt;code&gt;CI_Controller&lt;/code&gt;，在这个类里面进行所需要的封装，controller里的类再继承自这个子类。&lt;/p&gt;

&lt;p&gt;如果熟悉面向对象的话上面所说的实现起来并不复杂，唯一的问题是目录。其实CI已经考虑过这个问题了。把自己封装好的类放到&lt;code&gt;application/core&lt;/code&gt;目录下，文件名称为xxController，然后在&lt;code&gt;application/config/config.php&lt;/code&gt;中找到&lt;code&gt;$config[&#39;subclass_prefix&#39;]&lt;/code&gt;，将其值赋为刚才文件名中的xx，然后你就会发现这个文件会自动被加载（至于具体的子类名称，对于我这种命名困难户显然是选文件名啦）。话说回来，真不嫌麻烦还可以每个controller里手动加载这个文件（何必呢）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://codeigniter.org.cn/user_guide/general/core_classes.html&#34;&gt;扩展核心系统类&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;uri类:960e085aadb29182f9448019a6b3c8f1&#34;&gt;URI类&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://codeigniter.org.cn/user_guide/libraries/uri.html&#34;&gt;URI类&lt;/a&gt;可以帮助从URI字符串中获得一些基本的信息，结合项目中所用到的说一下。&lt;/p&gt;

&lt;p&gt;根据CI的路由规则，第一个参数是控制器的名称，第二个参数是方法名，有的时候会用到这两个名称，最开始的时候我是在controller的构造函数手动声明控制器名称是啥，在具体方法里手动声明方法名是啥。看了文档个人觉得可以封装到上面提到的subclass的构造函数中，毕竟用到的还是比较多。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$this-&amp;gt;controller_name = $this-&amp;gt;uri-&amp;gt;segment(1)==null?&#39;index&#39;:$this-&amp;gt;uri-&amp;gt;segment(1);
$this-&amp;gt;method_name = $this-&amp;gt;uri-&amp;gt;segment(2)==null?&#39;index&#39;:$this-&amp;gt;uri-&amp;gt;segment(2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除此之外还用到比较多的是&lt;code&gt;$this-&amp;gt;uri-&amp;gt;uri_string()&lt;/code&gt;，这个主要是用在重定向上（因为样式问题以及兼容性、推广等问题对于手机和PC做了两个子站）。&lt;/p&gt;

&lt;h2 id=&#34;mongodb-cimongo:960e085aadb29182f9448019a6b3c8f1&#34;&gt;mongoDB &amp;amp;&amp;amp; cimongo&lt;/h2&gt;

&lt;p&gt;WEB开发离不开数据库，没记错的话新手是首推mysql，然后我就点错科技树学了mongoDB。开始连接数据库吧。&lt;/p&gt;

&lt;p&gt;先说个mongoDB的可视化工具&lt;a href=&#34;https://robomongo.org/&#34;&gt;robomongo&lt;/a&gt;，从一开始写后端程序就在用，毕竟图形界面大法好。&lt;/p&gt;

&lt;p&gt;然后说一下用的库&lt;a href=&#34;https://github.com/vesparny/cimongo-codeigniter-mongodb-library&#34;&gt;cimongo-codeigniter-mongodb-library&lt;/a&gt;，目测作者弃坑了。这个库为我们封装了许多操作数据库的方法。我们需要把config目录下的cimongo.php移动到ci项目 application/config目录下，然后把libraries目录下的cimongo文件夹移动到我们的ci项目中application/libraries目录下。迁移过来之后需要进行一些配置操作，打开cimongo.php配置host、port和db，然后和上面的template类一样作为autoload的libraries，这样我们就可以通过&lt;code&gt;$this-&amp;gt;cimongo&lt;/code&gt;操作数据库了。在实际项目中目测是因为觉得这样写比较长在subclass中做了这个操作&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$this-&amp;gt;db = $this-&amp;gt;cimongo;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的话我们就可以进行数据库操作了，现在可以随手插入两条数据看看了，然而这样操作数据库是比较危险的操作，随后我们需要进行的是在model层对数据操作进行封装。&lt;/p&gt;

&lt;h2 id=&#34;创建类库:960e085aadb29182f9448019a6b3c8f1&#34;&gt;创建类库&lt;/h2&gt;

&lt;p&gt;今天遇到一个需求是根据权重产生随机结果，实现起来其实并不复杂，我只是想借着这个引出话题 &lt;a href=&#34;http://codeigniter.org.cn/user_guide/general/creating_libraries.html&#34;&gt;在CI中创建类库&lt;/a&gt;。之前的template类就是这个主题的一个体现，不过那个类我是配置成了自动加载，那现在我有一个&lt;code&gt;Utility&lt;/code&gt;类，我想在需要的时候加载，我应该怎么办&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$this-&amp;gt;load-&amp;gt;library(&#39;Utility&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后这个类就挂在了$CI上面。稍微有点开发经验的人应该对utility这个词不陌生，从此可以收集各种小函数啦（我不生产代码，我只是代码的搬运工）。&lt;/p&gt;

&lt;h2 id=&#34;field:960e085aadb29182f9448019a6b3c8f1&#34;&gt;field&lt;/h2&gt;

&lt;p&gt;对于从数据库里拿出来的数据，CI并没有做什么别的操作，我们项目中采用了一系列field类，用于对字段进行处理。&lt;/p&gt;

&lt;p&gt;首先我们实现了对CI的load的扩展，类似于上面说的MY_Controller,在同一目录下我们可以建立我们的Loader，其命名规则和自己建的controller一致，都是根据&lt;code&gt;application/config/config.php&lt;/code&gt;中的&lt;code&gt;$config[&#39;subclass_prefix&#39;]&lt;/code&gt;。这样我们就可以通过&lt;code&gt;$this-&amp;gt;load-&amp;gt;field($show_name,$name,$is_must_input=false)&lt;/code&gt;加载field对象了。&lt;/p&gt;

&lt;p&gt;然后我们需要做的是根据我们对不同字段类型的设定，加载不同的field，进行初始化操作，然后我们就可以在各种field上封装各种方法对数据进行处理啦。&lt;/p&gt;

&lt;h2 id=&#34;链式调用:960e085aadb29182f9448019a6b3c8f1&#34;&gt;链式调用&lt;/h2&gt;

&lt;p&gt;最早接触链式调用是在使用jQuery的时候，其实我觉得使用链式调用能使代码看起来更紧凑一点，除此之外看不出来有什么好处。&lt;/p&gt;

&lt;p&gt;要实现链式调用技术上也并不复杂，最核心的就是&lt;code&gt;return $this;&lt;/code&gt;这一句话。&lt;/p&gt;

&lt;p&gt;很不幸的是在工作项目中除了引用的第三方库中实现过链式调用，我们的后端代码中真心没有自行实现过链式调用，都是使用别人提供的链式调用。&lt;/p&gt;

&lt;p&gt;目前也就发现在model层实现链式调用有点用处，这也提醒我以后一些操作封装在model层，而不是仅仅在controller层实现功能就完了。公司代码里有的没有返回值直接添加 &lt;code&gt;return $this;&lt;/code&gt;就好了，但是有的。。想改就要改一大堆东西，有的甚至都挂在&lt;code&gt;$this&lt;/code&gt;上了还要手动返回一次。历史包袱这种东西真心纠结。&lt;/p&gt;

&lt;p&gt;因为有的代码从controller层迁移到了model层，一些controller里的return在model层就要转化为exit，这个&lt;a href=&#34;http://jiangshanmeta.github.io/post/php/exit/&#34;&gt;已经有了一些经验&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;protected:960e085aadb29182f9448019a6b3c8f1&#34;&gt;protected&lt;/h2&gt;

&lt;p&gt;javascript没有类的概念，因而也没有private、protected、public的概念，但是在php中有啊，在平时的开发中public和private用的比较多，但是真的没找到&lt;code&gt;protected&lt;/code&gt;的使用痕迹（第三封库的不算），但其实我觉得这个概念很好用啊。&lt;/p&gt;

&lt;p&gt;在controller层，写多了就会发现有一些业务上的通用小函数，最开始可能就只在一个controller里面用，显然封装成private就已经足够了，随着业务逻辑的复杂，这样的小函数可能会复制粘贴多次，显然应该向基类里进行封装，最合适的关键词就是&lt;code&gt;protected&lt;/code&gt;。封装到上面提到的&lt;strong&gt;MY_Controller&lt;/strong&gt;里面其实也不是很合适，个人认为那里适合放一些对CI框架的封装及操作，属于框架扩展层面的，而不应该存放业务逻辑。因此我个人认为应该写个专门的类继承&lt;strong&gt;MY_Controller&lt;/strong&gt;，里面放这些业务逻辑通用代码，都是protected的，然后具体的业务类都继承这个类。&lt;/p&gt;

&lt;p&gt;在model层，本身就有一些变量只应该内部使用，比如表名之类的，开发工作中的model层这些变量基本没有被限制过，都是暴露出去的，只有一些私有方法。sign&lt;/p&gt;

&lt;h2 id=&#34;get:960e085aadb29182f9448019a6b3c8f1&#34;&gt;__get()&lt;/h2&gt;

&lt;p&gt;为啥我会提到这个，这是个悲伤的故事。&lt;/p&gt;

&lt;p&gt;上面说到利用&lt;code&gt;protected&lt;/code&gt;的概念改写了一些公司对CI封装的代码，在controller层其实没什么问题，在model层有些问题，因为有些情况下还是会需要访问极个别被保护起来的变量，为了实现这个需求一个方案是在业务model类里面重新设定这些变量的修饰词，但这样就可以修改这些变量了，另一个方案是仅仅给这些变量读的权限，于是我就想到了魔术方法&lt;code&gt;__get()&lt;/code&gt;，然后我就在model层基类写下了以下代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function __get($name){
	if(in_array($name,[&#39;tableName&#39;])) {
		return $this-&amp;gt;$name;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到这里逻辑上没什么问题，然后我就去测试了，然后就报错了。直接说原因：我封装的model层基类继承自&lt;code&gt;CI_Model&lt;/code&gt;，在这个类里面有如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function __get($key){
	return get_instance()-&amp;gt;$key;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看代码就差不多明白了吧，同时通过这段代码，CI实现了在model层调用&lt;code&gt;CodeIgniter&lt;/code&gt;的属性和方法。所以修改后的代码是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function __get($name){
	if(in_array($name, [&#39;is_inited&#39;])){
		return $this-&amp;gt;$name;
	}else{
		return parent::__get($name);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;final:960e085aadb29182f9448019a6b3c8f1&#34;&gt;final&lt;/h2&gt;

&lt;p&gt;之所以会提及这个关键词也是很偶然的，今天老板吐槽一个同事经常重载诸如&lt;code&gt;insert_db&lt;/code&gt;之类的基础函数，然后就谈到了稍微大型的项目就不会让每个人都接触整个项目代码了，很有可能一个人只负责几个controller或者model，基类整体就是只暴露可以调用的方法，内部实现根本看不到，那问题就是如何防止重载基础函数，老板说跑脚本检测之类的，但是最简单的实现就是在想要防止重载的方法加上&lt;code&gt;final&lt;/code&gt;修饰词，能用语言本身解决的问题还需要跑脚本之类的折腾吗。&lt;/p&gt;

&lt;p&gt;之所以要重载是因为想做些额外的事情，那在使用final关键词的情况下解决如何做这些额外的事情？答案是使用&lt;strong&gt;钩子函数&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;model:960e085aadb29182f9448019a6b3c8f1&#34;&gt;model&lt;/h2&gt;

&lt;p&gt;根据CI的文档，model层是用来负责和数据库打交道的，在我们的项目中，把model分成了两类，一类是record_model,负责处理一条数据，另一类是list_model，负责处理多条数据，record_model是list_model的基础。这两个类都是继承自CI_model，作为对CI的进一步封装，这两个类上封装了一系列方法，用于对数据进行加载和处理，同时作为业务类的基础。由于一些历史原因，里面有许多方法封装的并不是很合适以至于，所以我要各种修修补补。&lt;/p&gt;

&lt;h2 id=&#34;改变应用路径:960e085aadb29182f9448019a6b3c8f1&#34;&gt;改变应用路径&lt;/h2&gt;

&lt;p&gt;在CI中原始的项目代码是放在&lt;code&gt;application&lt;/code&gt;目录下，而&lt;code&gt;index.php&lt;/code&gt;和该目录同级，出于安全及复杂应用的考虑，我们可以考虑改变入口文件&lt;code&gt;index.php&lt;/code&gt;的位置及项目代码目录的名称。
比如说我们把原来的application目录修改为app_user，在和该目录同级建立一个www_user目录，把入口文件放到该目录下，
为此，我们需要再index.php中进行如下设置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$application_folder = getcwd().&#39;/../app_user&#39;;
$system_path = &#39;../system&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;辅助函数:960e085aadb29182f9448019a6b3c8f1&#34;&gt;辅助函数&lt;/h2&gt;

&lt;p&gt;CI提供了一些使用面向过程写的辅助函数，我扩展的是url_helper，毕竟web开发离不开url的处理。首先是对这个文件的自动加载，在autoload文件中的&lt;code&gt;autoload[&#39;helper&#39;]&lt;/code&gt;数组中添加一项&lt;code&gt;url&lt;/code&gt;这样就能自动加载了。&lt;/p&gt;

&lt;p&gt;然后是添加我的扩展&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ( ! function_exists(&#39;static_url&#39;))
{
	function static_url($uri = &#39;&#39;)
	{
		$CI =&amp;amp; get_instance();
		return $CI-&amp;gt;config-&amp;gt;static_url($uri);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个函数的目标是处理对本地文件的引用路径（比如js、css还有图片）。&lt;/p&gt;

&lt;p&gt;具体实现是在&lt;strong&gt;system/core/config.php&lt;/strong&gt;中。&lt;/p&gt;

&lt;h2 id=&#34;static:960e085aadb29182f9448019a6b3c8f1&#34;&gt;static&lt;/h2&gt;

&lt;p&gt;在使用CI的时候，经常会调用&lt;code&gt;get_instance&lt;/code&gt;这个函数，看一下具体实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function &amp;amp;get_instance()
{
	return CI_Controller::get_instance();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看来在CI_Controller上有一个静态方法&lt;code&gt;get_instance&lt;/code&gt;，我们再去找CI_Controller的相关代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static function &amp;amp;get_instance()
{
	return self::$instance;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看起来CI_Controller里面有一个受保护的的静态成员&lt;code&gt;$instance&lt;/code&gt;,再去找它&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static $instance;
public function __construct()
{
	self::$instance =&amp;amp; $this;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那结果很显然，这个静态私有变量保存着对controller实例的引用。&lt;/p&gt;

&lt;p&gt;最近想优化点代码，遇到了这么一个需求：父类非静态方法中访问子类的静态属性。如果是父类非静态方法访问父类静态/非静态属性，或者子类非静态方法访问父类/子类的静态/非静态属性，或者父类非静态方法访问子类非静态属性，这些都好说，唯独父类非静态方法访问子类静态属性比较折腾。&lt;/p&gt;

&lt;p&gt;最终的解决方案是利用了下面提到的&lt;code&gt;get_class&lt;/code&gt;方法，在父类的非静态方法中，使用&lt;code&gt;get_class($this)&lt;/code&gt; (我想你应该明白为什么我会一直强调非静态方法了吧)，拿到子类的类名之后获取其静态属性就没什么难度了吧。&lt;/p&gt;

&lt;h2 id=&#34;spl-autoload-register:960e085aadb29182f9448019a6b3c8f1&#34;&gt;spl_autoload_register&lt;/h2&gt;

&lt;p&gt;这个函数其实不是CI中使用的，而是项目中对CI进行扩展的时候使用的，其作用相当于是对于&lt;code&gt;__autoload&lt;/code&gt;的加强版。其实稍微大点的项目用得到，小项目用&lt;code&gt;__autoload&lt;/code&gt;就行了。&lt;/p&gt;

&lt;p&gt;我们用它做了什么？在CI中，如果要加载并实例化某个类并挂到CI上，我们需要使用load方法，但是有的时候我们只想使用这个类的实例，并不想挂到CI指针上，比如说在一个model中加载另一个model，我们该怎么办？一个方法是需要的时候手动include或者require，当然这样比较累，另一种方法就是__autoload啦。最终的结果是我们可以使用new关键字实例化一个model而不需要手动加载文件。&lt;/p&gt;

&lt;h2 id=&#34;date:960e085aadb29182f9448019a6b3c8f1&#34;&gt;date&lt;/h2&gt;

&lt;p&gt;之所以说它是因为出了一个小bug，我想要处理时间戳显示时间，然后第一个参数填了&lt;code&gt;&#39;Y-m-d h:i&#39;&lt;/code&gt;,然后就出bug了，因为这里的h是指12小时制。这个函数常用的其实就那么几个参数。&lt;a href=&#34;http://php.net/manual/zh/function.date.php&#34;&gt;手册&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;json-decode:960e085aadb29182f9448019a6b3c8f1&#34;&gt;json_decode&lt;/h2&gt;

&lt;p&gt;一般来说&lt;code&gt;json_decode&lt;/code&gt;用到的很少，主要用到的是&lt;code&gt;json_encode&lt;/code&gt;。以前不知道前端如何向后端传递复杂数据类型，然后就前端转成json然后给后端，后端decode，然后当时也不知道还有第二个参数所以后端以对象的语法访问。后来看其他人的代码，知道在jquery中可以传递数组和对象然后jquery格式化。    今天在看jquery如何实现序列化，突然想到了这个话题。&lt;/p&gt;

&lt;h2 id=&#34;json-encode-转义:960e085aadb29182f9448019a6b3c8f1&#34;&gt;json_encode 转义&lt;/h2&gt;

&lt;p&gt;在写&lt;a href=&#34;http://jiangshanmeta.github.io/demo/myWork/mobile/lottery/index.html&#34;&gt;抽奖效果&lt;/a&gt;的时候遇到一个需求，对于奖项进行换行显示，因为canvas本身不支持文字换行，所以我们最开始约定使用\n作为分隔符，人工进行换行处理。然而最开始并不能正常进行分割，一开始以为是中文的问题，然后查了查&lt;a href=&#34;http://php.net/manual/zh/function.json-encode.php&#34;&gt;发现&lt;code&gt;json_encode&lt;/code&gt;有第二个参数（通过json_encode传递奖项array）&lt;/a&gt;，对中文不转义之后发现依然无法正常显示，然后就猜是转义的问题。确实有转义的问题但不仅仅是转义的问题，因为在单引号下，json_encode的结果无法正常分割但是直接php输出这一子项的结果可以正常分割，双引号下json_encode的结果可以分割但是直接输出的结果直接报错。总之，为啥当初用\n这种符号分割呢。&lt;/p&gt;

&lt;h2 id=&#34;变量作用域:960e085aadb29182f9448019a6b3c8f1&#34;&gt;变量作用域&lt;/h2&gt;

&lt;p&gt;之所以会提及这个问题是因为看CI源码时遇到了这么一段：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function &amp;amp;get_config(Array $replace = array())
{
	static $config;
	if (empty($config))
	{
		$file_path = APPPATH.&#39;config/config.php&#39;;
		$found = FALSE;
		if (file_exists($file_path))
		{
			$found = TRUE;
			require($file_path);
		}
	}
	return $config;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个函数首先声明了一个静态局部变量&lt;code&gt;$config&lt;/code&gt;，然后如果这个变量为空就去加载对应文件，文件中有一个名为&lt;code&gt;$config&lt;/code&gt;的变量。觉得这里写的比较巧妙，如果直接加在这个文件，就会设立一个全局变量&lt;code&gt;$config&lt;/code&gt;，容易被修改或者覆盖，这里将其转化为局部静态变量，从而起到了保护的作用，类似于js的闭包。&lt;/p&gt;

&lt;p&gt;说起作用域，js和php还是有点差异的，比如js局部变量没有会沿着作用域链向上查找，而在php中在局部想要访问全局变量需要手动添加&lt;code&gt;global&lt;/code&gt;关键字。php中的静态变量和js中闭包中的变量很类似。写php面向对象惯了反而对作用域关注的少了。&lt;/p&gt;

&lt;h2 id=&#34;server:960e085aadb29182f9448019a6b3c8f1&#34;&gt;$_SERVER&lt;/h2&gt;

&lt;p&gt;以前一直不明白CI是如何根据url确定需要初始化的controller是哪个、调用的方法是哪个、以及参数。看CI源码就明白了，在超全局变量&lt;code&gt;$_SERVER&lt;/code&gt;保存着请求的url，通过&lt;code&gt;CI_Router&lt;/code&gt;和&lt;code&gt;CI_URI&lt;/code&gt;两个类进行字符串处理就可以得到controller、method以及参数。&lt;/p&gt;

&lt;h2 id=&#34;魔术常量:960e085aadb29182f9448019a6b3c8f1&#34;&gt;魔术常量&lt;/h2&gt;

&lt;p&gt;之前提到了魔术方法，这里说一下魔术常量。对于一般的开发工作来说基本上用不到魔术常量，但是对于框架确实需要，在CI框架中见过这么几个魔术常量的使用：&lt;code&gt;__FILE__&lt;/code&gt;、&lt;code&gt;__DIR__&lt;/code&gt;，可以看到都是和文件路径相关的。我觉得可能会用到的有&lt;code&gt;__FUNCTION__&lt;/code&gt;和&lt;code&gt;__CLASS__&lt;/code&gt;,后者可以被系统函数&lt;code&gt;get_class&lt;/code&gt;一定程度上取代。在使用继承的时候，&lt;code&gt;get_class&lt;/code&gt;返回的是最终的子类的类名，而魔术常量&lt;code&gt;__class__&lt;/code&gt;的具体值和调用的位置有关，在哪个类中被调用就是那个类。&lt;/p&gt;

&lt;h2 id=&#34;func-get-args-func-get-arg-func-num-args:960e085aadb29182f9448019a6b3c8f1&#34;&gt;func_get_args  func_get_arg  func_num_args&lt;/h2&gt;

&lt;p&gt;在js中有个arguments,通过这个类数组可以找到函数的参数，题目中的三个函数所起到的作用和js的arguments差不多。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>php中exit()的一个用法——记一次无聊的封装</title>
      <link>http://jiangshanmeta.github.io/post/php/exit/</link>
      <pubDate>Thu, 28 Jul 2016 19:00:23 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/php/exit/</guid>
      <description>&lt;p&gt;熟悉最好的编程语言php（手动滑稽）的人应该对于&lt;code&gt;exit()&lt;/code&gt;或者&lt;code&gt;die()&lt;/code&gt;函数不陌生，根据&lt;a href=&#34;http://php.net/manual/zh/function.die.php&#34;&gt;手册的说法&lt;/a&gt;这两个函数其实是别名关系，功能上是一样的。一般这两个函数是在调试的时候用的比较多，我的一个同事就比较习惯用&lt;code&gt;die()&lt;/code&gt;，然而作为前端入行的我显然是更习惯使用&lt;code&gt;return&lt;/code&gt;的方式进行调试。其实我对php的最主要调试方法是写两行然后用&lt;code&gt;var_dump()&lt;/code&gt;调试，一小步一小步往前推进。对于&lt;code&gt;die()&lt;/code&gt;和&lt;code&gt;exit()&lt;/code&gt;两个函数，有的人认为出错了用前者，提前退出用后者，我觉得没有太大的必要去区分这一点。&lt;/p&gt;

&lt;p&gt;关于&lt;code&gt;die()&lt;/code&gt;和&lt;code&gt;exit()&lt;/code&gt;两个函数的用法，我觉得这一句话说得很好&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;在设计工具类和工具函数时，die()/exit() 应该严令禁止，因为它们无权决定整个程序的生死。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面这句话其实也反映了这两个函数与&lt;code&gt;return&lt;/code&gt;的区别，前者是程序级别的，后者仅仅是函数级别的。&lt;/p&gt;

&lt;p&gt;在我们的项目中后端是一个MVC框架(就是CI)，model层会根据前端传过来的各种信息进行初始化，为了容错，controller里经常会有这样的代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (!$this-&amp;gt;dataInfo-&amp;gt;is_inited){
	$jsonRst = -1;
	$jsonData = array();
	$jsonData[&#39;err&#39;][&#39;msg&#39;] =&#39;数据有误&#39;;
	echo $this-&amp;gt;exportData($jsonData,$jsonRst);
	return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码是ajax请求时常用的代码，然而，一个controller里的action里面可能会加载多个model，这样上面的代码就会重复N遍，以至于可能真正的业务部分真的没有几行大部分都是在容错，虽说每次都是复制粘贴，但复制粘贴多了就想着封装这个功能。&lt;/p&gt;

&lt;p&gt;需求就有了，我希望能在model层里面封装一个小方法，专门用来检查初始化是否成功，如果初始化失败返回数据错误，controller里的其他代码就不运行了。为什么要单独写一个函数而不是封装在初始化函数中呢？一是因为初始化是初始化、查错是查错，二是因为上面的的代码只适用于ajax返回错误。那&lt;code&gt;return false;&lt;/code&gt;能不能满足我的需求？答案是不能，这只是终止这个小方法的运行，controller还会继续，除非手动写ifelse判断，然而这样和没封装似乎也差不了几行。我的解决方案是使用&lt;code&gt;exit()&lt;/code&gt;,这样如果初始化失败controller里的代码也不会往下走了。最终封装在model基类里的代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function check_inited_for_ajax{
	$CI =&amp;amp; get_instance();
	if(!$this-&amp;gt;is_inited){
		$jsonRst = -1;
		$jsonData = array();
		$jsonData[&#39;err&#39;][&#39;msg&#39;] =&#39;数据有误&#39;;
		echo $CI-&amp;gt;exportData($jsonData,$jsonRst);
		exit();
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;类似的，对于非ajax请求，可以封装一个类似的函数，导入到404页面&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function check_inited_for_href(){
    $CI =&amp;amp; get_instance();
    if(!$this-&amp;gt;is_inited){
        $CI-&amp;gt;topTyp = &amp;quot;gobacktop&amp;quot;;
        $CI-&amp;gt;top_title = &amp;quot;出错啦&amp;quot;;
        echo $CI-&amp;gt;load-&amp;gt;view(&#39;default_page&#39; ,[&#39;contents&#39;=&amp;gt;$CI-&amp;gt;load-&amp;gt;view(&#39;common/notFound&#39;,[],true)], true);
        exit();
    }  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在我们的项目中有一个Template类，是对CI的load-&amp;gt;view进行的封装，通常想要加载一个页面是这样写的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$this-&amp;gt;template-&amp;gt;load(&#39;default_page&#39;, &#39;activity/showLottery&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最开始想在加载404页面的时候使用这个类，但一直无法输出页面，当时对于CI的理解还很浅，所以上面的&lt;code&gt;check_inited_for_href&lt;/code&gt;方法输出页面那一行写的很难读，现在明白默认条件下是在output类进行输出页面的，输出页面这个动作在controller执行完成后，但是如果初始化失败就在controller里退出脚本了，显然不会输出页面。&lt;/p&gt;

&lt;p&gt;修改后的代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function check_inited_for_href(){
    $CI =&amp;amp; get_instance();
    if(!$this-&amp;gt;is_inited){
        $CI-&amp;gt;topTyp = &amp;quot;gobacktop&amp;quot;;
        $CI-&amp;gt;top_title = &amp;quot;出错啦&amp;quot;;
        echo $CI-&amp;gt;template-&amp;gt;load(&#39;default_page&#39;, &#39;common/404&#39;,&#39;&#39;,TRUE);
        exit();
    }
    return $this;  		
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;距离最开始写这篇文章大约已经半年了，代码也经历了进一步封装，把大部分逻辑从model层转移到了controller层，因为model初始化数据失败是数据异常的一种特殊情况。之前提及过，像CI这样的MVC框架controller层可以分为四层，第一层是框架的controller，第二层是框架的扩展，本身只是技术代码，不涉及业务代码，第三层是业务逻辑代码公有部分，第四层是具体的业务逻辑。&lt;code&gt;exit&lt;/code&gt;其实在第三层可以有比较大的用途，目前用的比较多的一个是上面的错误数据过滤，一个是权限校验，这两个都是常规的需求。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>