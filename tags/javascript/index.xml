<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on jsmeta</title>
    <link>http://jiangshanmeta.github.io/tags/javascript/</link>
    <description>Recent content in Javascript on jsmeta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Jul 2016 20:33:24 +0800</lastBuildDate>
    <atom:link href="http://jiangshanmeta.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>bootstrap源码解读——collapse.js</title>
      <link>http://jiangshanmeta.github.io/post/bootstrap/collapse/</link>
      <pubDate>Fri, 08 Jul 2016 20:33:24 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/bootstrap/collapse/</guid>
      <description>&lt;p&gt;最近工作忙，好不容易闲下来身体又出bug了，好久没更新了。接着读bootstrap的代码，今天要说的是collapse.js。这个插件实现的展开与收缩效果。&lt;/p&gt;

&lt;p&gt;先看一下data-api&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(document).on(&#39;click.bs.collapse.data-api&#39;, &#39;[data-toggle=&amp;quot;collapse&amp;quot;]&#39;, function (e) {
	var $this   = $(this)

	if (!$this.attr(&#39;data-target&#39;)) e.preventDefault()

	var $target = getTargetFromTrigger($this)
	var data    = $target.data(&#39;bs.collapse&#39;)
	var option  = data ? &#39;toggle&#39; : $this.data()

	Plugin.call($target, option)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;具体绑定的方式和之前分析的alert、button差不多，都是利用事件委托机制。具体的回调函数比较复杂了。collapse.js设定了两种绑定展开收缩对象的形式，一种是通过a标签的&lt;code&gt;href&lt;/code&gt;属性，另一种是通过&lt;code&gt;data-target&lt;/code&gt;属性，并且还封装了一个小函数&lt;code&gt;getTargetFromTrigger&lt;/code&gt;找到对应的绑定元素。如果是通过&lt;code&gt;href&lt;/code&gt;属性指定展开收缩对象的话，需要阻止默认事件，至于阻止的是啥，还用我说嘛。然后的三行就写的比较巧妙了，先获取data上面保存的信息，然后如果之前保存过collapse的实例，给*option*赋值为&amp;rsquo;toggle&amp;rsquo;,如果没有，赋值为一个对象。为什么要返回一个data的对象？一开始我也没想明白，看到插件的具体内容才想明白为什么要加这个，因为这个插件还负责实现手风琴效果，手风琴效果总归需要一个包裹元素吧，这里的实现是通过&lt;code&gt;data-parent&lt;/code&gt;来决定这个包裹元素是谁。如果是最简单的展开收缩效果，option里面的只会有toggle，对于手风琴效果会对一个parent，针对这个parent有一些额外的操作。&lt;/p&gt;

&lt;p&gt;然后是Plugin的实现&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Plugin(option) {
	return this.each(function () {
	  var $this   = $(this)
	  var data    = $this.data(&#39;bs.collapse&#39;)
	  var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == &#39;object&#39; &amp;amp;&amp;amp; option)

	  if (!data &amp;amp;&amp;amp; options.toggle &amp;amp;&amp;amp; /show|hide/.test(option)) options.toggle = false
	  if (!data) $this.data(&#39;bs.collapse&#39;, (data = new Collapse(this, options)))
	  if (typeof option == &#39;string&#39;) data[option]()
	})
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bootstrap的插件基本上是按照一个模板出来的。在bootstrap插件里第一次见到使用&lt;code&gt;$.extend&lt;/code&gt;方法，使用过jquery的人应该了解这是合并对象用的，原生js的一个实现是&lt;code&gt;Object.assign&lt;/code&gt;，只是有点兼容问题。而且这里重新利用了&lt;strong&gt;toggle&lt;/strong&gt;属性，通过判断是否需要调用toggle方法，看Collapse构造函数就会明白这样会保证如果传入的不是&lt;code&gt;show&lt;/code&gt;或者&lt;code&gt;hide&lt;/code&gt;这两个字符串，就会&lt;strong&gt;toggle&lt;/strong&gt;一次。如果传入的是字符串，会调用相关方法。&lt;/p&gt;

&lt;p&gt;上面说的是写法上的巧妙之处，然而重点是这个展开收缩是如何实现的，在文档上有这么一句&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Collapse requires the transitions plugin to be included in your version of Bootstrap.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;就是说展开收缩效果是通过CSS3过渡实现的，我曾经想过如果用纯CSS实现这种展开收缩效果，但是由于&lt;code&gt;height&lt;/code&gt;无法从&lt;code&gt;auto&lt;/code&gt;过渡到一个具体数字，所以只能用有点hack意味的方案，我最终采用的是过渡&lt;code&gt;transform&lt;/code&gt;的&lt;code&gt;scale&lt;/code&gt;，这样有个问题的别的元素会认为这个元素依然是占据原来的大小。bootstrap的解决方案利用了js。&lt;/p&gt;

&lt;p&gt;当调用&lt;code&gt;show&lt;/code&gt;方法的时候，先做一些隔离，保证此时操作的元素处于hide状态。这时收缩状态的元素含有一个类&lt;code&gt;collapse&lt;/code&gt;，对应内容是&lt;code&gt;display:none&lt;/code&gt;，然后&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.$element
  .removeClass(&#39;collapse&#39;)
  .addClass(&#39;collapsing&#39;)[dimension](0)
  .attr(&#39;aria-expanded&#39;, true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;移除&lt;code&gt;collapse&lt;/code&gt;这个类，这时候元素理应正常显示，这里强行设定高度为0，等一下我再吐槽这个&lt;code&gt;dimension&lt;/code&gt;，顺便吐槽&lt;code&gt;collapsing&lt;/code&gt;这个类。现在这个需要展开的元素高度为0，我们需要确定最终高度，bootstrap的实现我觉得挺巧的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var scrollSize = $.camelCase([&#39;scroll&#39;, dimension].join(&#39;-&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;它是利用scrollHeight来确定最终高度的，初始高度、最终高度有了，过渡的最基本的条件就有了。过渡完成后的回调其实也比较有意思&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var complete = function () {
  this.$element
    .removeClass(&#39;collapsing&#39;)
    .addClass(&#39;collapse in&#39;)[dimension](&#39;&#39;)
  this.transitioning = 0
  this.$element
    .trigger(&#39;shown.bs.collapse&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;移除了&lt;code&gt;collapsing&lt;/code&gt;这个类，添加&lt;code&gt;collapse&lt;/code&gt;和&lt;code&gt;in&lt;/code&gt;两个类，并且把高度设置为默认值。为什么要这么做？因为以后这个展开收缩区域可能会动态添加或者删除内容，此时写死高度就有些不合适了。&lt;/p&gt;

&lt;p&gt;对应的&lt;code&gt;hide&lt;/code&gt;方法基本过程类似，其实只要看明白一个另一个也就差不多了。说一下要说的几点&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.$element[dimension](this.$element[dimension]())[0].offsetHeight
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之前说过，无法实现、&lt;strong&gt;height&lt;/strong&gt;的从&lt;strong&gt;auto&lt;/strong&gt;到一个数值的过渡，我们需要获取元素的具体高度，这里还强行重绘了一次，保证把高度值从auto转换为具体的数值，之前&lt;code&gt;show&lt;/code&gt;方法里其实也强行重绘了一次，是在利用&lt;code&gt;scrollHeight&lt;/code&gt;获得高度的时候。其他的基本上就是&lt;code&gt;show&lt;/code&gt;方法的逆过程了。&lt;/p&gt;

&lt;p&gt;下面开始预告的吐槽&lt;/p&gt;

&lt;p&gt;在上面的解说中，我是直接把&lt;code&gt;dimension&lt;/code&gt;说成是&lt;code&gt;height&lt;/code&gt;，我们还是看代码把&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Collapse.prototype.dimension = function () {
	var hasWidth = this.$element.hasClass(&#39;width&#39;)
	return hasWidth ? &#39;width&#39; : &#39;height&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dimension就是上面几行代码的返回值，水平方向的展开收缩虽然不多见，但也总归是有，但是呢，你看你的控制过渡的类&lt;code&gt;collapsing&lt;/code&gt;的内容&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.collapsing {
  position: relative;
  height: 0;
  overflow: hidden;
  -webkit-transition-timing-function: ease;
       -o-transition-timing-function: ease;
          transition-timing-function: ease;
  -webkit-transition-duration: .35s;
       -o-transition-duration: .35s;
          transition-duration: .35s;
  -webkit-transition-property: height, visibility;
       -o-transition-property: height, visibility;
          transition-property: height, visibility;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你们写js的和写css的看来不是一个人啊，根本没实现对于宽度过渡的支持啊，你们。。。。&lt;/p&gt;

&lt;p&gt;这其实都是小事，我觉得一个让我很迷惑的问题是为啥&lt;code&gt;visibility&lt;/code&gt;这个属性也能过渡？于是&lt;a href=&#34;http://www.zhangxinxu.com/wordpress/2013/05/transition-visibility-show-hide/&#34;&gt;张鑫旭大神又解释过这个问题了&lt;/a&gt;。其中张鑫旭前辈提到了应用场景&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;举个例子，我们要实现淡入淡出效果，显然是需要改变透明度的，但是，元素即使透明度变成0，虽然肉眼看不见，但是，在页面上，元素还是可以点击，还是可以覆盖其他元素的，这显然是有问题的，我们最最希望的是在元素淡出动画结束后，元素可以自动隐藏！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;个人觉得他对&lt;code&gt;opacity:0;&lt;/code&gt;和&lt;code&gt;visibility:hidden&lt;/code&gt;的区别没有说清楚。这时候就要搬出&lt;a href=&#34;http://stackoverflow.com/a/273076&#34;&gt;stackoverflow上的回答&lt;/a&gt;。这两个都是不脱离文档流，但是前者依然响应事件，而后者不响应事件。不过回到这个插件里来，并没有用到&lt;code&gt;visibility&lt;/code&gt;的过渡。&lt;/p&gt;

&lt;p&gt;主体内容差不多就完了，关于手风琴效果的具体实现，以及其他的细节自己去看源码吧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>bootstrap源码解读——button.js</title>
      <link>http://jiangshanmeta.github.io/post/bootstrap/button/</link>
      <pubDate>Sun, 26 Jun 2016 20:22:23 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/bootstrap/button/</guid>
      <description>&lt;p&gt;button.js我个人觉得是属于从一开始就没想明白要做什么。和其他的bootstrap的插件一样，button也能用data的形式调用插件，但是我真心没想明白使用data调用的有什么实际用途。反而我觉得手动调用的对我来说更有实际意义，所以这里只说&lt;a href=&#34;http://v3.bootcss.com/javascript/#buttons-stateful&#34;&gt;button.js改变状态的部分&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在web应用中免不了用户触发ajax请求，比如提交表单（实际项目中没有用表单的直接提交，而是使用了ajax提交表单），点击加载更多。在ajax过程中我们需要告诉用户正在进行中，需要等待。在实际项目中为了实现这一个需求我们使用了一个插件blockUI,可以自行百度一下，我觉得挺好用的。另一种方案是改变button的状态，把他标记为不可点击。&lt;/p&gt;

&lt;p&gt;整体形式是标准的bootstrap插件的形式，关于如何绑定方法，如何防冲突，这些都在 &lt;a href=&#34;http://jiangshanmeta.github.io/post/bootstrap/alert/&#34;&gt;bootstrap源码解读——alert.js&lt;/a&gt;中分析过了，没有必要去做过多的说明。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Plugin(option) {
  return this.each(function () {
    var $this   = $(this)
    var data    = $this.data(&#39;bs.button&#39;)
    var options = typeof option == &#39;object&#39; &amp;amp;&amp;amp; option

    if (!data) $this.data(&#39;bs.button&#39;, (data = new Button(this, options)))

    if (option == &#39;toggle&#39;) data.toggle()
    else if (option) data.setState(option)
  })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;和alert.js类似，这里也是采用data的形式进行缓存&lt;code&gt;Button&lt;/code&gt;实例，我们不需要去关心&lt;code&gt;toggle&lt;/code&gt;的实现，因为我连应用场景都没想到，我们只需关心调用&lt;code&gt;setState&lt;/code&gt;方法。setState传入的参数其实只有&lt;code&gt;loading&lt;/code&gt;和&lt;code&gt;reset&lt;/code&gt;是有效的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Button.prototype.setState = function (state) {
  var d    = &#39;disabled&#39;
  var $el  = this.$element
  var val  = $el.is(&#39;input&#39;) ? &#39;val&#39; : &#39;html&#39;
  var data = $el.data()

  state += &#39;Text&#39;

  if (data.resetText == null) $el.data(&#39;resetText&#39;, $el[val]())

  // push to event loop to allow forms to submit
  setTimeout($.proxy(function () {
    $el[val](data[state] == null ? this.options[state] : data[state])

    if (state == &#39;loadingText&#39;) {
      this.isLoading = true
      $el.addClass(d).attr(d, d)
    } else if (this.isLoading) {
      this.isLoading = false
      $el.removeClass(d).removeAttr(d)
    }
  }, this), 0)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;读起来并不是很难懂，一个要注意的地方是&lt;code&gt;setTimeout&lt;/code&gt;，这个函数一方面会改变&lt;code&gt;this&lt;/code&gt;的指向，我以前也分析过&lt;a href=&#34;http://jiangshanmeta.github.io/post/jsthis/&#34;&gt;javascript的this坑&lt;/a&gt;，另一方面是定时器的原理，不是相隔多长时间后执行，而是相隔多长时间后加入任务队列，这个&lt;a href=&#34;http://jiangshanmeta.github.io/post/browser/&#34;&gt;我以前也提及过&lt;/a&gt;。另一个要注意的点是data的使用，利用data保存button中原来的内容就不说了，很常规的一个写法。比较有趣的是对于加载时显示内容的处理。文档上说加载时保存的信息保存在了&lt;code&gt;data-loading-text&lt;/code&gt;中，但是我们在代码中读取的时候是以&lt;code&gt;loadingText&lt;/code&gt;的形式读写，这就比较有意思了，一个中划线没了，然后一个大小写改变了。查了查MDN找到了答案：&lt;/p&gt;

&lt;p&gt;data-*,*可以被任何符合以下限制的the producton rule of xml names(xml的命名规则)代替：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;名字不能以xml开头，除此之外其他任何情形都可是使用这3个字母；&lt;/li&gt;
&lt;li&gt;名字不能含有分号；&lt;/li&gt;
&lt;li&gt;名字不能含有大写字母。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;注意：HTMLElement.dataset是一个 StringMap。一个名叫data-test-value的自定义属性可以通过HTMLElment.dataset.testValue来访问，属性的名字中的中线(U+002D)被挨着它字母的大写字母代替了（驼峰命名）。&lt;/p&gt;

&lt;p&gt;自定义的data 属性名称转化成 DOMStringMap 的键值时会遵循下面的规则：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;前缀  data- 被去除(包括减号)；&lt;/li&gt;
&lt;li&gt;对于每个在ASCII小写字母 a到 z前面的减号 (U+002D)，减号会被去除，并且字母会转变成对应的大写字母。其他字符（包含其他减号）都不发生变化&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;具体链接: &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes#attr-data-*&#34;&gt;data-*&lt;/a&gt;,&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dataset&#34;&gt;dataset&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>bootstrap源码解读——alert.js</title>
      <link>http://jiangshanmeta.github.io/post/bootstrap/alert/</link>
      <pubDate>Thu, 23 Jun 2016 21:59:53 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/bootstrap/alert/</guid>
      <description>&lt;p&gt;之前已经&lt;a href=&#34;http://jiangshanmeta.github.io/post/bootstrap/transition/&#34;&gt;解读过bootstrap的transition.js&lt;/a&gt;，今天继续解读alert插件。&lt;/p&gt;

&lt;p&gt;bootstrap的alert插件从功能上看并不复杂，就是让一个警告框消失，所以重要的不是这个功能。重要的是bootstrap如何通过data属性使用插件的，以及bootstrap的插件是如何暴露方法和事件的。&lt;/p&gt;

&lt;p&gt;先解答第一个问题，直接上代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var dismiss = &#39;[data-dismiss=&amp;quot;alert&amp;quot;]&#39;
$(document).on(&#39;click.bs.alert.data-api&#39;, dismiss, Alert.prototype.close)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;利用事件委托，监听&lt;code&gt;document&lt;/code&gt;的click事件，然后子元素的选择器是&lt;code&gt;[data-dismiss=&amp;quot;alert&amp;quot;]&lt;/code&gt;。第一个问题回答完毕。利用data的形式使用bootstrap的插件是官方推荐的，当然也可以手动调用，虽然我觉得这样的需求很少。手动调用需要了解方法是如何暴露的。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Plugin(option) {
	return this.each(function () {
	  var $this = $(this)
	  var data  = $this.data(&#39;bs.alert&#39;)

	  if (!data) $this.data(&#39;bs.alert&#39;, (data = new Alert(this)))
	  if (typeof option == &#39;string&#39;) data[option].call($this)
	})
}

$.fn.alert             = Plugin
$.fn.alert.Constructor = Alert
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果写过jquery插件，对这种形式应该很熟悉，在jquery的prototype上添加了alert方法，这样就暴露了&lt;code&gt;alert&lt;/code&gt;方法。手动调用&lt;code&gt;alert&lt;/code&gt;方法的时候，首先会确保data上面挂着一个&lt;code&gt;Alert&lt;/code&gt;实例，挂在data上面是为了缓存这么一个实例。如果传入了参数，则调用&lt;code&gt;Alert&lt;/code&gt;对应方法。个人认为不传参数的情况其实用的不多，传参手动关闭警告框有实际应用价值。以前自己写jq插件的时候，对于面向对象的理解不是很到位，对于jq插件的写法了解的也少，这种写法值得学习。&lt;/p&gt;

&lt;p&gt;看一下Alert构造函数的具体内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Alert   = function (el) {
$(el).on(&#39;click&#39;, dismiss, this.close)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;和上面在&lt;code&gt;document&lt;/code&gt;上做的差不多，都是监听click事件做事件委托。&lt;/p&gt;

&lt;p&gt;Alert的原型上有具体的&lt;code&gt;close&lt;/code&gt;方法，在这个方法里定义了两个事件&lt;code&gt;close.bs.alert&lt;/code&gt; 和&lt;code&gt;closed.bs.alert&lt;/code&gt;，看一下源代码吧&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Alert.prototype.close = function (e) {
	var $this    = $(this)

	var selector = $this.attr(&#39;data-target&#39;)
	if (!selector) {
	  selector = $this.attr(&#39;href&#39;)
	  selector = selector &amp;amp;&amp;amp; selector.replace(/.*(?=#[^\s]*$)/, &#39;&#39;) 
	}
	var $parent = $(selector)
	if (e) e.preventDefault()
	if (!$parent.length) {
	  $parent = $this.closest(&#39;.alert&#39;)
	}

	$parent.trigger(e = $.Event(&#39;close.bs.alert&#39;))

	if (e.isDefaultPrevented()) return

	$parent.removeClass(&#39;in&#39;)

	function removeElement() {
	  // detach from parent, fire event then clean up data
	  $parent.detach().trigger(&#39;closed.bs.alert&#39;).remove()
	}

	$.support.transition &amp;amp;&amp;amp; $parent.hasClass(&#39;fade&#39;) ?
	  $parent
	    .one(&#39;bsTransitionEnd&#39;, removeElement)
	    .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
	  removeElement()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先做的是寻找关闭时要移除的元素，查找的优先顺序是 data-target、href、最近的含有&lt;code&gt;alert&lt;/code&gt;类的元素。在官方文档里其实并没有提及前两种情况，事实上第三种情况更接近实际需求。对于警告框的删除，一种是有过渡效果的，一种是没有过渡效果的。有过渡效果的情况警告框含有&lt;code&gt;fade&lt;/code&gt;和&lt;code&gt;in&lt;/code&gt;两个类并支持过渡，可以在相关css文件看一下代码，就是实现透明度从1过渡到0 。没过渡效果的情况可能是根本不支持css3过渡，也可能是没有&lt;code&gt;fade&lt;/code&gt;这个类。有过渡效果的是在过渡完成后删除警告框，没有过渡的直接删除了，无过渡代码里没有尝试对淡出效果进行模拟。两个事件分别是在移除前和移除后触发的，注意&lt;code&gt;removeElement&lt;/code&gt;的具体实现，先是detach，然后触发事件，最后remove，说实话这两个方法的区别我还体会不深，求大神指教。在实现过渡时使用了transition.js里提供的emulateTransitionEnd，为的是保证回调能够顺利执行。&lt;/p&gt;

&lt;p&gt;最后是防冲突，自己看源码吧，写的挺巧妙的，旧的函数和新的函数都能很好地得到保存。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>bootstrap源码解读——transition.js</title>
      <link>http://jiangshanmeta.github.io/post/bootstrap/transition/</link>
      <pubDate>Wed, 22 Jun 2016 19:07:30 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/bootstrap/transition/</guid>
      <description>&lt;p&gt;bootstrap是一个出名的前端框架，它预制了一些常见的js插件。从头开始解读吧。&lt;/p&gt;

&lt;p&gt;这里要介绍的是transition.js，它的作用是对css3的过渡的兼容处理。&lt;/p&gt;

&lt;p&gt;立即执行的匿名函数就不说了，算是基本常识了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function transitionEnd() {
	var el = document.createElement(&#39;bootstrap&#39;)

	var transEndEventNames = {
	  WebkitTransition : &#39;webkitTransitionEnd&#39;,
	  MozTransition    : &#39;transitionend&#39;,
	  OTransition      : &#39;oTransitionEnd otransitionend&#39;,
	  transition       : &#39;transitionend&#39;
	}

	for (var name in transEndEventNames) {
	  if (el.style[name] !== undefined) {
	    return { end: transEndEventNames[name] }
	  }
	}

	return false 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这一段是对transitionend事件做兼容，如果浏览器支持各种形式的transitionend，就以对象的形式返回兼容后的结果，否则返回false，表明不支持transitionend事件，另一层意思就是不支持css3过渡。&lt;/p&gt;

&lt;p&gt;之前我收集过一个类似功能的函数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function whichTransitionEvent(){  
    var t;  
    var el = document.createElement(&#39;p&#39;);  
    var transitions = {  
      &#39;transition&#39;:&#39;transitionend&#39;,  
      &#39;OTransition&#39;:&#39;oTransitionEnd&#39;,  
      &#39;MozTransition&#39;:&#39;mozTransitionEnd&#39;,  
      &#39;WebkitTransition&#39;:&#39;webkitTransitionEnd&#39;,  
      &#39;MsTransition&#39;:&#39;msTransitionEnd&#39;  
    }  
    for(t in transitions){  
        if( el.style[t] !== undefined ){  
            return transitions[t];  
        }  
    }  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后是调用上面那个函数，并且为transitionend起了一个别名。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(function () {
$.support.transition = transitionEnd()

if (!$.support.transition) return

$.event.special.bsTransitionEnd = {
  bindType: $.support.transition.end,
  delegateType: $.support.transition.end,
  handle: function (e) {
    if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
  }
}
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里把最终的transitionend事件挂到了$.support.transition上，相当于一个缓存。然后是一段让我很纠结的代码，$.event.special.bsTransitionEnd是干啥的的？搜索了一下中文文章发现虽然有提的但是完全不靠谱（这么不靠谱的文章竟然有一堆转载），然后我就在&lt;a href=&#34;http://stackoverflow.com/questions/29861597/what-is-jquery-event-special/29867037#29867037&#34;&gt;stackoverflow上找到了答案&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;它的意思是这里的bsTransitionEnd相当于兼容后的transitionend事件的别名。为什么要去一个别名而不是直接使用兼容后的transitionend呢？因为怕你我手抖移除transitionend事件的时候不传具体的回调而是直接移除整个事件然后bootstrap插件的回调也一并移除然后报bug。算是为了代码的健壮性吧。&lt;/p&gt;

&lt;p&gt;还有一段代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.fn.emulateTransitionEnd = function (duration) {
	var called = false
	var $el = this
	$(this).one(&#39;bsTransitionEnd&#39;, function () { called = true })
	var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
	setTimeout(callback, duration)
	return this
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$.fn.emulateTransitionEnd，看这个形式是直接挂到了jquery的prototype上了。看函数名猜测这一段代码是为了模拟transitionend事件的。不理解作者想干啥，但是&lt;a href=&#34;https://blog.alexmaccaw.com/css-transitions&#34;&gt;源码中给了一个连接&lt;/a&gt;，于是我就找来这篇博客看，原作者是这么说的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be aware that sometimes this event doesn’t fire, usually in the case when properties don’t change or a paint isn’t triggered. To ensure we always get a callback, let’s set a timeout that’ll trigger the event manually.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;换句话说作者是为了保证即使没有过渡也要触发transitionend事件保证相应的回调能够执行。其实我很怀疑为什么要这么做，毕竟这种情况下应该测试会报bug。&lt;/p&gt;

&lt;p&gt;具体实现上called变量保存的是transitionend是否被触发，这个变量的存在是为了保证transitionend只触发一次。可能触发多次的情况一个是transition多个属性会触发多个transitionend事件，另一个是真的transitionend事件已经触发，不需要模拟transitionend。一些具体的细节上可以结合setTimeout以及jquery的相关内容理解。突然想到之前写的&lt;a href=&#34;http://jiangshanmeta.github.io/demo/myWork/org/h5page/h5page.html&#34;&gt;h5页面&lt;/a&gt;里面也是监听了transitionend事件，可以参照这个思路改一改。&lt;/p&gt;

&lt;p&gt;顺便提一句，上面那篇文章提到了强制重绘，有一句话我觉得很好&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This will work in most browsers, but I’ve had occasions in Android where this hasn’t been enough. The alternative is to either use timeouts, or by toggling a class name.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;就在上个周我就遇到了这个问题，强制重绘在pc上测试没问题，在微信内置浏览器上就报bug，最终解决方案也是使用定时器，&lt;a href=&#34;http://jiangshanmeta.github.io/demo/myWork/mobile/lottery/index.html&#34;&gt;实现的代码&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;transition.js内容不多，就只有三块，但是却是bootstap js插件非常重要的一环，后面只要用到css过渡的插件都依赖transition.js。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>百度Touch.js代码解读</title>
      <link>http://jiangshanmeta.github.io/post/touchjs/</link>
      <pubDate>Mon, 06 Jun 2016 20:46:09 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/touchjs/</guid>
      <description>

&lt;p&gt;在移动端各种手势事件很常见，然而不幸的是原生的js只提供了touchstart、touchmove、touchend、touchcancel这么几个事件的。所以我们需要手势库帮助我们判断手势。&lt;a href=&#34;https://github.com/Clouda-team/touch.code.baidu.com&#34;&gt;百度的touch&lt;/a&gt;是其中一个例子。之所以选择它是因为在之前的hammer我连文档都读不下去，中文文档实在是太有诱惑力了。然而hammer推荐的比例挺高的，还是抽空去看看吧。&lt;/p&gt;

&lt;p&gt;touch.js主要分为以下几块，第一个是工具函数，第二个是底层事件代理，第三个是手势判断。虽然这是一个手势库，但是自己资历尚浅，没有从具体的手势判断中读出多少东西，所以主要说一下前两个部分。&lt;/p&gt;

&lt;p&gt;先看一下封装的一些工具函数，代码中把工具函数封装到了&lt;code&gt;utils&lt;/code&gt;这个对象中。&lt;/p&gt;

&lt;h2 id=&#34;工具函数:8c3dfd5f7a431f6dbb28cd40ffd93e79&#34;&gt;工具函数&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;utils.PCevts = {
    &#39;touchstart&#39;: &#39;mousedown&#39;,
    &#39;touchmove&#39;: &#39;mousemove&#39;,
    &#39;touchend&#39;: &#39;mouseup&#39;,
    &#39;touchcancel&#39;: &#39;mouseout&#39;
};
utils.hasTouch = (&#39;ontouchstart&#39; in window);
utils.getPCevts = function(evt) {
    return this.PCevts[evt] || evt;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这几个函数是为了兼容PC的，&lt;code&gt;&#39;ontouchstart&#39; in window&lt;/code&gt;是用来检测是否有touch事件的，进而判断是移动端还是pc端，这个写法其实挺常见的，而PCevts相当于是一个兼容PC事件的config，getPCevts这一工具函数会获得pc对应事件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;utils.getType = function(obj) {
    return Object.prototype.toString.call(obj).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个工具函数是用来判断变量类型的，这是js的一个很坑的地方，最简单的&lt;code&gt;typeof&lt;/code&gt;关键字只能判断基本类型，引用类型没法区别。&lt;code&gt;Object.prototype.toString.call(obj)&lt;/code&gt;返回的是一个形如&lt;code&gt;[object Number]&lt;/code&gt;的字符串，后面的正则是用来匹配字符串中的&lt;code&gt;Number&lt;/code&gt;这一区域的，并将其小写化。这一个方法可以用来判断基本类型和引用类型。我见过的类似的实现不是使用正则而是使用截取字符串的方法，其实大同小异，都是对字符串进行处理。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;utils.matchSelector = function(target, selector) {
    return target.webkitMatchesSelector(selector);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从&lt;a href=&#34;http://caniuse.com/#search=matchess&#34;&gt;can I use&lt;/a&gt;查到的兼容性来看兼容性问题还勉强能接受，然而touch是大约两年前写的。这里的&lt;code&gt;webkitMatchesSelector&lt;/code&gt;只考虑了webkit内核，根据&lt;a href=&#34;https://dom.spec.whatwg.org/#dom-element-matches&#34;&gt;文档的说法&lt;/a&gt;，这个方法只是历史遗留下来，是&lt;code&gt;matches&lt;/code&gt;方法的等价品。&lt;/p&gt;

&lt;p&gt;如果从现在的角度来看应该这么写&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;utils.matchSelector = function(target, selector) {
    if(target.matches){
        return target.matches(selector);
    }else if(target.webkitMatchesSelector){
        return target.webkitMatchesSelector(selector);
    }else if(target.msMatchesSelector){
        return target.msMatchesSelector(selector);
    }
    
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;chrome浏览器没问题，但是安卓浏览器，IE，还有万恶的微信内置浏览器都要兼容一下。这个方法以前也知道，但是没有用过，通常都是判断是否满足某个class。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;utils.forceReflow = function() {
    var tempDivID = &amp;quot;reflowDivBlock&amp;quot;;
    var domTreeOpDiv = document.getElementById(tempDivID);
    if (!domTreeOpDiv) {
        domTreeOpDiv = document.createElement(&amp;quot;div&amp;quot;);
        domTreeOpDiv.id = tempDivID;
        document.body.appendChild(domTreeOpDiv);
    }
    var parentNode = domTreeOpDiv.parentNode;
    var nextSibling = domTreeOpDiv.nextSibling;
    parentNode.removeChild(domTreeOpDiv);
    parentNode.insertBefore(domTreeOpDiv, nextSibling);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看名字也能看的出来是用来强制重绘的，重绘的原理是一个没内容的空div，先移除，再插回到原来的位置。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;utils.simpleClone = function(obj) {
    return Object.create(obj);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;原型式继承，实现对obj的浅复制&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;utils.getPosOfEvent = function(ev) {
    if (this.hasTouch) {
        var posi = [];
        var src = null;

        for (var t = 0, len = ev.touches.length; t &amp;lt; len; t++) {
            src = ev.touches[t];
            posi.push({
                x: src.pageX,
                y: src.pageY
            });
        }
        return posi;
    } else {
        return [{
            x: ev.pageX,
            y: ev.pageY
        }];
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个工具函数的作用是获得事件的坐标，并存在一个array中。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;utils.getXYByElement = function(el) {
    var left = 0,
        top = 0;

    while (el.offsetParent) {
        left += el.offsetLeft;
        top += el.offsetTop;
        el = el.offsetParent;
    }
    return {
        left: left,
        top: top
    };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个方法返回了元素相对于页面的位置。具体内容可以参见&lt;strong&gt;《JavaScript 高级程序设计（第三版）》&lt;/strong&gt;第十二章的有关内容&lt;/p&gt;

&lt;p&gt;还有几个工具函数是关于数学计算的，以及判断事件类型的，没什么太大提及的必要。&lt;/p&gt;

&lt;h2 id=&#34;整体结构及手势判断:8c3dfd5f7a431f6dbb28cd40ffd93e79&#34;&gt;整体结构及手势判断&lt;/h2&gt;

&lt;p&gt;曾经我在写一个h5页面页面之间切换的js的时候，尝试着写手势判断，但是我写的太笨了。我当时是在element上绑定了touchstart、touchmove、touchend几个事件，在我自己的应用场景下没什么问题，因为最终我只是绑定在了document这一个元素之上。但是如果要绑定手势事件的元素特别多，就有性能问题了。touch的处理就比较巧妙，它只在document上绑定了touchstart、touchmove、touchend、touchcancel几个事件，然后利用&lt;code&gt;event.target&lt;/code&gt;获取触发事件的元素，在相应元素上触发手势事件。道理大家都懂，只是别人用的巧啊。&lt;/p&gt;

&lt;p&gt;整体结构的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(function(root, factory) {
    if (typeof define === &#39;function&#39; &amp;amp;&amp;amp; (define.amd || define.cmd)) {
        define(factory); //Register as a module.
    } else {
        root.touch = factory();
    }
}(this, function() {

    function init(){
        var mouseEvents = &#39;mouseup mousedown mousemove mouseout&#39;,
            touchEvents = &#39;touchstart touchmove touchend touchcancel&#39;;
        var bindingEvents = utils.hasTouch ? touchEvents : mouseEvents;

        bindingEvents.split(&amp;quot; &amp;quot;).forEach(function(evt) {
            document.addEventListener(evt, handlerOriginEvent, false);
        });
    }
    init();
    var exports = {};

    exports.on = exports.bind = exports.live = _on;
    exports.off = exports.unbind = exports.die = _off;
    exports.config = config;
    exports.trigger = _dispatch;

    return exports;

}))

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;整体上是一个匿名函数自执行。一开始判断define是否为函数，如果是则注册为模块，如果不是则向window对象上添加一个全局变量touch，touch的内容是返回的exports，在文档里看到的on、off、config、trigger就是出自这里。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;init函数&lt;/code&gt; 首先判断环境是移动环境还是PC环境，据此绑定事件。绑定事件到&lt;code&gt;document&lt;/code&gt;上，具体的回调函数是&lt;code&gt;handlerOriginEvent&lt;/code&gt;，在这个函数内部根据具体条件调用封装在&lt;code&gt;gesture&lt;/code&gt;里的方法，算是对手势事件的整体掌控+分流吧。在gesture内部根据条件在&lt;code&gt;event.target&lt;/code&gt;上触发手势事件。&lt;/p&gt;

&lt;p&gt;具体的手势判断过于复杂，我也没读出太多的东西出来，等以后理解深入了再说吧。&lt;/p&gt;

&lt;h2 id=&#34;底层事件处理:8c3dfd5f7a431f6dbb28cd40ffd93e79&#34;&gt;底层事件处理&lt;/h2&gt;

&lt;p&gt;底层事件处理是判断手势的基础，也是暴露给开发者的几个接口&lt;code&gt;on&lt;/code&gt;,&lt;code&gt;off&lt;/code&gt;,&lt;code&gt;trigger&lt;/code&gt;的基础。事实上只要能够理解底层事件是如何处理的，就自然明白那几个暴露的接口是如何写的了。&lt;/p&gt;

&lt;p&gt;作者封装了一个&lt;code&gt;engine&lt;/code&gt;，进行了对事件的底层处理。
基本结构是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var engine = {
	proxyid: 0,
    proxies: [],
    trigger: function(el, evt, detail) {

	},
	bind: function(el, evt, handler) {

	},
	unbind: function(el, evt, handler) {

	},
	delegate: function(el, evt, sel, handler) {

	},
	undelegate: function(el, evt, sel, handler) {

	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为我向来喜欢手动代理事件，所以后两个方法直接没用过，也没有什么想用的欲望。主要讲前三个方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;trigger: function(el, evt, detail) {

    detail = detail || {};
    var e, opt = {
            bubbles: true,
            cancelable: true,
            detail: detail
        };

    try {
        if (typeof CustomEvent !== &#39;undefined&#39;) {
            e = new CustomEvent(evt, opt);
            if (el) {
                el.dispatchEvent(e);
            }
        } else {
            e = document.createEvent(&amp;quot;CustomEvent&amp;quot;);
            e.initCustomEvent(evt, true, true, detail);
            if (el) {
                el.dispatchEvent(e);
            }
        }
    } catch (ex) {
        console.warn(&amp;quot;Touch.js is not supported by environment.&amp;quot;);
    }
},

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;浏览器内置的事件类型数量有限，所幸允许我们自定义事件，这也是我们能够写手势库的前提。&lt;/p&gt;

&lt;p&gt;我曾经封过一个类似的小函数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var triggerEvent = function (el, eventName, detail) {
    var event = document.createEvent(&amp;quot;CustomEvent&amp;quot;);
    event.initCustomEvent(eventName, true, true, detail);
    if(typeof detail == &amp;quot;object&amp;quot;){
    	for( k in detail){
    		if(detail.hasOwnProperty(k)){
    			event[k]=detail[k]
    		}
    	}
    }
    el.dispatchEvent(event);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;基本思路大差不差，只是这里为了模仿jQuery里的event将detail里的内容都挂到了event上面。在touch.js里面也有类似的操作，是在绑定事件里面，稍后就会提到。看到这里基本就已经把相关的&lt;code&gt;_dispatch&lt;/code&gt;函数给讲完了。说实话，我看到的资料里没有讲到过&lt;code&gt;new CustomEvent(evt, opt)&lt;/code&gt;,只有其中的&lt;code&gt;document.createEvent(&amp;quot;CustomEvent&amp;quot;)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;然后是绑定事件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind: function(el, evt, handler) {
    el.listeners = el.listeners || {};
    if (!el.listeners[evt]) {
        el.listeners[evt] = [handler];
    } else {
        el.listeners[evt].push(handler);
    }
    var proxy = function(e) {
        if (utils.env.ios7) {
            utils.forceReflow();
        }
        e.originEvent = e;
        for (var p in e.detail) {
            if (p !== &#39;type&#39;) {
                e[p] = e.detail[p];
            }
        }
        e.startRotate = function() {
            __rotation_single_finger = true;
        };
        
        var returnValue = handler.call(e.target, e);
        if (typeof returnValue !== &amp;quot;undefined&amp;quot; &amp;amp;&amp;amp; !returnValue) {
            e.stopPropagation();
            e.preventDefault();
        }
    };
    handler.proxy = handler.proxy || {};
    if (!handler.proxy[evt]) {
        handler.proxy[evt] = [this.proxyid++];
    } else {
        handler.proxy[evt].push(this.proxyid++);
    }
    this.proxies.push(proxy);
    if (el.addEventListener) {
        el.addEventListener(evt, proxy, false);
    }
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其实我觉得这是整个touch.js里最关键的一个方法。&lt;/p&gt;

&lt;p&gt;我以前尝试写的时候直接在元素上绑定了相应的回调函数，但是touch给这个回调函数包裹了一层代理，在这个代理内部调用了对应的回调函数。element身上绑定的不是原来的回调函数，而是这一层代理。这样做有什么好处呢？一个是改写event对象。上面提及的我封装的&lt;code&gt;triggerEvent&lt;/code&gt;也做了类似的事情。这里作者把&lt;code&gt;detail&lt;/code&gt;对象上的东西挂到了&lt;code&gt;event&lt;/code&gt;对象上，这也是为什么文档里提及的&lt;code&gt;event&lt;/code&gt;对象上新增的属性的来源。在jQuery也有类似的改写event对象，原理目测大同小异。另一方面做一些兼容，这里判断是否是iOS7然后强制重绘了，不知道hack的是什么。看库有时候就这样，完全不清楚作者想hack什么地方。&lt;/p&gt;

&lt;p&gt;具体调用原始回调函数是使用&lt;code&gt;call&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var returnValue = handler.call(e.target, e);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;作者还对调用原始回调的返回值做了处理&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (typeof returnValue !== &amp;quot;undefined&amp;quot; &amp;amp;&amp;amp; !returnValue) {
    e.stopPropagation();
    e.preventDefault();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我认为作者考虑到有人喜欢用&lt;code&gt;return false&lt;/code&gt;阻止默认事件和阻止事件冒泡。然后手动做了这两个操作。然而我不太明白的是判断的写法，直接判断返回值是否为&lt;code&gt;false&lt;/code&gt;不行吗？不知道作者还在考虑什么。&lt;/p&gt;

&lt;p&gt;proxyid和proxies这两个是为了接触绑定而存在的，这是因为实际绑定的回调不是原来的回调，我们要解除事件绑定需要解除的是绑定的代理事件，明确这一点就知道他的解除绑定是如何写的了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript的this坑</title>
      <link>http://jiangshanmeta.github.io/post/jsthis/</link>
      <pubDate>Thu, 02 Jun 2016 21:36:26 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/jsthis/</guid>
      <description>&lt;p&gt;JavaScript有许多坑，一个典型的代表就是this，动不动this的指向就变了。&lt;/p&gt;

&lt;p&gt;我也不想扯太多理论性的东西，那些是属于看着明白看完就忘的。我想干脆找个例子去说一下吧。今天在某个前端群里看到有人问相关问题。干脆就借用别人遇到的问题说一下吧。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/this/right.png&#34; alt=&#34;最原始的代码&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这是最原始的代码。目测是在一个构造函数里截取的一段。这张图里的this我想大家都很明白，而在回调函数里，出现的不是this，而是_this,目测是对上面this的保存。因为在回调里，this已经指向了ul_wrap，和外面的this不一样了。&lt;/p&gt;

&lt;p&gt;然后群里的人想改这段代码称为如下的样子&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/this/wrong.png&#34; alt=&#34;想要改成的代码&#34; /&gt;&lt;/p&gt;

&lt;p&gt;下面是报错信息&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/this/error.png&#34; alt=&#34;报错信息&#34; /&gt;&lt;/p&gt;

&lt;p&gt;下面是里面提到的几个回调的具体实现&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/this/prototype.png&#34; alt=&#34;prototype&#34; /&gt;&lt;/p&gt;

&lt;p&gt;看报错信息是出在 touchMove 和touchEnd两个内部对move方法的调用上。
那么，目测应该有一段是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UcanSlide.prototype.move=function(){
	//do something
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那就很明确问题在哪里了。修改代码之后，其实就相当于&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.ul_wrap.addEventListener(&amp;quot;touchmove&amp;quot;,function(e){
	e.preventDefault();
	this.autoScroll = false;
	this.dirX+=e.targetTouches[0].clientX-this.startX;
	this.startX=e.targetTouches[0].clientX;
	this.move();
},false);
this.ul_wrap.addEventListener(&amp;quot;touchend&amp;quot;,function(e){
	var _this = this;
	this.autoScroll = true;
	this.setTime = setInterval(function(){
		_this.move();
	},_this.scrollSpeed)
},false)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样写就看的明白多了。现在回调内部的this指的是ul_wrap，而不是外面的this，而move方法是在外面的this上的，而不是ul_wrap上的，所以内部调用move方法相当于调用ul_wrap的move方法，显然会报错。&lt;/p&gt;

&lt;p&gt;还有值得一提的是在touchend的回调里先是缓存了当前的this，因为在setInterval的回调里this也飘了，指向了window。&lt;/p&gt;

&lt;p&gt;js的this坑其实也不算什么坑，熟悉了就好了。&lt;/p&gt;

&lt;p&gt;//话说我的表达能力还是too young啊&lt;/p&gt;

&lt;p&gt;//update 2016/6/3
于是今天的项目中就用到了缓存this&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>前端需要知道的WEB知识（1）</title>
      <link>http://jiangshanmeta.github.io/post/browser1/</link>
      <pubDate>Mon, 23 May 2016 21:49:52 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/browser1/</guid>
      <description>&lt;p&gt;之前无意间触发了一个bug，让我开始接触浏览器相关的知识。搞web开发的如果不了解浏览器的基本知识，不了解一个网页是如何形成的，以及如何展示的，基本上也就到天花板了。&lt;/p&gt;

&lt;p&gt;今天并不想从发起一个http请求开始讲起，战线会拉的太长。就从web服务器返回页面开始讲起吧。&lt;/p&gt;

&lt;p&gt;浏览器接收到服务器返回的HTML，开始按顺序进行解析，先是head部分，再是body部分。&lt;/p&gt;

&lt;p&gt;在head部分，可能会遇到&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 或者 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;,会发起相应的http请求对应的文件，在相应的文件下载之后，渲染才会继续进行，在这一段期间浏览器的状态是一片白。一些常见的web优化就是根据这个原因进行的。比如对CSS文件和JS文件进行压缩，这样可以减少请求文件的体积，从而减少传输时间。又比如CSS文件或者JS文件该合并的进行合并，这样可以减少http请求，而http请求会带来额外的开销。还有是一些js文件从head中移除，放到body中，这样可以先让用户看点东西，不至于一片白然后一怒之下关网页。&lt;/p&gt;

&lt;p&gt;然后就是解析body进行渲染了。这里我想借助一幅图说明&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/browser.png&#34; alt=&#34;浏览器渲染原理&#34; /&gt;&lt;/p&gt;

&lt;p&gt;简单来说就是HTML解析器生成DOM，CSS解析器生成CSSOM，然后层叠，布局绘制，最终展示成为我们所看到的页面。&lt;/p&gt;

&lt;p&gt;再上张图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/browser2.png&#34; alt=&#34;浏览器渲染原理&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其中大部分的工作对于web开发者来说都是不可控的，只有控制DOM和并不好用的样式操作对web开发者是可控的，其余的都是只能按照规则来。然而&lt;a href=&#34;https://zhuanlan.zhihu.com/p/20939640&#34;&gt;知乎上有篇文章指出这一现状可能会被改善&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;虽然绘制的过程目前是无法控制只能看浏览器心情，有些基本概念还是要了解的。&lt;/p&gt;

&lt;p&gt;当DOM的变化影响了元素的几何属性，浏览器需要重新计算元素的几何属性，同样其他元素的几何属性和位置也会受到影响。浏览器会使渲染树的受到影响的部分失效，并重新构造渲染树。这个过程称为&lt;strong&gt;重排(reflow)&lt;/strong&gt;。完成重排后，浏览器会重新绘制受到影响的部分到屏幕中，这个过程称为&lt;strong&gt;重绘(repaint)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;显然，重排一定会导致重绘，重绘却不一定意味着重排。从前端性能优化的角度来看，我们需要尽可能减少重绘重排这样昂贵的操作。从CSS的角度上来讲，似乎能做的不多，我能想到的是利用&lt;code&gt;outline&lt;/code&gt;或者&lt;code&gt;box-shadow&lt;/code&gt;这样不影响元素几何属性的属性模拟一些几何属性，比如边框，不能减少重绘但是能减少重排。可能说的不太明白，还是上代码吧。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;div class=&amp;quot;box&amp;quot;&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.box{
	width:300px;
	margin-left:20px;
}
.box:hover{
	border:1px solid #ccc;
	margin-left:19px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以将CSS优化成&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.box{
	width:300px;
	margin-left:20px;
}
.box:hover{
	outline:1px solid #ccc;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在js部分减少重绘重排能做的就比较多了。&lt;/p&gt;

&lt;p&gt;1.缓存布局信息，减少对布局信息的请求。可能会有人问了，难道对布局信息请求会强制重绘？我想引用*高性能JavaScript*中的一段话回答&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;由于每次重排都会产生计算消耗，大多数浏览器通过队列化修改并批量执行来优化重排过程。然而，你可能会（经常不知不觉）强制刷新队列并要求计划任务立即执行。获取布局信息的操作会导致队列刷新。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2.批量处理样式操作。利用cssText属性可以合并一些操作。如果可以通过添加类名改变样式的话尽可能控制类名而不是具体的style。&lt;/p&gt;

&lt;p&gt;3.利用documentFragment优化。这个我现在用的不多。&lt;/p&gt;

&lt;p&gt;4.还有搞前端最喜欢玩的，能用CSS实现的就不要用JS。不细说，自己体会。&lt;/p&gt;

&lt;p&gt;从浏览器的重绘重排扯到了前端性能优化，我觉得还是扯回来吧&lt;/p&gt;

&lt;p&gt;在&lt;a href=&#34;http://jiangshanmeta.github.io/post/browser/&#34;&gt;上篇文章&lt;/a&gt;中，我提到了线程问题。当时找的资料有点杂，我觉得还是引用一些书籍上的话加深理解吧&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;大多数浏览器让一个单线程共用于执行javascript和更新用户界面。每个时刻只能执行其中一种操作，这意味着当javascript代码正在执行时用户界面无法相应输入，反之亦然。当javascri代码执行时，用户界面处于“锁定”状态。&lt;/p&gt;

&lt;p&gt;用于执行javascript和更新用户界面的进程通常被称为“浏览器UI线程”。UI线程的工作基于一个简单的队列系统，任务会被保存到队列中直到进程空闲。一旦空闲，队列中的下一个任务就被重新提出来并运行。这些任务要么是运行javascript代码，要么是执行UI更新，包括重绘和重排。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>一个bug引发的血案—浏览器基本渲染</title>
      <link>http://jiangshanmeta.github.io/post/browser/</link>
      <pubDate>Sun, 22 May 2016 17:05:41 +0800</pubDate>
      
      <guid>http://jiangshanmeta.github.io/post/browser/</guid>
      <description>&lt;p&gt;作为全知乎写bug水平第0的人，最近我又写了一个bug。&lt;/p&gt;

&lt;p&gt;当时的需求是这样的：用js和CSS3画一个时钟，能动的那种。很早很早之前，我用&lt;a href=&#34;http://jiangshanmeta.github.io/demo/myWork/canvas/canvasWatch.html&#34;&gt;canvas实现过这个需求&lt;/a&gt;,然而canvas毕竟需要各种写js，而且实现上也需要大量的计算，于是我就想能不能用尽可能少的js结合CSS实现。&lt;/p&gt;

&lt;p&gt;于是开始分解问题，我想实现的时钟和本地时间相对应，无论如何都要把Date对象拿出来然后求出当前的时分秒，然后进行初始偏转，再利用web动画进行转动即可，三个指针虽然在实际生活上有联系，但是把这三个割裂开会降低复杂度。只要求出当时的秒数，然后画出秒针的动画，99%的工作就完成了，时针和分针的效果只需要复制粘贴就能解决。&lt;/p&gt;

&lt;p&gt;HTML是这样的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;div class=&amp;quot;clock-wrap&amp;quot; id=&amp;quot;clock-wrap&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;second&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CSS&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-CSS&#34;&gt;.clock-wrap{
	width:300px;
	height:300px;
	border-radius:50%;
	background-color:#f1f1f1;
	position:relative;
}
.second{
	position:absolute;
	width:4px;
	height:40%;
	top:10%;
	left:calc(50% - 2px);
	transform-origin:bottom center;
	transition:all 60s linear;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在就出现了基本的时钟的样子了，剩下的就是写js了。然而，当时着急去洗澡，于是写下了bug。我试着回忆当时的思路，然而我觉得当时自己脑子里已经进了水。当时想的是根据当前时间算出初始偏离角度，写一条样式，然后根据初始偏移角度算出最终角度，写一条过渡后的样式，然后添加类名，利用类名触发过渡。代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function cssclock(wrapId){
	var time = new Date();
	var s = time.getSeconds();

	var sDOM = document.getElementById(&amp;quot;second&amp;quot;);
	var wrap = document.getElementById(wrapId);
	var style = document.createElement(&amp;quot;style&amp;quot;);
	var str = &amp;quot;&amp;quot;;
	str += &amp;quot;.second{transform:rotate(&amp;quot;+  6*s +&amp;quot;deg)}&amp;quot;;
	str += &amp;quot;.go .second{ transform:rotate(&amp;quot; + (6*s+360) + &amp;quot;deg)}&amp;quot;;
	style.innerHTML = str;
	document.head.appendChild(style);
	wrap.classList.add(&amp;quot;go&amp;quot;);
}
cssclock(&amp;quot;clockwrap&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显然是有bug的，按照这个思路实现根本不会有过渡效果，就算有也只是转一圈。转一圈很好理解，这是我脑子里进水了整个思路错了，然而为什么根本没有过渡呢？&lt;/p&gt;

&lt;p&gt;看控制台那里秒针样式秒针的转动的值直接是最终值，于是我便百思不得其解了。后来尝试着把最后一行给表的盒子加上类名去掉，然后在控制台手动给这个盒子加上类名，发现可以触发过渡。&lt;/p&gt;

&lt;p&gt;于是我就脑洞大开了，难道是要在添加样式表完成的回调里执行给盒子添加类名的操作，然而appendChild没有回调啊，那干脆加个定时器过一会再加类名好了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;setTimeout(function(){
 	document.getElementById(wrapId).classList.add(&amp;quot;go&amp;quot;);
},0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实践证明确实是可行的，然而诡异的事情又来了：当我把定时器的时间设为 &lt;strong&gt;0&lt;/strong&gt; 依然可以触发过渡，于是我就不明觉厉了。&lt;/p&gt;

&lt;p&gt;然后我想起来之前看到的&lt;a href=&#34;https://github.com/gomeplusFED/blog/blob/master/2016-04/do-you-really-understand-how-to-write-a-countdown-by-javascript.md&#34;&gt;关于定时器的文章&lt;/a&gt;,里面谈到了js的线程问题，于是我便顺着这条线索开始找。&lt;/p&gt;

&lt;p&gt;中间的曲折没什么意思，还是说结论吧。&lt;/p&gt;

&lt;p&gt;因为浏览器内部有多个线程，比如负责画页面的线程，比如处理js的线程。画页面的线程 GUI渲染线程大体上是以每秒60次的速度工作的，这就是定时器常见的 16.7ms （1000/60）的由来,然而，渲染线程和js引擎线程是互斥的，这是为什么呢？因为js很有可能对DOM操作，这期间免不了获取一些渲染上的属性，比如width之类的，如果两个一起工作，js获取的就可能不准，所以两者是互斥的。&lt;/p&gt;

&lt;p&gt;我上面的js代码里，将新的样式添加进去，我本来是期望秒针按照&lt;code&gt;.second&lt;/code&gt;类的样式进行渲染，然后给盒子加上&lt;code&gt;.go&lt;/code&gt;这一个类，触发过渡。但是按照上面的分析，直到js结束都没有进行页面的渲染，js结束后整个盒子已经加上了&lt;code&gt;.go&lt;/code&gt;类，渲染开始，因为已经存在&lt;code&gt;.go&lt;/code&gt;类了，渲染按照过渡结束的进行。&lt;/p&gt;

&lt;p&gt;那么我用的定时器是起到什么作用？定时器设定时间为0，并不是立即去做，而是在0ms之后加入到js的todo队列中，也就是说添加完样式表后，js暂时休息，之前本应该干活但因为js干活而休息的GUI渲染开始工作，进行初始偏移，js的队列里出现定时器中要运行的代码，进行添加类名操作，触发过渡。&lt;/p&gt;

&lt;p&gt;那有没什么办法在js里强制渲染一次再进行后续操作呢？有啊，比如说取一个宽度就能强制渲染一次，这是定时器方案的一个替代方案。这也是为什么用js做动画要缓存一些变量的原因，为了减少不必要的重绘重排。以前too young，too simple啊，还需要提高知识水平。&lt;/p&gt;

&lt;p&gt;语文不太好，引用别人的话总结一下&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一个浏览器至少实现三个常驻线程：JavaScript引擎线程，GUI渲染线程，浏览器事件触发线程。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;javascript引擎是基于事件驱动单线程执行的，JS引擎一直等待着任务队列中任务的到来，然后加以处理，浏览器无论什么时候都只有一个JS线程在运行JS程序。&lt;/li&gt;
&lt;li&gt;GUI渲染线程负责渲染浏览器界面，当界面需要重绘（repaint）或由于某种操作引发回流(reflow)时,该线程就会执行。但需要注意 GUI渲染线程与JS引擎是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。&lt;/li&gt;
&lt;li&gt;事件触发线程，当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理。这些事件可来自JavaScript引擎当前执行的代码块如setTimeOut、也可来自浏览器内核的其他线程如鼠标点击、AJAX异步请求等，但由于JS的单线程关系所有这些事件都得排队等待JS引擎处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;扯了这么多也没有写到最开始的需求该如何实现，反正实现了，用了些最近学到的技巧，然而这个bug让我学到的更多，毕竟前端不仅仅是写写页面写写js，浏览器的工作原理也要理解一些的。&lt;/p&gt;

&lt;p&gt;以上。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>