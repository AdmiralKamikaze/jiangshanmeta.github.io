<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Networking on jsmeta</title>
    <link>https://jiangshanmeta.github.io/tags/computer-networking/</link>
    <description>Recent content in Computer Networking on jsmeta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Aug 2016 20:48:45 +0800</lastBuildDate>
    <atom:link href="https://jiangshanmeta.github.io/tags/computer-networking/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>初识链路层</title>
      <link>https://jiangshanmeta.github.io/post/computernetwork/mac/</link>
      <pubDate>Mon, 15 Aug 2016 20:48:45 +0800</pubDate>
      
      <guid>https://jiangshanmeta.github.io/post/computernetwork/mac/</guid>
      <description>

&lt;p&gt;数据链路层是五层协议栈的第二层，其实对于一般的web开发已经离得有点远了（至少在目前的我看来是这样的），而且个人学习起来这一层感觉东西略杂，尽可能抽出一点主线来吧，并且尽可能对比其它层的协议，这样能加深理解。首先要介绍的是MAC地址的概念。&lt;/p&gt;

&lt;h2 id=&#34;mac地址:7be74c584635419861677fc2502187c9&#34;&gt;MAC地址&lt;/h2&gt;

&lt;p&gt;其实MAC地址这个概念还是比较大众的，它的作用和网络层中的IP地址类似，是对链路层的唯一标示。你可能会问通过IP地址就已经能标示到唯一的主机（网络层接口了），何苦再加一层呢？原因比较复杂，这里就说一个我比较认同的理由，是为了分层，出于分层的考虑网络层的寻址和数据链路层的寻址就应该独立的，而且网络层也不仅仅是IP协议啊。&lt;/p&gt;

&lt;p&gt;介绍完MAC地址的作用，接下来要介绍的是MAC地址到底长什么样了。MAC地址是一个48位的二进制数（而IP地址仅有32位），一个网卡对应的MAC地址不是由什么协议动态分配的，而是出厂就设定好了的，换句话说MAC地址是物理层面一块网卡的唯一标示，类似于人的身份证号（对比IP地址，IP地址需要利用DHCP从DHCP获取）。&lt;/p&gt;

&lt;p&gt;有了之前传输层（源端口号、目的端口号）、网络层（源IP地址、目的IP地址）的经验，很自然我们会想到数据链路层的报文中会含有源MAC地址和目的MAC地址。源MAC地址很好获得，毕竟是网卡一出生就带有的，那目的MAC地址是如何获得的呢？这就需要请出ARP来了。&lt;/p&gt;

&lt;h2 id=&#34;arp:7be74c584635419861677fc2502187c9&#34;&gt;ARP&lt;/h2&gt;

&lt;p&gt;ARP协议的作用类似于DNS，根据IP地址返回对应的MAC地址。发送方构建ARP报文，包含源和目的IP、MAC地址。你可能会说，目的IP可以通过DNS、DHCP获得，这个目的MAC地址不是我们要查找的吗，怎么会在发送报文里出现（类似的问题在DHCP中也遇到过）。既然在DHCP中也遇到过，在那里我们提到了一个广播IP地址（255.255.255.255）的概念，我们很容易猜想到也应该有个广播MAC地址的概念，显然确实是有，对应为 &lt;code&gt;FF-FF-FF-FF-FF-FF&lt;/code&gt;，48位全为1，这样同一个局域网内的主机都会收到ARP报文，但是只有IP地址和目的地址一致的才会作出相应，返回MAC地址。&lt;/p&gt;

&lt;p&gt;源主机得到这条IP地址到MAC地址的映射关系之后，不会只用这么一次然后以后用到的时候再去查询一遍，而是维护一个ARP表表示这种映射关系。（类似结构的表已经见过不少次了，比如DNS、NAT、路由转发表）。&lt;/p&gt;

&lt;p&gt;上面介绍的时候我加了一个限制词：&lt;strong&gt;在同一个局域网内&lt;/strong&gt;，那要出了局域网怎么办？根据目的主机IP地址找对应的MAC地址？答案是不行的。要想出这个子网需要通过网关（通过DHCP可以获得默认网关IP地址，再通过ARP获得默认网关的的MAC地址），网关那里查询路由转发表，根据下一跳IP地址同样通过ARP获得相应的MAC地址，也就是说每经过一次路由器链路层的目的MAC地址都会被改写。&lt;/p&gt;

&lt;h2 id=&#34;以太网:7be74c584635419861677fc2502187c9&#34;&gt;以太网&lt;/h2&gt;

&lt;p&gt;局域网可以大体分为有线局域网和无线局域网，以太网几乎占领了有线局域网。&lt;/p&gt;

&lt;p&gt;仅仅从以太网帧的角度来看这并不复杂，以太网帧包含上层数据、源MAC地址、目的MAC地址、类型（类似于IP报文中的上层协议、TCP/UDP报文中的端口号）、CRC（功能上类似于各层的校验和字段，但是实现上不太一致）、前同步码。&lt;/p&gt;

&lt;p&gt;以太网比较复杂的一个问题是如何让多个节点共享一个广播链路，即多路访问问题。解决这个问题有许多方案，每个方案也有许多变种，目前的我认为没有必要去关心如何实现的，我们仅需知道能够解决碰撞带来的问题即可。&lt;/p&gt;

&lt;h2 id=&#34;链路层交换机:7be74c584635419861677fc2502187c9&#34;&gt;链路层交换机&lt;/h2&gt;

&lt;p&gt;让我们把目光集中到一个子网内，看一下子网内的主机是如何互联起来的。既然是子网内，就没有路由器什么事了，设备只有链路层交换机。每台主机与链路层交换机相连，链路层交换机既可以与主机相连，也可以与其他链路层交换机相连。对于主机而言，链路层交换机是透明的，在一个子网内传递报文，只需要目的主机的MAC地址与IP地址即可，不需要这个链路层交换机的MAC地址（链路层交换机本身不具有MAC地址这个概念）。数据到达链路层交换机，那链路层交换机根据什么决定到哪条出链路上的呢？这个问题形式上看起来很熟悉，路由器的转发功能和这个简直是如出一辙，路由器转发是根据路由转发表，路由转发表由路由协议进行维护更新，数据链路层也有一个类似的交换机表，但这个表中的数据不是由什么协议维护的，而是交换机自学习得到的。&lt;/p&gt;

&lt;p&gt;下面解释一下这个自学习是怎么回事。当一条数据通过接口A经过交换机的时候，交换机可以读取到报文中的源MAC地址B，这样在转发表中就记录一条 如果目的MAC地址是B，则通过A接口转发。这条记录也有一个类似TTL的概念，用于更新交换机表。&lt;/p&gt;

&lt;p&gt;当数据通过交换机时，如果在交换机表中有一条记录，那显然转发到响应接口上，根据上面说的自学习这点不难理解。如果没有相应记录，交换机就在所有链路上广播该报文，让主机自行决定是否是目的主机 。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>网际协议</title>
      <link>https://jiangshanmeta.github.io/post/computernetwork/ip/</link>
      <pubDate>Tue, 02 Aug 2016 23:26:56 +0800</pubDate>
      
      <guid>https://jiangshanmeta.github.io/post/computernetwork/ip/</guid>
      <description>

&lt;p&gt;IPv4协议&lt;/p&gt;

&lt;p&gt;计算机网络的网络层主要功能是&lt;strong&gt;转发&lt;/strong&gt;和&lt;strong&gt;路由&lt;/strong&gt;，转发是将分组从一个输入链路接口转移到合适的输出链路接口的路由器本地动作，路由是指网络范围内的过程，以决定分组从源到目的地所采取的端到端路径。&lt;/p&gt;

&lt;p&gt;合适的输出路径是如何确定的？输出链路是通过查询转发表根据&lt;strong&gt;最长前缀匹配规则&lt;/strong&gt;进行确定的。转发表是根据路由选择协议设定的，并且是动态更新的，换句话说，源和目的地址相同的两个IP报文，可能走不同的路线，因而不能保证先后顺序。&lt;/p&gt;

&lt;p&gt;那这个&lt;strong&gt;最长前缀匹配规则&lt;/strong&gt;又是什么？为了讲清楚这个，首先需要对IP地址有一定的基础了解。&lt;/p&gt;

&lt;h2 id=&#34;ipv4地址:0e7497b6083b31ad5d27a662a672d7d3&#34;&gt;IPv4地址&lt;/h2&gt;

&lt;p&gt;之前我&lt;a href=&#34;http://jiangshanmeta.github.io/post/computernetwork/dhcp/&#34;&gt;描述了计算机如何获取IP地址&lt;/a&gt;，在那里对IP地址做了最基本的描述。&lt;/p&gt;

&lt;p&gt;IPv4地址是一个32位的二进制数字，为了便于人类阅读，通常我们按照&lt;strong&gt;点分十进制记法&lt;/strong&gt;表示IP地址。一台主机的IP地址不是完全自由分配的，而是要根据其所在的子网进行分配。那么如何表示这个子网？如何表示子网大小？解决方案是将IP地址分为两部分，前面表示网络号，后面的表示主机号，表现为&lt;code&gt;a.b.c.d/x&lt;/code&gt;的形式。比如&lt;code&gt;233.233.233.0/24&lt;/code&gt;，这表示这个这个子网前24位是网络号，后面的8位才能分配给主机（有些特殊的号码不能分配，这个另说）。在window下查看当前所属子网前缀是多少位，可在cmd下输入&lt;code&gt;ipconfig&lt;/code&gt;，可以看到如下内容：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/computernetwork/ipconfig.jpg&#34; alt=&#34;ipconfig&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这显示我所在的子网前24位（子网掩码转换成二进制就是前24位都是1），图中所示的IP地址是&lt;code&gt;192.168.1.12&lt;/code&gt;，这是一个私有地址，全球现在应该有N个这么一个地址，这一点我稍后再说。&lt;/p&gt;

&lt;p&gt;在上古时期，还有A类网址、B类网址、C类网址的说法，从现在的角度来看就是上面说的几个特例而已，A类网址的子网掩码为&lt;code&gt;255.0.0.0&lt;/code&gt;，也就是说前八位为网络号，后24位为主机号，A类网址每个子网很大但是数量上比较少。B类网址子网掩码为&lt;code&gt;255.255.0.0&lt;/code&gt;，前16位为网络号，后16位为主机号，C类网址子网掩码为&lt;code&gt;255.255.255.0&lt;/code&gt;，我当前所属的就是个C网，前24位为网络号，后8位为主机号。C网数量很多但是每个子网的规模较小。其实对于A类网址、B类网址、C类网址，还有IP地址范围的限制，分别对应&lt;code&gt;0.0.0.0&lt;/code&gt;——&lt;code&gt;127.255.255.255&lt;/code&gt;、&lt;code&gt;128.0.0.0&lt;/code&gt;——&lt;code&gt;191.255.255.255&lt;/code&gt;、&lt;code&gt;192.0.0.0&lt;/code&gt;——&lt;code&gt;223.255.255.255&lt;/code&gt;。看到这你可能会问，应该还有空缺的位置啊，其实还有D类网址、E类网址，但是都不能作为公网地址。&lt;/p&gt;

&lt;p&gt;IP地址中还有一些特殊值，先以表格的形式归纳在这里&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;网络号&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;主机号&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;做源&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;做目标&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;全0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;全0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;在本网内部表示本机&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;全1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;全1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;本网内广播地址&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;特定值&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;全0&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;网络地址，表示一个网络&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;特定值&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;全1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;直接广播地址，对特定网络进行广播&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;127&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;非全0或非全1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;本地环回地址&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;对于前两个，在学习&lt;a href=&#34;http://jiangshanmeta.github.io/post/computernetwork/dhcp/&#34;&gt;&lt;strong&gt;DHCP&lt;/strong&gt;&lt;/a&gt;中已经遇到过了，&lt;code&gt;0.0.0.0&lt;/code&gt;表示本机，只能做源，&lt;code&gt;255.255.255.255&lt;/code&gt;表示本子网内的广播地址。后两个其实可以和前两个类比看，主机号全0表示当前网络，全1表示对这个网络进行广播，从另一个层面上看，不是所有合法数字都可以分配作为主机号，对于我这个C类网络，有8位主机号，并不意味着可以容纳2^8=256个ip，而是2^8-2=254个。最后一个对于搞web开发的人其实很熟悉，大家经常会看到&lt;code&gt;127.0.0.1&lt;/code&gt;就是一个环回地址。&lt;/p&gt;

&lt;p&gt;除了上面说的限制，还有私有地址的概念，上面截图中所示我的ip地址就处于一个私有网络中，对于A类网址、B类网址、C类网址，每一个均有一块作为私有地址，不能作为公网地址使用，C网的对应 &lt;strong&gt;192.168.0&lt;/strong&gt;——&lt;strong&gt;192.168.255&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;既然谈到私有地址的话题的，那我问个问题，为了实现主机到主机的逻辑通信，需要ip标示唯一主机，但是一个私有地址可以对应多台主机，那该怎么办？我们需要把私有地址映射到公有地址上去，这就需要下面要介绍的&lt;strong&gt;NAT&lt;/strong&gt;了。&lt;/p&gt;

&lt;h2 id=&#34;nat:0e7497b6083b31ad5d27a662a672d7d3&#34;&gt;NAT&lt;/h2&gt;

&lt;p&gt;NAT全称是网络地址转换，它的作用可以这么理解：NAT相当于是对整个子网进行了封装，在外界看来这个子网就像是一台主机，而不是多台设备。&lt;/p&gt;

&lt;p&gt;互联网的通信最终是应用进程和应用进程的通信，我们需要ip地址和端口号标示唯一的一个主机上的特定应用进程。使用了NAT，网络层报文的ip地址在路由器上被改写成路由器在公网上的地址，解决了私有地址不能在公网出现的问题，目标主机会把这台路由器当成是源主机看待，但是路由器上并不存在端口号对应的应用进程，我们需要把目标主机的返回报文传给真正的源主机，那又如何找到源主机呢？&lt;/p&gt;

&lt;p&gt;其实在报文进入公网的时候，不仅仅是ip地址被重写了，端口号也被重写了，新端口号和源主机ip及端口号的映射关系保存在&lt;strong&gt;NAT&lt;/strong&gt;转换表中。通过查询这张表即可找到源主机ip及源端口号。&lt;/p&gt;

&lt;p&gt;这么说可能比较晦涩，举个例子，我使用的这台主机的ip &lt;code&gt;192.168.1.12&lt;/code&gt;，在端口号2333发送一个报文到公网某个主机某个端口，这个地址是私有地址，通过了&lt;strong&gt;NAT路由器&lt;/strong&gt;之后网络层报文 源ip地址字段被修改成了路由器的公网ip，比如&lt;code&gt;233.233.233.233&lt;/code&gt;，然后根据源主机ip&lt;code&gt;192.168.1.12&lt;/code&gt;和源端口号2333生成一个新的端口号 5678，并在路由器中保存类似&lt;code&gt;5678=&amp;gt;[&#39;ip&#39;=&amp;gt;&#39;192.168.1.12&#39;,&#39;port&#39;=&amp;gt;2333]&lt;/code&gt;这样的一条记录，对于目的主机，它认为与自己通信的主机ip是&lt;code&gt;233.233.233.233&lt;/code&gt;，端口号是5678。到了&lt;strong&gt;NAT路由器&lt;/strong&gt;这里，发现端口号是5678，从&lt;strong&gt;NAT转换表&lt;/strong&gt;中找到真实源主机ip&lt;code&gt;192.168.1.12&lt;/code&gt;和真实端口号2333，然后修改报文把信息传给相应的进程。&lt;/p&gt;

&lt;p&gt;关于NAT其实有很多争议，作为强迫症晚期患者我最不能忍的是路由器这里竟然修改了传输层首部字段中的源端口号，说好的只到网络层呢。&lt;/p&gt;

&lt;h2 id=&#34;ipv4报文:0e7497b6083b31ad5d27a662a672d7d3&#34;&gt;IPv4报文&lt;/h2&gt;

&lt;p&gt;IPv4报文和传输层报文结构上很类似，都是上层传过来的数据加上一堆自己的首部。前面已经提到了IPv4报文中含有源主机IP地址，下面具体讲一下IPv4报文的首部字段。&lt;/p&gt;

&lt;p&gt;首先源主机IP地址和目的主机IP地址，这个就类似于传输层报文中的端口号，用于标示通信的主机。&lt;/p&gt;

&lt;p&gt;传输层用端口号标示要把报文向上传递到哪里，对于IPv4报文，起到类似作用的是一个上层协议字段，网络层通过这个字段知道把报文传到TCP还是UDP还是其他。&lt;/p&gt;

&lt;p&gt;类似于TCP报文，IPv4报文也包含一些选项（虽然基本用不上），所以需要首部长度字段表明首部的长度信息，一般的IPv4报文具有20字节的首部，即不包含任何的选项。这里我们可以比较一下UDP报文、TCP报文和IPv4报文：TCP报文和IPv4报文都具有可选的首部，所以需要首部长度字段来反应可选字段的使用情况跟，而UDP报文首部字段的数量是一定的，因而不需要这个字段。UDP报文和IPv4报文都有一个报文长度字段，但是TCP却没有，这又是为什么？因为TCP提供面向连接的可靠地数据传输，它有确认字段表明哪些字段被成功接收到了，而UDP和IPv4没有连接什么事，你不告诉对方你发了多少数据对方怎么知道要接收多少、处理多少。&lt;/p&gt;

&lt;p&gt;update 2016/08/11 稍微看了一下数据链路层的知识，这里补充一下，对于以太网的数据报文，其对所包含的数据有最小长度限度，如果长度不足会补齐，但这些填充的数据也会被提交给网络层的IP，因而需要长度字段找出哪些是真正的数据，哪些是填充。&lt;/p&gt;

&lt;p&gt;而TCP、UDP、IPv4报文都含有校验和字段检测比特错误，不过IPv4和UDP都不具有差错恢复机制，IPv4会通过下面要说的&lt;strong&gt;ICMP&lt;/strong&gt;进行报错。&lt;/p&gt;

&lt;p&gt;下面介绍的几个字段就比较复杂了，他们是 标识、标志、片偏移。之所以出现三个字段是因为网络层的下层数据链路层，因为数据链路层对于数据包的大小有不同的要求，可能出现这样的情况：输入链路的能容得下数据包，但是输出链路容不下，那怎么办，总不能把数据包就这么丢了是吧。于是路由器会把IPv4报文进行进一步分割成片，使输出链路能容得下，在最终的端系统中对分出来的片进行组装。标识字段相当于是IPv4报文的一个id，表明那些片是属于同一个IP报文里的，标志字段有两个作用，一个是表明允不允许进行分片操作，如果不允许容不下的情况下只能丢掉了，另一个作用是表明是否是最后一个分片。片偏移字段表示的是在原数据报中的位置。通过上面三个字段，我们就能把数据从片还原成原来的IP报文。&lt;/p&gt;

&lt;p&gt;在上面我一直在写IPv4报文，但是大家熟悉的不是IP吗，为啥我要强调v4，这牵扯到版本字段了，其实IPv6这个概念应该也不陌生，到这里就说出关键点了，有两种版本的IP报文格式，所以需要版本字段表明按哪种格式去解读报文。&lt;/p&gt;

&lt;p&gt;最后要介绍的是寿命字段，每经过一台路由器时，这个字段就要减1，当减到零的时候该数据报就要被丢弃。&lt;/p&gt;

&lt;h2 id=&#34;icmp:0e7497b6083b31ad5d27a662a672d7d3&#34;&gt;ICMP&lt;/h2&gt;

&lt;p&gt;ICMP通常被认为是IP的一部分，但是从体系结构上讲它应该和TCP、UDP并列，话句话说，ICMP报文是作为IP报文的有效载荷的，ICMP的主要功能是进行差错报告。&lt;/p&gt;

&lt;h2 id=&#34;从传输层角度看网络层:0e7497b6083b31ad5d27a662a672d7d3&#34;&gt;从传输层角度看网络层&lt;/h2&gt;

&lt;p&gt;网络层通过网际协议实现了转发功能，通过路由选择协议实现路由功能，然而路由选择的东西真的看起来比较虐心，我们先就只关心网际协议吧。&lt;/p&gt;

&lt;p&gt;对于传输层，把需要传输的东西交给网络层，然后坐等网络层把数据交给自己，但是网络层有时候并不能把一些数据传送给传输层，这里就根据我个人的理解，说一下网络层不能把数据传送给传输层的原因。&lt;/p&gt;

&lt;p&gt;第一个原因是在路由器因为排队原因发生的丢包。毕竟路由器处理能力是有限的。&lt;/p&gt;

&lt;p&gt;第二个原因是数据错误，丢弃数据包，主要是利用校验和字段。&lt;/p&gt;

&lt;p&gt;第三个原因是分片无法被组装。&lt;/p&gt;

&lt;p&gt;第四个原因是因为寿命字段被减为零，路由器丢弃数据包，出现这个现象的原因可能是转发表错误进入了网络中的无限循环。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DHCP</title>
      <link>https://jiangshanmeta.github.io/post/computernetwork/dhcp/</link>
      <pubDate>Mon, 01 Aug 2016 19:40:53 +0800</pubDate>
      
      <guid>https://jiangshanmeta.github.io/post/computernetwork/dhcp/</guid>
      <description>&lt;p&gt;在学习传输层的基本知识的时候，知道了传输层实现不同主机应用进程之间的逻辑通信，当时还与网络层比较，网络层实现的是不同主机间的逻辑通信，标记应用进程用端口号，标记主机用IP。严格来说IP标记的接口（主机与物理链路的边界），而不是主机与路由器（换句话说一台主机或者路由器可能有多个接口，对应多个IP），我这里并不严格区分。&lt;/p&gt;

&lt;p&gt;IP地址其实是IP（网际协议）的一部分，对于IP地址，即使是不搞计算机相关领域的人也应该听说过，我们一般写作形如 233.233.233.233 的形式，但这本质上是一个32位的二进制数，只是我们每8位看成一个整体，转换成十进制数字，才有了上面的形式。那一台主机刚接入计算机网络的时候，是如何获得IP地址的呢？&lt;/p&gt;

&lt;p&gt;一个方法是手动设置，在window下可以在如下界面进行设置&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/computernetwork/manualip.jpg&#34; alt=&#34;手动设置ip&#34; /&gt;&lt;/p&gt;

&lt;p&gt;不过对于广大人民群众（包括我）还是利用 &lt;strong&gt;DHCP&lt;/strong&gt; 动态获取IP地址的。下面的内容是描述如何通过 &lt;strong&gt;DHCP&lt;/strong&gt; 获取一个IP地址。&lt;/p&gt;

&lt;p&gt;首先，DHCP服务器发现。动态获得IP是通过&lt;strong&gt;DHCP服务器&lt;/strong&gt;分配的，对于一台新接入的计算机，显然要先找到这台服务器，那么问题来了，我怎么知道&lt;strong&gt;DHCP服务器&lt;/strong&gt;的IP（毕竟无论如何需要建立主机之间的逻辑通信）？答案是不知道，那就拿个大喇叭广播，我们使用 &lt;code&gt;255.255.255.255&lt;/code&gt; 作为目的地址，这样报文就会交付给同一个子网所有主机，并且此时这台主机没有IP地址，所以源地址是 &lt;code&gt;0.0.0.0&lt;/code&gt;。这时发送的报文称为 &lt;strong&gt;DHCP发现报文&lt;/strong&gt;，顺便说一句DHCP是基于UDP的。&lt;/p&gt;

&lt;p&gt;然后，DHCP服务器提供。广播的 &lt;strong&gt;DHCP发现报文&lt;/strong&gt; 子网内所有主机都会收到，但是只有 &lt;strong&gt;DHCP服务器&lt;/strong&gt; 会去做出响应。响应的报文称为 &lt;strong&gt;DHCP提供报文&lt;/strong&gt;，在这个报文中，源地址是这台服务器的地址，这点毫无疑问，目标地址是 &lt;code&gt;255.255.255.255&lt;/code&gt;，因为请求的主机此时还没有IP地址。那么问题来了，要接入网的主机通过什么知道这条信息是给自己的而不是给其它接入网的主机？通过 &lt;code&gt;transaction id&lt;/code&gt;，在&lt;strong&gt;DHCP发现报文&lt;/strong&gt; 里就包含这一信息，然后在 &lt;strong&gt;DHCP提供报文&lt;/strong&gt; 原样返回&lt;code&gt;transaction id&lt;/code&gt;。&lt;strong&gt;DHCP提供报文&lt;/strong&gt;里还会包含着一个分配到新客户的ip地址。&lt;/p&gt;

&lt;p&gt;随后，DHCP请求。由于一个子网可能会有多个&lt;strong&gt;DHCP服务器&lt;/strong&gt;，所以一条&lt;strong&gt;DHCP发现报文&lt;/strong&gt;可能会对应多条&lt;strong&gt;DHCP提供报文&lt;/strong&gt;，也就可能对应多个推荐ip地址。客户端需要选择一个最终的ip，发送&lt;strong&gt;DHCP请求报文&lt;/strong&gt;，因为可能有多个&lt;strong&gt;DHCP服务器&lt;/strong&gt;，所以采用的目的ip仍然是&lt;code&gt;255.255.255.255&lt;/code&gt;，通知最终结果，便于其他&lt;strong&gt;DHCP服务器&lt;/strong&gt;及时回收发出去的冗余ip地址。&lt;/p&gt;

&lt;p&gt;最后，DHCP服务器用 &lt;strong&gt;DHCP ACK报文&lt;/strong&gt;响应，进行最终确认。这样这台新接入的主机就获得了一个ip地址，同时获得的还有本地DNS服务器地址、网关地址。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>http连接控制</title>
      <link>https://jiangshanmeta.github.io/post/computernetwork/httptransportcontrol/</link>
      <pubDate>Tue, 26 Jul 2016 20:57:58 +0800</pubDate>
      
      <guid>https://jiangshanmeta.github.io/post/computernetwork/httptransportcontrol/</guid>
      <description>

&lt;p&gt;http是一个应用层协议，http所依赖的传输层协议是TCP，对于http，只需要把需要传递的信息通过套接字socket传递给传输层的TCP，然后就可以坐等TCP可靠的把数据传到目标主机的目标进程了，至于TCP是如何处理数据如何传输的，从应用层角度并不需要关心，&lt;a href=&#34;http://jiangshanmeta.github.io/post/computernetwork/transportlayer/&#34;&gt;我之前也对TCP如何实现功能给出了最简单的描述&lt;/a&gt;。然而http事务的性能很大程度上依赖TCP的性能，毕竟现在这个年代在端系统上处理数据一般很快，慢的是传输数据。那我们先看一下TCP哪些动作会引起时延，然后看提高http连接性能的技术。&lt;/p&gt;

&lt;h2 id=&#34;tcp引起时延的动作:bcf53f62b95030078a83e7b9bb07b9b2&#34;&gt;TCP引起时延的动作&lt;/h2&gt;

&lt;h4 id=&#34;建立tcp连接:bcf53f62b95030078a83e7b9bb07b9b2&#34;&gt;建立TCP连接&lt;/h4&gt;

&lt;p&gt;TCP是面向连接的，TCP在正式发送应用层信息之前需要与服务器端建立连接，建立连接的过程通常称为&lt;strong&gt;三次握手&lt;/strong&gt;，首先客户端发送一个&lt;strong&gt;SYN报文&lt;/strong&gt;请求建立连接、并携带一些初始化数据，服务器同意建立连接发送一个&lt;strong&gt;SYNACK报文&lt;/strong&gt;，上面说的两个报文都没有传递应用层的信息，只是为了建立连接交换一些必要的数据，直到第三次握手才传输应用层信息。&lt;/p&gt;

&lt;h4 id=&#34;延迟确认:bcf53f62b95030078a83e7b9bb07b9b2&#34;&gt;延迟确认&lt;/h4&gt;

&lt;p&gt;为了实现可靠传输，TCP采取了累积确认机制，但是确认功能和传递应用层信息是两个不同的功能，仅仅为确认报文正确到达就发送一个TCP报文是不合算的，所以会等待要发送的应用层信息，尝试捎带确认信息。这一机制成为&lt;strong&gt;延迟确认&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&#34;慢启动:bcf53f62b95030078a83e7b9bb07b9b2&#34;&gt;慢启动&lt;/h4&gt;

&lt;p&gt;慢启动其实是TCP拥塞控制的一部分，在TCP连接的一开始传输速率其实是比较低的，随着通信的进行在一定速率范围内传输速率呈指数增长。&lt;/p&gt;

&lt;h2 id=&#34;提高http连接性能的技术:bcf53f62b95030078a83e7b9bb07b9b2&#34;&gt;提高http连接性能的技术&lt;/h2&gt;

&lt;p&gt;上面提到的建立TCP连接的时间是不可避免的，但是我们可以通过一个TCP连接传递多条http报文的方式，使得每一个http报文所分摊的建立连接时间缩短。慢启动也不可避免，也可以通过和上面一样的方式重复利用同一个连接，减少慢启动带来的消耗。下面介绍三种提高http连接性能的方法。&lt;/p&gt;

&lt;h4 id=&#34;并行连接:bcf53f62b95030078a83e7b9bb07b9b2&#34;&gt;并行连接&lt;/h4&gt;

&lt;p&gt;单个TCP连接的传输速率有限，但是如果是多个TCP连接一起运行速率就有可能提升。同时多个TCP连接比较消耗内存，所以浏览器在使用并行连接的同时，限制并行TCP连接的数量。&lt;/p&gt;

&lt;h4 id=&#34;持久连接:bcf53f62b95030078a83e7b9bb07b9b2&#34;&gt;持久连接&lt;/h4&gt;

&lt;p&gt;一个TCP连接首先要通过三次握手，然后要经过慢启动才能以一个适合的速率传递报文，如果传递完一份应用层信息就关闭连接，岂不是太浪费了，所以就有了持久连接的技术，传递完一份应用层报文后并不立即关闭TCP连接。&lt;/p&gt;

&lt;p&gt;在http/1.1中，在现在这个年代已经不需要考虑http/1.0了，默认采用了持久连接的技术，你可能会在http请求头或者响应头中看到这样的信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Connection: keep-alive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在http/1.1中，客户端假定收到响应后，除非响应中包含&lt;code&gt;Connection: close&lt;/code&gt;，不然http/1.1连接仍维持打开状态。但是，客户端和服务器仍然可以随时关闭TCP连接，也就是说，&lt;code&gt;Connection: keep-alive&lt;/code&gt;是一个不可靠的保证。&lt;/p&gt;

&lt;h4 id=&#34;管道化连接:bcf53f62b95030078a83e7b9bb07b9b2&#34;&gt;管道化连接&lt;/h4&gt;

&lt;p&gt;管道化连接是在持久连接的基础上的一项技术，在一条报文发出之后，在等待响应之前可以继续发送其他报文，提高连接的利用效率。&lt;/p&gt;

&lt;p&gt;管线化操作产生了顺序问题，TCP采用了&lt;strong&gt;回退N步&lt;/strong&gt;和&lt;strong&gt;选择重传&lt;/strong&gt;杂合的方式最终实现管道化连接。&lt;/p&gt;

&lt;p&gt;这篇文章没有从功能角度来描述TCP，而是从性能角度，讨论了影响TCP传输性能的几个因素，并给出了一些成熟提高传输性能的方案。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>初识传输层</title>
      <link>https://jiangshanmeta.github.io/post/computernetwork/transportlayer/</link>
      <pubDate>Sun, 24 Jul 2016 20:36:07 +0800</pubDate>
      
      <guid>https://jiangshanmeta.github.io/post/computernetwork/transportlayer/</guid>
      <description>

&lt;p&gt;传输层位于应用层和网络层之间，是分层的网络体系结构的重要部分。作为WEB开发者虽然并不直接接触传输层，但是了解一下基本原理对于理解应用层还是有帮助的。&lt;/p&gt;

&lt;h2 id=&#34;传输层的功能:7d394745458fab98d1011e5dc7ce06d1&#34;&gt;传输层的功能&lt;/h2&gt;

&lt;p&gt;传输层的功能是为不同主机上的应用进程之间提供了&lt;strong&gt;逻辑通信&lt;/strong&gt;。注意这里是逻辑通信，而不是物理通信，传输层是在端系统中实现的而不是在路由器中实现的。在发送端，传输层将从应用进程收到的报文转换成传输层报文段，添加传输层首部。在接收端，网络层从数据报中提取传输层报文，并将其交给传输层。传输层处理收到的报文段，为应用层提供数据。&lt;/p&gt;

&lt;p&gt;常见的传输层协议有UDP和TCP。UDP为应用层提供了不可靠、无连接的服务，而TCP提供了可靠、面向连接的服务。&lt;/p&gt;

&lt;h2 id=&#34;多路复用-多路分解:7d394745458fab98d1011e5dc7ce06d1&#34;&gt;多路复用/多路分解&lt;/h2&gt;

&lt;p&gt;应用层和传输层之间不是直接交换数据，而是通过套接字socket。每一个套接字都有唯一标识符。&lt;/p&gt;

&lt;p&gt;为了在不同主机之间标示套接字，需要在传输层报文中有几个字段。在接收端，传输层检查这些字段，标识出接收套接字，进而将报文段定向到套接字。将传输层报文中的数据交付到正确的套接字的工作称为&lt;strong&gt;多路分解&lt;/strong&gt;。从源主机中不同套接字中收集数据块，为其封装首部信息，然后将报文段传给网络层，这些工作称为&lt;strong&gt;多路复用&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;在UDP中一个套接字是通过 目的IP和目的端口号标示的。在TCP中一个套接字是通过 源IP地址、源端口号、目的IP地址、目的端口号标示的。&lt;/p&gt;

&lt;h2 id=&#34;udp协议:7d394745458fab98d1011e5dc7ce06d1&#34;&gt;UDP协议&lt;/h2&gt;

&lt;p&gt;UDP协议为应用层提供了不可靠、无连接的服务。UDP是应用层协议比较简单的实现，能提供的功能仅有多路复用/多路分用和差错检验。&lt;/p&gt;

&lt;p&gt;先说一下UDP报文的结构。传输层报文是在应用层报文基础上添加了首部信息，即传输层报文 = 传输层首部 + 应用信息。我们的关注点显然是首部字段。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/computernetwork/udp.jpg&#34; alt=&#34;UDP报文结构&#34; /&gt;&lt;/p&gt;

&lt;p&gt;UDP有四个首部，分别是：源端口号、目的端口号、长度、校验和。源端口号和目的端口号是多路复用/多路分用的基础，长度字段指明了UDP报文的字节数（首部+数据）。校验和是为了差错检验功能。然而不幸的是UDP协议仅仅能够发现错误，但无法从错误中恢复出来，所以UDP协议无法提供可靠地数据传输。&lt;/p&gt;

&lt;p&gt;应用UDP协议的应用，一般是对数据可靠性要求没那么高的，比如DNS查询、网络电话、在线直播之类的。&lt;/p&gt;

&lt;h2 id=&#34;可靠数据传输原理:7d394745458fab98d1011e5dc7ce06d1&#34;&gt;可靠数据传输原理&lt;/h2&gt;

&lt;p&gt;这个问题说实话有点大了，其实写一个系列丛书讨论这个问题都不为过。我这里就说点总结性的。&lt;/p&gt;

&lt;p&gt;为了检验数据是否有差错，采用了校验和。&lt;/p&gt;

&lt;p&gt;为了返回检查结果和接受信息，采用了反馈机制。&lt;/p&gt;

&lt;p&gt;为了处理丢包，采用了超时机制。&lt;/p&gt;

&lt;p&gt;为了处理数据错误和丢包，采用了重传机制（重传大法好）。&lt;/p&gt;

&lt;p&gt;为了标识每一个分组、处理冗余分组、检测丢包，采取了序号。&lt;/p&gt;

&lt;p&gt;为了解决管线化操作中的差错恢复，出现了回退N步和选择重传。&lt;/p&gt;

&lt;h2 id=&#34;tcp报文与tcp连接:7d394745458fab98d1011e5dc7ce06d1&#34;&gt;TCP报文与TCP连接&lt;/h2&gt;

&lt;p&gt;TCP相较于UDP，具有面向连接、可靠传输、流量控制、拥塞控制的功能，显然其所添加的首部字段更加复杂。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/computernetwork/tcppost.png&#34; alt=&#34;TCP报文结构&#34; /&gt;&lt;/p&gt;

&lt;p&gt;源端口号和目的端口号是多路复用/多路分用的基础，显然TCP报文也会具有这两个字段。与UDP报文类似，TCP报文也具有检验和字段，用于检验比特错误。TCP具有序号和确认号两个字段，用于实现可靠的数据传输。接收窗口字段，用于流量控制。SYN、FIN字段用于建立连接和结束连接。ACK字段用于指示确认字段中的值是有效的。&lt;/p&gt;

&lt;p&gt;TCP是面向连接的，我们首先要看的是如何建立TCP连接。&lt;/p&gt;

&lt;p&gt;首先客户端TCP向服务器TCP发送一个特殊的TCP报文，该报文段不包含任何应用层传来的数据，但是在报文首部SYN字段标为1，因此这个特殊的报文被称为&lt;strong&gt;SYN报文段&lt;/strong&gt;。在序号字段中，会填入客户端随机产生的初始序号。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/computernetwork/tcpestablish.jpg&#34; alt=&#34;三次握手&#34; /&gt;&lt;/p&gt;

&lt;p&gt;服务器端接收到这个建立连接的请求后会发送一个同意建立连接的响应报文。这个响应报文也不包含应用层信息，但是SYN字段标为1，确认字段为客户端传来的初始序号+1，ACK字段标为1表示确认字段有效，服务器会根据源IP、源端口号、目的主机、目的端口号以及其他信息利用散列函数生成一个服务器的初始序号，放到响应报文的序号字段中。因为SYN和ACK两个字段都被标为1，因此这个返回报文也被称为&lt;strong&gt;SYNACK报文段&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;客户端收到服务器发回来的响应报文，明白了服务器同意建立连接，发送第三个报文，该报文中SYN字段被标为0，并且可以传递应用层信息了。这个报文的序列号是第一步中的序列号+1，确认号是服务器发回来的初始序号+1，因为确认字段有效所以ACK字段标为1。&lt;/p&gt;

&lt;p&gt;以上三步一般会统称为&lt;strong&gt;三次握手&lt;/strong&gt;，有一些程序员冷笑话就是根据这个来的。言归正传，你说为什么非要三次呢？两次不就解决了，还有为什么服务器初始序号的产生那么复杂？这两个问题的答案是有交叉的。服务器根据客户端的信息利用散列函数生成服务器初始序号，但此时服务器并不保存这个序号，也不为这个连接分配资源，仅仅是同意了建立连接。服务器的响应报文发出去之后，可能用户接收不到，需要第三次握手表示客户端已经收到服务器同意接受请求。同时通过第三次握手的确认字段表明曾经发起过连接请求。&lt;/p&gt;

&lt;p&gt;TCP建立连接之后，就可以进行可靠传输了。为了提高传输效率采用了管线化（也有翻译成流水线的）技术。可靠传输基本的原理上面已经提过了，TCP综合利用了检验和、累积确认、定时器、重传、序号、确认号。在传输过程中，通过报文中的接收窗口字段表明还可以接受多少内容，从而实现了流量控制，防止接收端数据溢出。这里还需要说的一句是确认信息正确到达和传递应用层信息是两个不同的功能，只是会倾向于将两个一起发送减少不必要的数据传输，这样就产生了&lt;strong&gt;延迟确认&lt;/strong&gt;的问题。&lt;/p&gt;

&lt;p&gt;在完成传输任务后，这个TCP连接可以保持一段时间后再拆除，也可以立即拆除。拆除连接时首先客户端向服务器端发送一个TCP报文，其中FIN字段被设为1。服务器接收到该报文段后，发送一个确认报文段。然后服务器连接关闭，发送它自己的终止报文段，FIN字段被置为1。最后，客户端对这个来自于服务器的终止报文确认，发送确认报文，进入TIME_WAIT状态，经过等待后释放相关资源，连接完全关闭。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jiangshanmeta.github.io/blogimg/computernetwork/tcpfinish.jpg&#34; alt=&#34;拆除连接&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;tcp拥塞控制:7d394745458fab98d1011e5dc7ce06d1&#34;&gt;TCP拥塞控制&lt;/h2&gt;

&lt;p&gt;拥塞是TCP发送报文速率相较于路由器接受能力过大，使得出现丢包、延迟的现象。TCP可以进行拥塞控制，那么，首先，TCP是如何感受拥塞的呢？TCP发送方定义了一个丢包事件：要么定时器超时、要么收到三个冗余ACK。然后TCP是如何进行拥塞控制、限制传输速率的？和流量控制中的接收窗口类似，TCP发送端也有一个拥塞窗口的概念，调节这个拥塞窗口即可改变传输速率。&lt;/p&gt;

&lt;p&gt;最后一个问题，TCP具体的拥塞控制实现是怎样的？总结起来是这么几句话：&lt;strong&gt;慢启动、加性增、乘性减&lt;/strong&gt;
。初始拥塞窗口比较小，随着发送拥塞窗口指数增长，称为慢启动（虽然感觉名字怪怪的）。到达一定传输速率后线性增加传输速率，丢包事件后快速减速，这一过程称为加性增，乘性减。这里的“一定传输速率”说起来就复杂了，目前我认为自己只需要知道有个“一定传输速率”的动态分界线即可。&lt;/p&gt;

&lt;p&gt;说到这里流量控制和拥塞控制这两者也应该能区分开了，流量控制解决的是接收端缓存不足的问题，拥塞控制为了解决路由缓存不足的问题。两者差的不是一点半点，虽然有些最终表现上是一致的。&lt;/p&gt;

&lt;h2 id=&#34;最后的总结:7d394745458fab98d1011e5dc7ce06d1&#34;&gt;最后的总结&lt;/h2&gt;

&lt;p&gt;这里这篇文章并没有深入去描述传输层，只是简单地描述了传输层的功能、多路复用/多路分用的概念、UDP报文及应用、可靠传输需要的辅助字段、TCP连接过程/拆除过程、TCP可靠传输、TCP流量控制以及TCP拥塞控制。&lt;/p&gt;

&lt;p&gt;因为目前是以WEB开发的角度看待传输层，这些基本的描述性的东西对于我也应该足够了，或许以后会遇到socket编程吧，当然这是后话了。既然是从WEB开发的角度，我所熟悉的是应用层，传输层更像是一个API，最近我会写一篇文章，从应用层角度看待传输层。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>http方法和状态码</title>
      <link>https://jiangshanmeta.github.io/post/computernetwork/httpmethodandstatuscode/</link>
      <pubDate>Sun, 17 Jul 2016 20:44:32 +0800</pubDate>
      
      <guid>https://jiangshanmeta.github.io/post/computernetwork/httpmethodandstatuscode/</guid>
      <description>

&lt;p&gt;http协议是web开发的基础，然而内容太多，即使是入门级的内容也不是一两篇文章能总结好的。这里就先总结一下http方法和状态码。&lt;/p&gt;

&lt;h2 id=&#34;http方法:299e9942cf324699ed9e60279b71ca7a&#34;&gt;http方法&lt;/h2&gt;

&lt;h4 id=&#34;get方法:299e9942cf324699ed9e60279b71ca7a&#34;&gt;GET方法&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;GET&lt;/code&gt;方法通常用来向服务器请求某个资源。一般打开某个网页就是使用&lt;code&gt;GET&lt;/code&gt;方法。&lt;/p&gt;

&lt;h4 id=&#34;post方法:299e9942cf324699ed9e60279b71ca7a&#34;&gt;POST方法&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;POST&lt;/code&gt;方法是用来向服务器输入数据的。有的表单提交就是采用&lt;code&gt;POST&lt;/code&gt;方法，不过随着现在业务逻辑的复杂化，应该很少有人会直接使用这种方法提交表单，而是采用&lt;code&gt;ajax&lt;/code&gt;提交表单内容。&lt;/p&gt;

&lt;h4 id=&#34;head方法:299e9942cf324699ed9e60279b71ca7a&#34;&gt;HEAD方法&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;HEAD&lt;/code&gt;方法和&lt;code&gt;GET&lt;/code&gt;方法很类似，但是服务器在响应中只会返回首部，而不会返回主体部分。&lt;/p&gt;

&lt;h4 id=&#34;put方法:299e9942cf324699ed9e60279b71ca7a&#34;&gt;PUT方法&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;PUT&lt;/code&gt;方法用于向服务器写入文档。&lt;code&gt;PUT&lt;/code&gt;方法的语义是让服务器用请求的主体部分来创建一个由所请求URL命名的新文档，或者，如果那个URL已经存在，就用这个主体替代它。&lt;/p&gt;

&lt;p&gt;因为&lt;code&gt;PUT&lt;/code&gt;方法允许对内容进行修改，对于WEB服务器，原则上应该需要用户登录确认身份。&lt;/p&gt;

&lt;h4 id=&#34;delete方法:299e9942cf324699ed9e60279b71ca7a&#34;&gt;DELETE方法&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;DELETE&lt;/code&gt;方法是与&lt;code&gt;PUT&lt;/code&gt;方法相反的方法，它用来删除文件。&lt;/p&gt;

&lt;h4 id=&#34;options方法:299e9942cf324699ed9e60279b71ca7a&#34;&gt;OPTIONS方法&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;OPTIONS&lt;/code&gt;方法请求服务器告知其支持的各种功能。可以询问服务器通常支持哪些方法，或者对某些特殊资源支持哪些方法。&lt;/p&gt;

&lt;h4 id=&#34;trace方法:299e9942cf324699ed9e60279b71ca7a&#34;&gt;TRACE方法&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;TRACE&lt;/code&gt;方法允许客户端在最终将请求发送给服务器时，看看它变成了什么样子。服务器会在响应主体中携带它收到的原始请求报文。&lt;/p&gt;

&lt;h2 id=&#34;http状态码和原因短语:299e9942cf324699ed9e60279b71ca7a&#34;&gt;http状态码和原因短语&lt;/h2&gt;

&lt;p&gt;http状态码为客户端提供了一种理解事务处理结果的便捷方式。原因短语一般是为了方便人类理解而存在的。&lt;/p&gt;

&lt;h3 id=&#34;100-199-信息性状态码:299e9942cf324699ed9e60279b71ca7a&#34;&gt;100-199 信息性状态码&lt;/h3&gt;

&lt;h4 id=&#34;101-switching-protocols:299e9942cf324699ed9e60279b71ca7a&#34;&gt;101 Switching Protocols&lt;/h4&gt;

&lt;p&gt;服务器正在根据客户端的指定，将协议切换成Update首部所列的首部。&lt;/p&gt;

&lt;h3 id=&#34;200-299-成功状态码:299e9942cf324699ed9e60279b71ca7a&#34;&gt;200-299 成功状态码&lt;/h3&gt;

&lt;h4 id=&#34;200-ok:299e9942cf324699ed9e60279b71ca7a&#34;&gt;200 OK&lt;/h4&gt;

&lt;p&gt;表示从客户端发来的请求在服务器端正常处理了。在响应实体中包含了所请求的资源。&lt;/p&gt;

&lt;h4 id=&#34;204-no-content:299e9942cf324699ed9e60279b71ca7a&#34;&gt;204 No Content&lt;/h4&gt;

&lt;p&gt;表示客户端发来的请求在服务器端得到正常处理，但是在响应报文中不含实体的主体部分。大家可以看一下知乎专栏写文章那个页面，应该是监听输入事件然后发起ajax请求保存文章内容，然后返回的状态码就是204。虽然我个人认为知乎的这个保存设计不是很好。&lt;/p&gt;

&lt;h4 id=&#34;206-partical-content:299e9942cf324699ed9e60279b71ca7a&#34;&gt;206 Partical Content&lt;/h4&gt;

&lt;p&gt;成功执行了一个Range请求。206响应中必须包含&lt;code&gt;Content-Range&lt;/code&gt;、&lt;code&gt;Date&lt;/code&gt;、&lt;code&gt;ETag&lt;/code&gt;或&lt;code&gt;Content-Location&lt;/code&gt;首部。&lt;/p&gt;

&lt;h3 id=&#34;300-399-重定向状态码:299e9942cf324699ed9e60279b71ca7a&#34;&gt;300-399 重定向状态码&lt;/h3&gt;

&lt;h4 id=&#34;301-moved-permanently:299e9942cf324699ed9e60279b71ca7a&#34;&gt;301 Moved Permanently&lt;/h4&gt;

&lt;p&gt;永久重定向。表示请求的资源已经被分配了新的URL，响应的&lt;code&gt;Location&lt;/code&gt;首部字段包含资源现在所处的URL。&lt;/p&gt;

&lt;h4 id=&#34;302-found-303-see-other-307-temporary-redirect:299e9942cf324699ed9e60279b71ca7a&#34;&gt;302 Found、303 See Other、307 Temporary Redirect&lt;/h4&gt;

&lt;p&gt;这三个状态码表示临时重定向 ，功能差不多，但是有些许差异，而且还牵扯到http/1.0和http/1.1版本问题。&lt;/p&gt;

&lt;p&gt;在http/1.0中，如果发送的是POST请求，服务器返回302，则需要向用户确认是否重发、重发依然是POST请求。&lt;/p&gt;

&lt;p&gt;在http/1.1中，浏览器对于302，其实是按照303处理的，即POST请求会转换为GET请求然后重发。&lt;/p&gt;

&lt;p&gt;在http/1.1中，浏览器对待307，其实和http/1.0中的302一致，不改变请求状态。&lt;/p&gt;

&lt;p&gt;换句话说对于&lt;code&gt;GET&lt;/code&gt;请求这几个没什么区别，对于&lt;code&gt;POST&lt;/code&gt;请求，正常人会希望重定向为一个新的&lt;code&gt;POST&lt;/code&gt;请求，会采用307状态码。然而有应用场景？&lt;/p&gt;

&lt;p&gt;可以参考&lt;a href=&#34;http://www.cnblogs.com/cswuyg/p/3871976.html&#34;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;304-not-modified:299e9942cf324699ed9e60279b71ca7a&#34;&gt;304 Not Modified&lt;/h4&gt;

&lt;p&gt;客户端可以在请求首部中包含条件请求首部，如果不满足条件的话就返回304。带有这个状态码的响应不应该包含实体的主体部分。&lt;/p&gt;

&lt;h3 id=&#34;400-499-客户端错误状态码:299e9942cf324699ed9e60279b71ca7a&#34;&gt;400-499 客户端错误状态码&lt;/h3&gt;

&lt;h4 id=&#34;400-bad-request:299e9942cf324699ed9e60279b71ca7a&#34;&gt;400 Bad Request&lt;/h4&gt;

&lt;p&gt;表示请求报文有语法错误&lt;/p&gt;

&lt;h4 id=&#34;403-forbidden:299e9942cf324699ed9e60279b71ca7a&#34;&gt;403 Forbidden&lt;/h4&gt;

&lt;p&gt;表示请求被服务器拒绝了。如果服务器想说明为什么拒绝请求，可在响应主体对原因进行说明。然而，通常情况下因为不想说明为什么拒绝才用这个状态码，所以我至今不明白为什么有那么两天mongodb中文网给我403。&lt;/p&gt;

&lt;h4 id=&#34;404-not-found:299e9942cf324699ed9e60279b71ca7a&#34;&gt;404 Not Found&lt;/h4&gt;

&lt;p&gt;这个就太熟悉了，服务器找不到所请求的url。&lt;/p&gt;

&lt;h3 id=&#34;500-599-服务器错误状态码:299e9942cf324699ed9e60279b71ca7a&#34;&gt;500-599 服务器错误状态码&lt;/h3&gt;

&lt;h4 id=&#34;500-internal-server-error:299e9942cf324699ed9e60279b71ca7a&#34;&gt;500 Internal Server Error&lt;/h4&gt;

&lt;p&gt;在开发中，我的本地数据库连的同事的，然而有的时候连不上，就会报500。&lt;/p&gt;

&lt;h4 id=&#34;503-service-unavailable:299e9942cf324699ed9e60279b71ca7a&#34;&gt;503 Service Unavailable&lt;/h4&gt;

&lt;p&gt;服务器现在无法为请求提供服务，但将来可以。偶尔见到维护的时候用过这个状态码。&lt;/p&gt;

&lt;h2 id=&#34;请求行与响应行:299e9942cf324699ed9e60279b71ca7a&#34;&gt;请求行与响应行&lt;/h2&gt;

&lt;p&gt;请求行的语法如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;method&amp;gt;&amp;lt;request-URL&amp;gt;&amp;lt;version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;举个例子，请求知乎首页的请求行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET / HTTP/1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;响应行的语法如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;version&amp;gt;&amp;lt;status&amp;gt;&amp;lt;reason-phrase&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请求知乎首页响应行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请求行和响应行需要方法、url、版本、状态码和状态短语。方法、状态码状态短语上面说过了，版本对于现代浏览器是http/1.1。url就不说了。&lt;/p&gt;

&lt;p&gt;update 2016/07/19&lt;/p&gt;

&lt;p&gt;既然提到了状态码，引用一段项目中的相关函数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ( ! function_exists(&#39;redirect&#39;))
{
    function redirect($uri = &#39;&#39;, $method = &#39;location&#39;, $http_response_code = 302)
    {
        if ( ! preg_match(&#39;#^https?://#i&#39;, $uri))
        {
            $uri = site_url($uri);
        }

        switch($method)
        {
            case &#39;refresh&#39;  : header(&amp;quot;Refresh:0;url=&amp;quot;.$uri);
                break;
            default         : header(&amp;quot;Location: &amp;quot;.$uri, TRUE, $http_response_code);
                break;
        }
        exit;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码语言是最好的编程语言php（大雾。作用是重定向，这里默认的重定向状态码就是302，虽然严格来说用303更好。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DNS原理入门</title>
      <link>https://jiangshanmeta.github.io/post/computernetwork/dns/</link>
      <pubDate>Sun, 17 Jul 2016 00:43:18 +0800</pubDate>
      
      <guid>https://jiangshanmeta.github.io/post/computernetwork/dns/</guid>
      <description>&lt;p&gt;作为半路出发搞web开发的，计算机网络的知识很薄弱，我可不想一辈子写写页面做做增删查改就完了，要提高一下自己的知识水平。光看书也不行，把自己学到的讲出来，这样能够加深理解。&lt;/p&gt;

&lt;p&gt;一般的介绍计算机网络会从OSI模型或者TCP/IP模型开始介绍，虽然目前有个整体的概念但是理解还是不深，所以我想放到最后说。首先要说的应用层的DNS。DNS基本不会被用户手动使用，但是会被其他应用层程序调用，因为DNS的主要作用是将主机名映射到IP地址。为什么需要这么做？因为不同端系统之间的通信需要IP地址来帮助寻找目标主机。&lt;/p&gt;

&lt;p&gt;除了将主机名映射到IP地址这个作用外，DNS还有以下功能：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;主机别名&lt;/li&gt;
&lt;li&gt;邮件服务器别名&lt;/li&gt;
&lt;li&gt;负载分配。这一点需要说一说，对于一些大站，为了性能优化会部署在多个服务器上。此时一个主机名就会对应多个IP地址。用户请求的时候DNS服务器返回的不是一个IP，而是一组，但是在每次响应时会循环地址次序。在客户端根据返回的IP发起请求的时候通常会先请求排在前面的IP地址，于是便实现了负载分配。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;整体掌握DNS的功能后，然后我们要看的是DNS查询的过程。&lt;/p&gt;

&lt;p&gt;处于种种原因（大家可以自行想象），DNS采取了分布式、分层次的数据库。DNS服务器大体分为三种类型：根DNS服务器、顶级域DNS服务器、权威DNS服务器。还有一个本地DNS服务器，通常本地DNS服务器是由ISP提供的，相当于是我们DNS查询的一个代理，并且还起到缓存的作用。&lt;/p&gt;

&lt;p&gt;我们要进行DNS查询，首先是查询本地hosts，如果有结果就直接返回IP，这就是为什么本地开发要改hosts。一般的用户是不会配置本地hosts的，不考虑浏览器缓存的话会向本地DNS服务器查询（其实是应用程序如浏览器的缓存优先级更高）。其实也不见得是向本地DNS服务器请求，因为可以设置DNS服务器IP，然而对于一般用户本地DNS服务器地址是接入网的时候就分配好的。通用过程是DNS服务器先向根DNS服务器请求，根DNS服务器会返回顶级域DNS服务器的地址，然后本地DNS服务器据此地址请求顶级域DNS服务器，顶级域DNS服务器返回权威DNS服务器的地址。本地DNS服务器再向权威DNS服务器请求，最终由权威DNS返回查询主机的IP。其实这只是一个简化模型，因为返回的可能不是下一层DNS服务器地址，而是一个中间DNS服务器地址。&lt;/p&gt;

&lt;p&gt;要获得一个主机到IP的映射本地DNS服务器至少要发起三次请求，接受三次回复，如果每次都重复此过程其实是比较昂贵的，所以就有了DNS缓存，通常本地DNS服务器会起到这么一个作用。在查询过程中，会先判断本地缓存有没有相关信息，再进行操作。DNS缓存也会有过期时间的概念，这点不难理解，毕竟互联网是一个动态的网络。&lt;/p&gt;

&lt;p&gt;最终本地DNS服务器向端系统返回IP。换句话说，对于客户端来说，直接发生作用的只有本地DNS服务器，向其他各级DNS服务器请求是本地DNS服务器帮助我们完成的。&lt;/p&gt;

&lt;p&gt;这里还会有 &lt;strong&gt;递归查询&lt;/strong&gt;、&lt;strong&gt;迭代查询&lt;/strong&gt;的概念，理解了上述过程，这两个概念理解起来就没什么难度了。&lt;/p&gt;

&lt;p&gt;DNS协议运行在传输层的UDP协议之上。&lt;/p&gt;

&lt;p&gt;DNS查询基本过程了解了，我们要看一下DNS记录的内容。DNS记录的格式如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(Name,Value,Type,TTL)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;TTL是生存时间，Name和Value的含义决定于Type&lt;/p&gt;

&lt;p&gt;如果Type是&lt;code&gt;A&lt;/code&gt;，则Name是主机名，Value是主机名对应IP地址&lt;/p&gt;

&lt;p&gt;如果Type是&lt;code&gt;NS&lt;/code&gt;，则Name是域，Value是知道如何获得该域权威DNS服务器的&lt;strong&gt;主机名&lt;/strong&gt;，注意Value是一个主机名，不是IP&lt;/p&gt;

&lt;p&gt;如果Type是&lt;code&gt;CNAME&lt;/code&gt;，则Name是别名，Value是规范主机名。这就是为什么DNS会提供别名服务&lt;/p&gt;

&lt;p&gt;如果Type是&lt;code&gt;MX&lt;/code&gt;，则Name是邮件服务系统的主机名，Value是别名。这就是为什么DNS会提供邮件服务器别名服务&lt;/p&gt;

&lt;p&gt;至于DNS报文，我目前认为没有太多值得在这里去说的。&lt;/p&gt;

&lt;p&gt;DNS的功能、DNS查询过程、DNS记录和报文相关的内容就说到这里吧。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;参考资料&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;James F. Kurose， Keith W. Ross. 计算机网络-自顶向下方法（原书第6版）. 机械工业出版社. 2014.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>